(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/material/tooltip'), require('@angular/common'), require('@firestitch/common'), require('lodash-es'), require('date-fns'), require('date-fns-tz'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@firestitch/date', ['exports', '@angular/core', '@angular/material/tooltip', '@angular/common', '@firestitch/common', 'lodash-es', 'date-fns', 'date-fns-tz', 'rxjs', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.firestitch = global.firestitch || {}, global.firestitch.date = {}), global.ng.core, global.ng.material.tooltip, global.ng.common, global.common$1, global.lodashEs, global.dateFns, global.dateFnsTz, global.rxjs, global.rxjs.operators));
})(this, (function (exports, i0, i1, common, common$1, lodashEs, dateFns, dateFnsTz, rxjs, operators) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    function getFormatString(formatTo, date) {
        if (formatTo === void 0) { formatTo = 'date'; }
        if (date === void 0) { date = null; }
        var formatParts = formatTo.split('-');
        var hasTime = formatParts.indexOf('time') != -1;
        var hasDate = formatParts.indexOf('date') != -1;
        var parts = [];
        if (hasDate || hasTime) {
            if (hasDate) {
                var hasYear = formatParts.indexOf('yearless') === -1;
                var hasYearDiff = formatParts.indexOf('yeardiff') !== -1;
                var sameYear = date && dateFns.isSameYear(date, new Date());
                var showYear = hasYear &&
                    !(hasYearDiff && sameYear);
                // day of week
                if (formatParts.indexOf('day') != -1) {
                    parts.push(formatParts.indexOf('full') != -1 ? 'EEEE' : 'EEE');
                }
                // month
                parts.push(formatParts.indexOf('full') != -1 ? 'MMMM' : 'MMM');
                // day
                if (formatParts.indexOf('dayless') === -1) {
                    var day = formatParts.indexOf('ordinal') != -1 ? 'do' : 'd';
                    if (showYear) {
                        day += ',';
                    }
                    parts.push(day);
                }
                // year
                if (showYear) {
                    parts.push('yyyy');
                }
            }
            if (hasTime) {
                parts.push(formatParts.indexOf('24') != -1 ? 'HH:mm' : 'h:mm aaa');
                // if (formatParts.indexOf('tz') != -1) {
                //   timeFormat += ' [' + moment.tz(date, moment.tz.guess()).format('z') + ']';
                // }
                if (formatParts.indexOf('tz') != -1 || formatParts.indexOf('gmt') != -1) {
                    parts.push("'('OOOO')'");
                }
            }
        }
        else {
            parts.push(formatTo);
        }
        return parts.join(' ').trim();
    }

    function sanitizeDate(date) {
        var matches = date.match(/^(\d{2}:\d{2}:\d{2})(.*)/);
        if (matches) {
            date = "1970-01-01T" + matches[1] + (matches[2] || '+00:00');
        }
        return date;
    }

    function parse(date) {
        if (typeof date === 'string') {
            date = dateFns.parseISO(sanitizeDate(date));
        }
        return dateFns.isValid(date) ? date : null;
    }

    function format(date, formatTo, options) {
        if (options === void 0) { options = {}; }
        date = parse(date);
        var outputFormat = getFormatString(formatTo, date);
        return date ? dateFnsTz.format(date, outputFormat, { timeZone: options.timezone }) : null;
    }

    var SECONDS = {
        YEAR: 3600 * 24 * 365,
        MONTH: 3600 * 24 * 30.417,
        DAY: 3600 * 24,
        HOUR: 3600,
        MINUTE: 60
    };

    function parseDuration(value) {
        var time = 0;
        if (!value && typeof value !== 'string') {
            return rxjs.of({ error: 'Invalid duration format' });
        }
        value = value
            .trim()
            .replace(/(\d+)\s+/g, '$1')
            .replace(/\s+/, ' ')
            .replace(/^\./, '0.');
        value.split(' ').forEach(function (chunk) {
            var matches = chunk.match(/^(\d+\.?\d*)([YMdhms]?)$/);
            if (!matches) {
                return;
            }
            var factor = {
                Y: SECONDS.YEAR,
                M: SECONDS.MONTH,
                d: SECONDS.DAY,
                h: SECONDS.HOUR,
                m: SECONDS.MINUTE,
                s: 1
            }[matches[2]];
            time += Math.round(+matches[1]) * (factor || 1);
        });
        return rxjs.of({ time: time });
    }

    function duration(time, options) {
        options = options || {};
        if (typeof options === 'string') {
            options = {
                seconds: !!options.match(/second/),
                minutes: !!options.match(/minute/),
                hours: !!options.match(/hour/),
                days: !!options.match(/day/),
                months: !!options.match(/month/),
                years: !!options.match(/year/),
            };
        }
        if (!lodashEs.isNumber(time)) {
            var parsedResult_1;
            parseDuration(time).subscribe(function (result) {
                parsedResult_1 = result;
            });
            if (parsedResult_1 && parsedResult_1.error || !parsedResult_1.time) {
                return 'error';
            }
            else {
                time = parsedResult_1.time;
            }
            options.unit = 'seconds';
        }
        options = Object.assign({}, options);
        options.unit = options.unit === undefined ? 'seconds' : options.unit;
        options.abr = options.abr === undefined ? true : options.abr;
        options.suffix = options.suffix === true ? (time > 0 ? ' ago' : ' from now') : '';
        options.pad = options.pad === undefined ? false : options.pad;
        options.thousandsSeperator = options.thousandsSeperator === undefined ? true : options.thousandsSeperator;
        if (!options.seconds && !options.minutes && !options.hours && !options.days && !options.months && !options.years) {
            options.seconds = true;
            options.minutes = false;
            options.hours = false;
            options.days = false;
            options.months = false;
            options.years = false;
        }
        else {
            options.seconds = options.seconds === undefined ? false : options.seconds;
            options.minutes = options.minutes === undefined ? false : options.minutes;
            options.hours = options.hours === undefined ? false : options.hours;
            options.days = options.days === undefined ? false : options.days;
            options.months = options.months === undefined ? false : options.months;
            options.years = options.years === undefined ? false : options.years;
        }
        if (options.unit === 'minutes') {
            time = time * 60;
        }
        else if (options.unit === 'hours') {
            time = Math.round(time * 60 * 60);
        }
        time = Math.abs(parseInt(time));
        var units = {
            years: { abr: 'Y', single: 'year', plural: 'years', seconds: SECONDS.YEAR, next: 'months' },
            months: { abr: 'M', single: 'month', plural: 'months', seconds: SECONDS.MONTH, next: 'days' },
            days: { abr: 'd', single: 'day', plural: 'days', seconds: SECONDS.DAY, next: 'hours' },
            hours: { abr: 'h', single: 'hour', plural: 'hours', seconds: SECONDS.HOUR, next: 'months' },
            minutes: { abr: 'm', single: 'minute', plural: 'minutes', seconds: SECONDS.MINUTE, next: 'seconds' },
            seconds: { abr: 's', single: 'second', plural: 'seconds', seconds: 1, next: null },
        };
        var pieces = {
            years: 0,
            months: 0,
            days: 0,
            hours: 0,
            minutes: 0,
            seconds: 0
        };
        var remainder = time;
        if (options.years) {
            var years = remainder / SECONDS.YEAR;
            if (years >= 1) {
                if (!options.months && !options.days && !options.hours && !options.minutes && !options.seconds) {
                    pieces.years = Math.round(years);
                }
                else {
                    pieces.years = Math.floor(years);
                }
                remainder = remainder - (pieces.years * SECONDS.YEAR);
            }
        }
        if (options.months) {
            var months = remainder / SECONDS.MONTH;
            if (months >= 1) {
                if (!options.days && !options.hours && !options.minutes && !options.seconds) {
                    pieces.months = Math.round(months);
                }
                else {
                    pieces.months = Math.floor(months);
                }
                remainder = remainder - (pieces.months * SECONDS.MONTH);
            }
        }
        if (options.days) {
            var days = remainder / SECONDS.DAY;
            if (days >= 1) {
                if (!options.hours && !options.minutes && !options.seconds) {
                    pieces.days = Math.round(days);
                }
                else {
                    pieces.days = Math.floor(days);
                }
                remainder = remainder - (pieces.days * SECONDS.DAY);
            }
        }
        if (options.hours) {
            var hours = remainder / SECONDS.HOUR;
            if (hours >= 1) {
                if (!options.minutes && !options.seconds) {
                    pieces.hours = Math.round(hours);
                }
                else {
                    pieces.hours = Math.floor(hours);
                }
                remainder = remainder - (pieces.hours * SECONDS.HOUR);
            }
        }
        if (options.minutes) {
            var minutes = remainder / 60;
            if (minutes >= 1) {
                if (!options.seconds) {
                    pieces.minutes = Math.round(minutes);
                }
                else {
                    pieces.minutes = Math.floor(minutes);
                }
                remainder = remainder - (pieces.minutes * SECONDS.MINUTE);
            }
        }
        pieces.seconds = Math.round(remainder);
        var enabled = [];
        var totalSeconds = 0;
        for (var name in units) {
            if (units.hasOwnProperty(name)) {
                if (options[name]) {
                    enabled.push(name);
                }
                totalSeconds += pieces[name] * units[name].seconds;
            }
        }
        var output = [];
        if (enabled.length === 1) {
            options.precision = options.precision === undefined ? 1 : options.precision;
            var name = enabled.join('');
            var value = numberFormat(totalSeconds / units[name]['seconds'], options);
            output.push(value + (options.abr ? units[name].abr : ' ' + (value == 1 ? units[name].single : units[name].plural)));
        }
        else {
            options.precision = options.precision === undefined ? enabled.length : options.precision;
            for (var name in units) {
                if (units.hasOwnProperty(name)) {
                    if (options.precision && output.length >= options.precision) {
                        continue;
                    }
                    if (options[name]) {
                        var value = pieces[name];
                        if (value) {
                            output.push(numberFormat(value, options) + (options.abr ? units[name].abr : ' ' + (value == 1 ? units[name].single : units[name].plural)));
                        }
                    }
                }
            }
        }
        // there are no values so show zero of the smallest unit (i.e. "0s")
        if (output.length === 0) {
            for (var name in units) {
                if (units.hasOwnProperty(name)) {
                    if (options[name]) {
                        output = [numberFormat(0, options) + (options.abr ? units[name].abr : ' ' + (units[name] == 1 ? units[name].single : units[name].plural))];
                    }
                }
            }
        }
        // to cut off output depends on maxOutput value
        if (options.maxOutputs && options.maxOutputs < output.length) {
            output = output.splice(0, options.maxOutputs);
        }
        // add suffix if required
        if (options.suffix) {
            output.push(options.suffix);
        }
        return output.join(' ');
    }
    function numberFormat(number, options) {
        if (options === void 0) { options = {}; }
        var precision = options.precision === undefined ? -1 : options.precision;
        var pad = options.pad === undefined ? false : options.pad;
        var thousandsSeperator = options.thousandsSeperator === undefined ? true : options.thousandsSeperator;
        if (thousandsSeperator) {
            if (precision >= 0) {
                number = lodashEs.round(number, precision);
            }
            return number.toLocaleString('en-US', { minimumFractionDigits: pad ? precision : 0 });
        }
        if (precision >= 0 && pad) {
            return number.toFixed(precision);
        }
        if (precision >= 0) {
            return lodashEs.round(number, precision);
        }
        return number;
    }

    function ago(date, frmt) {
        if (frmt === void 0) { frmt = 'date'; }
        date = parse(date);
        if (!date) {
            return '';
        }
        var minDiff = lodashEs.round(dateFns.differenceInSeconds(new Date(), date) / 60, 0);
        var hourDiff = lodashEs.round(dateFns.differenceInMinutes(new Date(), date) / 60, 0);
        if (Math.abs(hourDiff) >= 24) {
            if (date.getFullYear() == new Date().getFullYear()) {
                return format(date, 'date-yearless');
            }
            else {
                return format(date, frmt);
            }
        }
        else if (hourDiff == 0 && minDiff == 0) {
            return 'now';
        }
        else {
            return duration(minDiff, {
                unit: 'minutes',
                suffix: true,
                minutes: true,
                hours: true
            });
        }
    }

    function iso8601(date) {
        date = parse(date);
        if (!date) {
            return '';
        }
        return dateFns.format(date, "yyyy-MM-dd'T'HH:mm:ssxxx");
    }

    function range(from, to, format) {
        if (format === void 0) { format = 'date'; }
        from = parse(from);
        to = parse(to);
        if (!to && !from) {
            return '';
        }
        if (from && !to) {
            to = from;
        }
        if (to && !from) {
            from = to;
        }
        var formatParts = format.split('-');
        var fromFormat = getFormatString(format);
        var toFormat = getFormatString(format);
        if (formatParts.indexOf('yearless') !== -1) {
            fromFormat = fromFormat.replace(' yyyy', '');
            toFormat = toFormat.replace(' yyyy', '');
        }
        if (dateFns.differenceInMilliseconds(from, to) == 0) {
            return dateFns.format(from, fromFormat);
        }
        if (formatParts.indexOf('time') !== -1) {
            // date and time
            if (!from.getMinutes()) {
                fromFormat = fromFormat.replace(':mm', '');
            }
            if (!to.getMinutes()) {
                toFormat = toFormat.replace(':mm', '');
            }
            if (from.getFullYear() === to.getFullYear()) {
                if ((new Date()).getFullYear() === from.getFullYear()) {
                    fromFormat = fromFormat.replace(', yyyy', '');
                }
                toFormat = toFormat.replace(', yyyy', '');
                if (from.getMonth() == to.getMonth()) {
                    if (from.getDate() == to.getDate()) {
                        if ((from.getHours() < 12 && to.getHours() < 12) ||
                            (from.getHours() > 12 && to.getHours() > 12)) {
                            fromFormat = fromFormat.replace(' aaa', '');
                        }
                        toFormat = toFormat
                            .replace('MMMM', '')
                            .replace('MMM', '')
                            .replace('EEEE', '')
                            .replace('EEE', '')
                            .replace(' do', '')
                            .replace(' d', '')
                            .trim();
                    }
                    else {
                        // add comma after day
                        toFormat = toFormat
                            .replace(' do', ' do,')
                            .replace(' d', ' d,');
                    }
                }
                else {
                    // add comma after day
                    toFormat = toFormat
                        .replace(' do', ' do,')
                        .replace(' d', ' d,');
                }
            }
            fromFormat = fromFormat.replace('MM d h', 'MM d · h');
        }
        else {
            // date only
            if (from.getFullYear() == to.getFullYear()) {
                fromFormat = fromFormat
                    .replace(' yyyy', '')
                    .replace(',', '')
                    .trim();
                if (from.getMonth() == to.getMonth()) {
                    if (formatParts.indexOf('day') == -1) {
                        toFormat = toFormat
                            .replace('MMMM', '')
                            .replace('MMM', '')
                            .trim();
                    }
                    if (from.getDate() == to.getDate()) {
                        if (formatParts.indexOf('time') === -1) {
                            fromFormat = getFormatString(format);
                            toFormat = '';
                        }
                    }
                }
            }
        }
        var output = dateFns.format(from, fromFormat);
        if (toFormat) {
            output += ' – ' + dateFns.format(to, toFormat);
        }
        return output;
    }

    function granularDuration(time, options) {
        if (options === void 0) { options = {}; }
        options['seconds'] = options['seconds'] === undefined ? false : options['seconds'];
        options['months'] = options['months'] === undefined ? false : options['months'];
        options['years'] = options['years'] === undefined ? false : options['years'];
        options['precision'] = options['precision'] === undefined ? 3 : options['precision'];
        return duration(time, options);
    }

    function simpleFormat(date) {
        return dateFns.format(date, 'yyyy-MM-dd\'T\'HH:mm:ssxxxxx');
    }

    function toUTC(date) {
        var UTC = Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());
        return new Date(UTC);
    }

    function date(value) {
        var dateObject = typeof value === 'string' ? dateFns.parseISO(value) : value;
        if (!dateFns.isValid(dateObject)) {
            dateObject = null;
        }
        return dateObject;
    }

    function parseLocal(date) {
        if (typeof date === 'string') {
            date = dateFnsTz.utcToZonedTime(sanitizeDate(date), null);
        }
        return dateFns.isValid(date) ? date : null;
    }

    var FsDateFormatPipe = /** @class */ (function () {
        function FsDateFormatPipe() {
        }
        FsDateFormatPipe.prototype.transform = function (value, fmt) {
            return format(value, fmt);
        };
        return FsDateFormatPipe;
    }());
    FsDateFormatPipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateFormatPipe, deps: [], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    FsDateFormatPipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateFormatPipe, name: "fsDateFormat" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateFormatPipe, decorators: [{
                type: i0.Pipe,
                args: [{
                        name: 'fsDateFormat'
                    }]
            }] });

    var FsDatePipe = /** @class */ (function (_super) {
        __extends(FsDatePipe, _super);
        function FsDatePipe() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return FsDatePipe;
    }(FsDateFormatPipe));
    FsDatePipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePipe, deps: null, target: i0__namespace.ɵɵFactoryTarget.Pipe });
    FsDatePipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePipe, name: "fsDate" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePipe, decorators: [{
                type: i0.Pipe,
                args: [{
                        name: 'fsDate'
                    }]
            }] });

    var FsDateRangePipe = /** @class */ (function () {
        function FsDateRangePipe() {
        }
        FsDateRangePipe.prototype.transform = function (value, format) {
            return range(value[0], value[1], format);
        };
        return FsDateRangePipe;
    }());
    FsDateRangePipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateRangePipe, deps: [], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    FsDateRangePipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateRangePipe, name: "fsDateRange" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateRangePipe, decorators: [{
                type: i0.Pipe,
                args: [{
                        name: 'fsDateRange'
                    }]
            }] });

    var FsDateDurationPipe = /** @class */ (function () {
        function FsDateDurationPipe() {
        }
        FsDateDurationPipe.prototype.transform = function (value, fmt) {
            return duration(value, fmt);
        };
        return FsDateDurationPipe;
    }());
    FsDateDurationPipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateDurationPipe, deps: [], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    FsDateDurationPipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateDurationPipe, name: "fsDateDuration" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateDurationPipe, decorators: [{
                type: i0.Pipe,
                args: [{
                        name: 'fsDateDuration'
                    }]
            }] });

    var FsDateAgoPipe = /** @class */ (function () {
        function FsDateAgoPipe() {
        }
        FsDateAgoPipe.prototype.transform = function (value, format) {
            return ago(value, format);
        };
        return FsDateAgoPipe;
    }());
    FsDateAgoPipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateAgoPipe, deps: [], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    FsDateAgoPipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateAgoPipe, name: "fsDateAgo" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateAgoPipe, decorators: [{
                type: i0.Pipe,
                args: [{
                        name: 'fsDateAgo'
                    }]
            }] });

    var FsDateAgoComponent = /** @class */ (function () {
        function FsDateAgoComponent(elementRef, _cd) {
            this.elementRef = elementRef;
            this._cd = _cd;
            this.showTime = false;
            this.format = 'date';
            this.showTooltip = true;
            this.tooltipDateFormat = null;
            this.formattedDate = null;
            this.tooltip = null;
            this._period = 60;
            this._destroy$ = new rxjs.Subject();
            this._date = null;
        }
        Object.defineProperty(FsDateAgoComponent.prototype, "date", {
            get: function () {
                return this._date;
            },
            set: function (value) {
                this._date = parse(value);
            },
            enumerable: false,
            configurable: true
        });
        FsDateAgoComponent.prototype.ngOnInit = function () {
            this._init();
        };
        FsDateAgoComponent.prototype.ngOnChanges = function () {
            this._init();
        };
        FsDateAgoComponent.prototype.ngOnDestroy = function () {
            this._destroy$.next();
            this._destroy$.complete();
        };
        FsDateAgoComponent.prototype.updateFormatted = function () {
            this.formattedDate = ago(this.date, this.format);
            if (this.showTooltip) {
                var tooltipFormat = this.getTooltipFormat();
                var tooltipAgo = this.getTooltipAgo();
                this.tooltip = format(this.date, tooltipFormat) + ' · ' + tooltipAgo;
            }
            this._cd.markForCheck();
        };
        /**
         * Setting format w/o year if year is the same
         */
        FsDateAgoComponent.prototype.getTooltipFormat = function () {
            if (this.tooltipDateFormat) {
                return this.tooltipDateFormat;
            }
            var format = 'date-time';
            var todayYear = new Date().getFullYear();
            var dateYear = new Date(this.date).getFullYear();
            if (todayYear === dateYear) {
                format = 'date-time-yearless';
            }
            return format;
        };
        /**
         * Forming second part of the tooltip
         */
        FsDateAgoComponent.prototype.getTooltipAgo = function () {
            var tooltip = 'now';
            if (!this.date) {
                return '';
            }
            var dateDifference = this._difference(this.date);
            var options = {
                maxOutputs: 1,
                suffix: true,
                years: true,
                months: true,
                days: true,
                hours: true,
                minutes: true
            };
            // if difference more than 1 minute
            if (dateDifference > 59 || dateDifference < 0) {
                tooltip = duration(dateDifference, options);
            }
            return tooltip;
        };
        FsDateAgoComponent.prototype._init = function () {
            this.updateFormatted();
            if (this._updateWhile(this.date) && !this._timer$) {
                this._timerInit();
            }
        };
        FsDateAgoComponent.prototype._timerInit = function () {
            var _this = this;
            this._timer$ = rxjs.interval(this._period * 1000)
                .pipe(operators.takeWhile(function (v, index) { return _this._updateWhile(_this.date); }), operators.takeUntil(this._destroy$));
            this._timer$
                .subscribe({
                next: function () {
                    _this.updateFormatted();
                },
                complete: function () {
                    _this._timer$ = null;
                },
            });
        };
        FsDateAgoComponent.prototype._difference = function (date) {
            return dateFns.differenceInSeconds(new Date(), date);
        };
        FsDateAgoComponent.prototype._updateWhile = function (date) {
            return Math.abs(this._difference(date)) <= (86400 + this._period);
        };
        return FsDateAgoComponent;
    }());
    FsDateAgoComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateAgoComponent, deps: [{ token: i0__namespace.ElementRef }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FsDateAgoComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDateAgoComponent, selector: "fs-date-ago", inputs: { date: "date", showTime: "showTime", format: "format", showTooltip: "showTooltip", tooltipDateFormat: "tooltipDateFormat" }, usesOnChanges: true, ngImport: i0__namespace, template: "<span [matTooltip]=\"tooltip\">{{ formattedDate }}</span>\n", directives: [{ type: i1__namespace.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateAgoComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'fs-date-ago',
                        templateUrl: './date-ago.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }, { type: i0__namespace.ChangeDetectorRef }]; }, propDecorators: { date: [{
                    type: i0.Input
                }], showTime: [{
                    type: i0.Input
                }], format: [{
                    type: i0.Input
                }], showTooltip: [{
                    type: i0.Input
                }], tooltipDateFormat: [{
                    type: i0.Input
                }] } });

    var FsDateAgoFactory = /** @class */ (function () {
        function FsDateAgoFactory(factoryResolver) {
            this.factoryResolver = null;
            this.rootViewContainer = null;
            this.factoryResolver = factoryResolver;
        }
        FsDateAgoFactory.prototype.setRootViewContainerRef = function (viewContainerRef) {
            this.rootViewContainer = viewContainerRef;
        };
        FsDateAgoFactory.prototype.addDynamicComponent = function () {
            var factory = this.factoryResolver
                .resolveComponentFactory(FsDateAgoComponent);
            var component = factory
                .create(this.rootViewContainer.injector);
            this.rootViewContainer.insert(component.hostView);
            return component;
        };
        return FsDateAgoFactory;
    }());
    FsDateAgoFactory.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateAgoFactory, deps: [{ token: i0.ComponentFactoryResolver }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    FsDateAgoFactory.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateAgoFactory });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateAgoFactory, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i0.ComponentFactoryResolver]
                        }] }];
        } });

    var FsDateAgoDirective = /** @class */ (function () {
        function FsDateAgoDirective(fsDateAgoFactory, renderer, elementRef, viewContainerRef) {
            this.fsDateAgoFactory = fsDateAgoFactory;
            this.renderer = renderer;
            this.elementRef = elementRef;
            this.viewContainerRef = viewContainerRef;
            this.date = null;
            this.showTime = false;
            this.format = 'date';
            this.dateAgoRef = null;
        }
        FsDateAgoDirective.prototype.ngOnInit = function () {
        };
        FsDateAgoDirective.prototype.ngOnChanges = function () {
            this.renderDateAgo();
        };
        FsDateAgoDirective.prototype.renderDateAgo = function () {
            this.removeDateAgo();
            this.fsDateAgoFactory.setRootViewContainerRef(this.viewContainerRef);
            this.dateAgoRef = this.fsDateAgoFactory.addDynamicComponent();
            Object.assign(this.dateAgoRef.instance, {
                date: this.date,
                showTime: this.showTime,
                format: this.format
            });
        };
        FsDateAgoDirective.prototype.removeDateAgo = function () {
            if (this.dateAgoRef) {
                this.renderer.removeChild(this.elementRef.nativeElement, this.dateAgoRef.instance.elementRef.nativeElement);
            }
        };
        return FsDateAgoDirective;
    }());
    FsDateAgoDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateAgoDirective, deps: [{ token: FsDateAgoFactory }, { token: i0__namespace.Renderer2 }, { token: i0__namespace.ElementRef }, { token: i0.ViewContainerRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    FsDateAgoDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsDateAgoDirective, selector: "[fsDateAgo]", inputs: { date: "date", showTime: "showTime", format: "format" }, usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateAgoDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[fsDateAgo]'
                    }]
            }], ctorParameters: function () {
            return [{ type: FsDateAgoFactory }, { type: i0__namespace.Renderer2 }, { type: i0__namespace.ElementRef }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i0.ViewContainerRef]
                        }] }];
        }, propDecorators: { date: [{
                    type: i0.Input
                }], showTime: [{
                    type: i0.Input
                }], format: [{
                    type: i0.Input
                }] } });

    var FsDateModule = /** @class */ (function () {
        function FsDateModule() {
        }
        FsDateModule.forRoot = function () {
            return {
                ngModule: FsDateModule,
                providers: [
                    FsDateAgoFactory
                ]
            };
        };
        return FsDateModule;
    }());
    FsDateModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    FsDateModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateModule, declarations: [FsDatePipe,
            FsDateAgoPipe,
            FsDateDurationPipe,
            FsDateFormatPipe,
            FsDateRangePipe,
            FsDateAgoDirective,
            FsDateAgoComponent], imports: [common.CommonModule,
            i1.MatTooltipModule,
            common$1.FsCommonModule], exports: [FsDatePipe,
            FsDateAgoPipe,
            FsDateDurationPipe,
            FsDateFormatPipe,
            FsDateRangePipe,
            FsDateAgoDirective,
            FsDateAgoComponent] });
    FsDateModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateModule, providers: [], imports: [[
                common.CommonModule,
                i1.MatTooltipModule,
                common$1.FsCommonModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            common.CommonModule,
                            i1.MatTooltipModule,
                            common$1.FsCommonModule
                        ],
                        exports: [
                            FsDatePipe,
                            FsDateAgoPipe,
                            FsDateDurationPipe,
                            FsDateFormatPipe,
                            FsDateRangePipe,
                            FsDateAgoDirective,
                            FsDateAgoComponent
                        ],
                        entryComponents: [
                            FsDateAgoComponent
                        ],
                        declarations: [
                            FsDatePipe,
                            FsDateAgoPipe,
                            FsDateDurationPipe,
                            FsDateFormatPipe,
                            FsDateRangePipe,
                            FsDateAgoDirective,
                            FsDateAgoComponent
                        ],
                        providers: [],
                    }]
            }] });

    var TIMEZONES = [
        { name: 'A', value: '1' },
        { name: 'ACDT', value: '10:30' },
        { name: 'ACST', value: '9:30' },
        { name: 'ADT', value: '-3' },
        { name: 'ADT', value: '-3' },
        { name: 'AEDT', value: '11' },
        { name: 'AEST', value: '10' },
        { name: 'AFT', value: '4:30' },
        { name: 'AKDT', value: '-8' },
        { name: 'AKST', value: '-9' },
        { name: 'ALMT', value: '6' },
        { name: 'AMST', value: '5' },
        { name: 'AMST', value: '-3' },
        { name: 'AMT', value: '4' },
        { name: 'AMT', value: '-4' },
        { name: 'ANAST', value: '12' },
        { name: 'ANAT', value: '12' },
        { name: 'AQTT', value: '5' },
        { name: 'ART', value: '-3' },
        { name: 'AST', value: '3' },
        { name: 'AST', value: '-4' },
        { name: 'AWDT', value: '9' },
        { name: 'AWST', value: '8' },
        { name: 'AZOST', value: '0' },
        { name: 'AZOT', value: '-1' },
        { name: 'AZST', value: '5' },
        { name: 'AZT', value: '4' },
        { name: 'B', value: '2' },
        { name: 'BNT', value: '8' },
        { name: 'BOT', value: '-4' },
        { name: 'BRST', value: '-2' },
        { name: 'BRT', value: '-3' },
        { name: 'BST', value: '6' },
        { name: 'BST', value: '1' },
        { name: 'BTT', value: '6' },
        { name: 'C', value: '3' },
        { name: 'CAST', value: '8' },
        { name: 'CAT', value: '2' },
        { name: 'CCT', value: '6:30' },
        { name: 'CDT', value: '-4' },
        { name: 'CDT', value: '-5' },
        { name: 'CEST', value: '2' },
        { name: 'CET', value: '1' },
        { name: 'CHADT', value: '13:45' },
        { name: 'CHAST', value: '12:45' },
        { name: 'CKT', value: '-10' },
        { name: 'CLST', value: '-3' },
        { name: 'CLT', value: '-4' },
        { name: 'COT', value: '-5' },
        { name: 'CST', value: '8' },
        { name: 'CST', value: '-6' },
        { name: 'CST', value: '-5' },
        { name: 'CVT', value: '-1' },
        { name: 'CXT', value: '7' },
        { name: 'ChST', value: '10' },
        { name: 'D', value: '4' },
        { name: 'DAVT', value: '7' },
        { name: 'E', value: '5' },
        { name: 'EASST', value: '-5' },
        { name: 'EAST', value: '-6' },
        { name: 'EAT', value: '3' },
        { name: 'EAT', value: '3' },
        { name: 'ECT', value: '-5' },
        { name: 'EDT', value: '-4' },
        { name: 'EEST', value: '3' },
        { name: 'EET', value: '2' },
        { name: 'EGST', value: '0' },
        { name: 'EGT', value: '-1' },
        { name: 'EST', value: '-5' },
        { name: 'ET', value: '-5' },
        { name: 'F', value: '6' },
        { name: 'FJST', value: '13' },
        { name: 'FJT', value: '12' },
        { name: 'FKST', value: '-3' },
        { name: 'FKT', value: '-4' },
        { name: 'FNT', value: '-2' },
        { name: 'G', value: '7' },
        { name: 'GALT', value: '-6' },
        { name: 'GAMT', value: '-9' },
        { name: 'GET', value: '4' },
        { name: 'GFT', value: '-3' },
        { name: 'GILT', value: '12' },
        { name: 'GMT', value: '0' },
        { name: 'GST', value: '4' },
        { name: 'GYT', value: '-4' },
        { name: 'H', value: '8' },
        { name: 'HAA', value: '-3' },
        { name: 'HAC', value: '-5' },
        { name: 'HADT', value: '-9' },
        { name: 'HAE', value: '-4' },
        { name: 'HAP', value: '-7' },
        { name: 'HAR', value: '-6' },
        { name: 'HAST', value: '-10' },
        { name: 'HAT', value: '-2:30' },
        { name: 'HAY', value: '-8' },
        { name: 'HKT', value: '8' },
        { name: 'HLV', value: '-4:30' },
        { name: 'HNA', value: '-4' },
        { name: 'HNC', value: '-6' },
        { name: 'HNE', value: '-5' },
        { name: 'HNP', value: '-8' },
        { name: 'HNR', value: '-7' },
        { name: 'HNT', value: '-3:30' },
        { name: 'HNY', value: '-9' },
        { name: 'HOVT', value: '7' },
        { name: 'I', value: '9' },
        { name: 'ICT', value: '7' },
        { name: 'IDT', value: '3' },
        { name: 'IOT', value: '6' },
        { name: 'IRDT', value: '4:30' },
        { name: 'IRKST', value: '9' },
        { name: 'IRKT', value: '9' },
        { name: 'IRST', value: '3:30' },
        { name: 'IST', value: '2' },
        { name: 'IST', value: '5:30' },
        { name: 'IST', value: '1' },
        { name: 'JST', value: '9' },
        { name: 'K', value: '10' },
        { name: 'KGT', value: '6' },
        { name: 'KRAST', value: '8' },
        { name: 'KRAT', value: '8' },
        { name: 'KST', value: '9' },
        { name: 'KUYT', value: '4' },
        { name: 'L', value: '11' },
        { name: 'LHDT', value: '11' },
        { name: 'LHST', value: '10:30' },
        { name: 'LINT', value: '14' },
        { name: 'M', value: '12' },
        { name: 'MAGST', value: '12' },
        { name: 'MAGT', value: '12' },
        { name: 'MART', value: '-9:30' },
        { name: 'MAWT', value: '5' },
        { name: 'MDT', value: '-6' },
        { name: 'MESZ', value: '2' },
        { name: 'MEZ', value: '1' },
        { name: 'MHT', value: '12' },
        { name: 'MMT', value: '6:30' },
        { name: 'MSD', value: '4' },
        { name: 'MSK', value: '4' },
        { name: 'MST', value: '-7' },
        { name: 'MUT', value: '4' },
        { name: 'MVT', value: '5' },
        { name: 'MYT', value: '8' },
        { name: 'N', value: '-1' },
        { name: 'NCT', value: '11' },
        { name: 'NDT', value: '-2:30' },
        { name: 'NFT', value: '11:30' },
        { name: 'NOVST', value: '7' },
        { name: 'NOVT', value: '6' },
        { name: 'NPT', value: '5:45' },
        { name: 'NST', value: '-3:30' },
        { name: 'NUT', value: '-11' },
        { name: 'NZDT', value: '13' },
        { name: 'NZST', value: '12' },
        { name: 'O', value: '-2' },
        { name: 'OMSST', value: '7' },
        { name: 'OMST', value: '7' },
        { name: 'P', value: '-3' },
        { name: 'PDT', value: '-7' },
        { name: 'PET', value: '-5' },
        { name: 'PETST', value: '12' },
        { name: 'PETT', value: '12' },
        { name: 'PGT', value: '10' },
        { name: 'PHOT', value: '13' },
        { name: 'PHT', value: '8' },
        { name: 'PKT', value: '5' },
        { name: 'PMDT', value: '-2' },
        { name: 'PMST', value: '-3' },
        { name: 'PONT', value: '11' },
        { name: 'PST', value: '-8' },
        { name: 'PST', value: '-8' },
        { name: 'PT', value: '-8' },
        { name: 'PWT', value: '9' },
        { name: 'PYST', value: '-3' },
        { name: 'PYT', value: '-4' },
        { name: 'Q', value: '-4' },
        { name: 'R', value: '-5' },
        { name: 'RET', value: '4' },
        { name: 'S', value: '-6' },
        { name: 'SAMT', value: '4' },
        { name: 'SAST', value: '2' },
        { name: 'SBT', value: '11' },
        { name: 'SCT', value: '4' },
        { name: 'SGT', value: '8' },
        { name: 'SRT', value: '-3' },
        { name: 'SST', value: '-11' },
        { name: 'T', value: '-7' },
        { name: 'TAHT', value: '-10' },
        { name: 'TFT', value: '5' },
        { name: 'TJT', value: '5' },
        { name: 'TKT', value: '13' },
        { name: 'TLT', value: '9' },
        { name: 'TMT', value: '5' },
        { name: 'TVT', value: '12' },
        { name: 'U', value: '-8' },
        { name: 'ULAT', value: '8' },
        { name: 'UTC', value: '0' },
        { name: 'UYST', value: '-2' },
        { name: 'UYT', value: '-3' },
        { name: 'UZT', value: '5' },
        { name: 'V', value: '-9' },
        { name: 'VET', value: '-4:30' },
        { name: 'VLAST', value: '11' },
        { name: 'VLAT', value: '11' },
        { name: 'VUT', value: '11' },
        { name: 'W', value: '-10' },
        { name: 'WAST', value: '2' },
        { name: 'WAT', value: '1' },
        { name: 'WEST', value: '1' },
        { name: 'WESZ', value: '1' },
        { name: 'WET', value: '0' },
        { name: 'WEZ', value: '0' },
        { name: 'WFT', value: '12' },
        { name: 'WGST', value: '-2' },
        { name: 'WGT', value: '-3' },
        { name: 'WIB', value: '7' },
        { name: 'WIT', value: '9' },
        { name: 'WITA', value: '8' },
        { name: 'WST', value: '1' },
        { name: 'WST', value: '13' },
        { name: 'WT', value: '0' },
        { name: 'X', value: '-11' },
        { name: 'Y', value: '-12' },
        { name: 'YAKST', value: '10' },
        { name: 'YAKT', value: '10' },
        { name: 'YAPT', value: '10' },
        { name: 'YEKST', value: '6' },
        { name: 'YEKT', value: '6' },
        { name: 'Z', value: '0' },
    ];

    /*
     * Public API Surface of fs-menu
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.FsDateAgoComponent = FsDateAgoComponent;
    exports.FsDateAgoDirective = FsDateAgoDirective;
    exports.FsDateAgoFactory = FsDateAgoFactory;
    exports.FsDateAgoPipe = FsDateAgoPipe;
    exports.FsDateDurationPipe = FsDateDurationPipe;
    exports.FsDateFormatPipe = FsDateFormatPipe;
    exports.FsDateModule = FsDateModule;
    exports.FsDatePipe = FsDatePipe;
    exports.FsDateRangePipe = FsDateRangePipe;
    exports.SECONDS = SECONDS;
    exports.TIMEZONES = TIMEZONES;
    exports.ago = ago;
    exports.date = date;
    exports.duration = duration;
    exports.format = format;
    exports.getFormatString = getFormatString;
    exports.granularDuration = granularDuration;
    exports.iso8601 = iso8601;
    exports.parse = parse;
    exports.parseDuration = parseDuration;
    exports.parseLocal = parseLocal;
    exports.range = range;
    exports.simpleFormat = simpleFormat;
    exports.toUTC = toUTC;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=firestitch-date.umd.js.map
