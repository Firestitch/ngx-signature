import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Input, } from '@angular/core';
import { interval, Subject } from 'rxjs';
import { takeWhile, takeUntil } from 'rxjs/operators';
import { differenceInSeconds } from 'date-fns';
import { ago, duration as fsDuration, format as fsFormat, parse } from '../../../libs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/tooltip";
export class FsDateAgoComponent {
    constructor(elementRef, _cd) {
        this.elementRef = elementRef;
        this._cd = _cd;
        this.showTime = false;
        this.format = 'date';
        this.showTooltip = true;
        this.tooltipDateFormat = null;
        this.formattedDate = null;
        this.tooltip = null;
        this._period = 60;
        this._destroy$ = new Subject();
        this._date = null;
    }
    set date(value) {
        this._date = parse(value);
    }
    get date() {
        return this._date;
    }
    ngOnInit() {
        this._init();
    }
    ngOnChanges() {
        this._init();
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
    updateFormatted() {
        this.formattedDate = ago(this.date, this.format);
        if (this.showTooltip) {
            const tooltipFormat = this.getTooltipFormat();
            const tooltipAgo = this.getTooltipAgo();
            this.tooltip = fsFormat(this.date, tooltipFormat) + ' · ' + tooltipAgo;
        }
        this._cd.markForCheck();
    }
    /**
     * Setting format w/o year if year is the same
     */
    getTooltipFormat() {
        if (this.tooltipDateFormat) {
            return this.tooltipDateFormat;
        }
        let format = 'date-time';
        const todayYear = new Date().getFullYear();
        const dateYear = new Date(this.date).getFullYear();
        if (todayYear === dateYear) {
            format = 'date-time-yearless';
        }
        return format;
    }
    /**
     * Forming second part of the tooltip
     */
    getTooltipAgo() {
        let tooltip = 'now';
        if (!this.date) {
            return '';
        }
        const dateDifference = this._difference(this.date);
        const options = {
            maxOutputs: 1,
            suffix: true,
            years: true,
            months: true,
            days: true,
            hours: true,
            minutes: true
        };
        // if difference more than 1 minute
        if (dateDifference > 59 || dateDifference < 0) {
            tooltip = fsDuration(dateDifference, options);
        }
        return tooltip;
    }
    _init() {
        this.updateFormatted();
        if (this._updateWhile(this.date) && !this._timer$) {
            this._timerInit();
        }
    }
    _timerInit() {
        this._timer$ = interval(this._period * 1000)
            .pipe(takeWhile((v, index) => this._updateWhile(this.date)), takeUntil(this._destroy$));
        this._timer$
            .subscribe({
            next: () => {
                this.updateFormatted();
            },
            complete: () => {
                this._timer$ = null;
            },
        });
    }
    _difference(date) {
        return differenceInSeconds(new Date(), date);
    }
    _updateWhile(date) {
        return Math.abs(this._difference(date)) <= (86400 + this._period);
    }
}
FsDateAgoComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDateAgoComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
FsDateAgoComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDateAgoComponent, selector: "fs-date-ago", inputs: { date: "date", showTime: "showTime", format: "format", showTooltip: "showTooltip", tooltipDateFormat: "tooltipDateFormat" }, usesOnChanges: true, ngImport: i0, template: "<span [matTooltip]=\"tooltip\">{{ formattedDate }}</span>\n", directives: [{ type: i1.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDateAgoComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'fs-date-ago',
                    templateUrl: './date-ago.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { date: [{
                type: Input
            }], showTime: [{
                type: Input
            }], format: [{
                type: Input
            }], showTooltip: [{
                type: Input
            }], tooltipDateFormat: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,