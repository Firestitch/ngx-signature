import { isSameYear } from 'date-fns';
export function getFormatString(formatTo = 'date', date = null) {
    const formatParts = formatTo.split('-');
    const hasTime = formatParts.indexOf('time') != -1;
    const hasDate = formatParts.indexOf('date') != -1;
    const parts = [];
    if (hasDate || hasTime) {
        if (hasDate) {
            const hasYear = formatParts.indexOf('yearless') === -1;
            const hasYearDiff = formatParts.indexOf('yeardiff') !== -1;
            const sameYear = date && isSameYear(date, new Date());
            const showYear = hasYear &&
                !(hasYearDiff && sameYear);
            // day of week
            if (formatParts.indexOf('day') != -1) {
                parts.push(formatParts.indexOf('full') != -1 ? 'EEEE' : 'EEE');
            }
            // month
            parts.push(formatParts.indexOf('full') != -1 ? 'MMMM' : 'MMM');
            // day
            if (formatParts.indexOf('dayless') === -1) {
                let day = formatParts.indexOf('ordinal') != -1 ? 'do' : 'd';
                if (showYear) {
                    day += ',';
                }
                parts.push(day);
            }
            // year
            if (showYear) {
                parts.push('yyyy');
            }
        }
        if (hasTime) {
            parts.push(formatParts.indexOf('24') != -1 ? 'HH:mm' : 'h:mm aaa');
            // if (formatParts.indexOf('tz') != -1) {
            //   timeFormat += ' [' + moment.tz(date, moment.tz.guess()).format('z') + ']';
            // }
            if (formatParts.indexOf('tz') != -1 || formatParts.indexOf('gmt') != -1) {
                parts.push("'('OOOO')'");
            }
        }
    }
    else {
        parts.push(formatTo);
    }
    return parts.join(' ').trim();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWZvcm1hdC1zdHJpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGlicy9nZXQtZm9ybWF0LXN0cmluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXRDLE1BQU0sVUFBVSxlQUFlLENBQUMsUUFBUSxHQUFHLE1BQU0sRUFBRSxPQUFhLElBQUk7SUFFbEUsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUV4QyxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2xELE1BQU0sT0FBTyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDbEQsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBRWpCLElBQUksT0FBTyxJQUFJLE9BQU8sRUFBRTtRQUV0QixJQUFJLE9BQU8sRUFBRTtZQUNYLE1BQU0sT0FBTyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDdkQsTUFBTSxXQUFXLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUMzRCxNQUFNLFFBQVEsR0FBRyxJQUFJLElBQUksVUFBVSxDQUFDLElBQUksRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLENBQUM7WUFDdEQsTUFBTSxRQUFRLEdBQUcsT0FBTztnQkFDdEIsQ0FBQyxDQUFDLFdBQVcsSUFBSSxRQUFRLENBQUMsQ0FBQztZQUU3QixjQUFjO1lBQ2QsSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO2dCQUNwQyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDaEU7WUFFRCxRQUFRO1lBQ1IsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRS9ELE1BQU07WUFDTixJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7Z0JBRXpDLElBQUksR0FBRyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO2dCQUU1RCxJQUFJLFFBQVEsRUFBRTtvQkFDWixHQUFHLElBQUksR0FBRyxDQUFDO2lCQUNaO2dCQUVELEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDakI7WUFFRCxPQUFPO1lBQ1AsSUFBSSxRQUFRLEVBQUU7Z0JBQ1osS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUNwQjtTQUNGO1FBR0QsSUFBSSxPQUFPLEVBQUU7WUFDWCxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUM7WUFFbkUseUNBQXlDO1lBQ3pDLCtFQUErRTtZQUMvRSxJQUFJO1lBRUosSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUU7Z0JBQ3ZFLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDMUI7U0FDRjtLQUVGO1NBQU07UUFFTCxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3RCO0lBQ0MsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ2xDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1NhbWVZZWFyIH0gZnJvbSAnZGF0ZS1mbnMnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Rm9ybWF0U3RyaW5nKGZvcm1hdFRvID0gJ2RhdGUnLCBkYXRlOiBEYXRlID0gbnVsbCkge1xuXG4gIGNvbnN0IGZvcm1hdFBhcnRzID0gZm9ybWF0VG8uc3BsaXQoJy0nKTtcblxuICBjb25zdCBoYXNUaW1lID0gZm9ybWF0UGFydHMuaW5kZXhPZigndGltZScpICE9IC0xO1xuICBjb25zdCBoYXNEYXRlID0gZm9ybWF0UGFydHMuaW5kZXhPZignZGF0ZScpICE9IC0xO1xuICBjb25zdCBwYXJ0cyA9IFtdO1xuXG4gIGlmIChoYXNEYXRlIHx8IGhhc1RpbWUpIHtcblxuICAgIGlmIChoYXNEYXRlKSB7XG4gICAgICBjb25zdCBoYXNZZWFyID0gZm9ybWF0UGFydHMuaW5kZXhPZigneWVhcmxlc3MnKSA9PT0gLTE7XG4gICAgICBjb25zdCBoYXNZZWFyRGlmZiA9IGZvcm1hdFBhcnRzLmluZGV4T2YoJ3llYXJkaWZmJykgIT09IC0xO1xuICAgICAgY29uc3Qgc2FtZVllYXIgPSBkYXRlICYmIGlzU2FtZVllYXIoZGF0ZSwgbmV3IERhdGUoKSk7XG4gICAgICBjb25zdCBzaG93WWVhciA9IGhhc1llYXIgJiZcbiAgICAgICAgIShoYXNZZWFyRGlmZiAmJiBzYW1lWWVhcik7XG5cbiAgICAgIC8vIGRheSBvZiB3ZWVrXG4gICAgICBpZiAoZm9ybWF0UGFydHMuaW5kZXhPZignZGF5JykgIT0gLTEpIHtcbiAgICAgICAgcGFydHMucHVzaChmb3JtYXRQYXJ0cy5pbmRleE9mKCdmdWxsJykgIT0gLTEgPyAnRUVFRScgOiAnRUVFJyk7XG4gICAgICB9XG5cbiAgICAgIC8vIG1vbnRoXG4gICAgICBwYXJ0cy5wdXNoKGZvcm1hdFBhcnRzLmluZGV4T2YoJ2Z1bGwnKSAhPSAtMSA/ICdNTU1NJyA6ICdNTU0nKTtcblxuICAgICAgLy8gZGF5XG4gICAgICBpZiAoZm9ybWF0UGFydHMuaW5kZXhPZignZGF5bGVzcycpID09PSAtMSkge1xuXG4gICAgICAgIGxldCBkYXkgPSBmb3JtYXRQYXJ0cy5pbmRleE9mKCdvcmRpbmFsJykgIT0gLTEgPyAnZG8nIDogJ2QnO1xuXG4gICAgICAgIGlmIChzaG93WWVhcikge1xuICAgICAgICAgIGRheSArPSAnLCc7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJ0cy5wdXNoKGRheSk7XG4gICAgICB9XG5cbiAgICAgIC8vIHllYXJcbiAgICAgIGlmIChzaG93WWVhcikge1xuICAgICAgICBwYXJ0cy5wdXNoKCd5eXl5Jyk7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICBpZiAoaGFzVGltZSkge1xuICAgICAgcGFydHMucHVzaChmb3JtYXRQYXJ0cy5pbmRleE9mKCcyNCcpICE9IC0xID8gJ0hIOm1tJyA6ICdoOm1tIGFhYScpO1xuXG4gICAgICAvLyBpZiAoZm9ybWF0UGFydHMuaW5kZXhPZigndHonKSAhPSAtMSkge1xuICAgICAgLy8gICB0aW1lRm9ybWF0ICs9ICcgWycgKyBtb21lbnQudHooZGF0ZSwgbW9tZW50LnR6Lmd1ZXNzKCkpLmZvcm1hdCgneicpICsgJ10nO1xuICAgICAgLy8gfVxuXG4gICAgICBpZiAoZm9ybWF0UGFydHMuaW5kZXhPZigndHonKSAhPSAtMSB8fCBmb3JtYXRQYXJ0cy5pbmRleE9mKCdnbXQnKSAhPSAtMSkge1xuICAgICAgICBwYXJ0cy5wdXNoKFwiJygnT09PTycpJ1wiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgfSBlbHNlIHtcblxuICAgIHBhcnRzLnB1c2goZm9ybWF0VG8pO1xuICB9XG4gICAgcmV0dXJuIHBhcnRzLmpvaW4oJyAnKS50cmltKCk7XG59XG4iXX0=