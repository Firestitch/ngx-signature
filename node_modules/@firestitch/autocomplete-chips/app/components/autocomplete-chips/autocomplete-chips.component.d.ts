import { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, TemplateRef, QueryList } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { MatAutocompleteSelectedEvent, MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { CdkDragDrop } from '@angular/cdk/drag-drop';
import { IAutocompleteItem } from '../../interfaces/autocomplete-item.interface';
import { DataType } from '../../interfaces/data-type';
import { FsAutocompleteObjectDirective } from '../../directives/autocomplete-object/autocomplete-object.directive';
import { FsAutocompleteChipsNoResultsDirective } from '../../directives/autocomplete-no-results/autocomplete-no-results.directive';
import { FsAutocompleteChipsStaticDirective } from './../../directives/static-template/static-template.directive';
import { FsAutocompleteChipSuffixDirective } from './../../directives/chip-suffix/chip-suffix.directive';
import { FsAutocompleteChipsSuffixDirective } from './../../directives/chips-suffix/chips-suffix.directive';
import * as i0 from "@angular/core";
export declare class FsAutocompleteChipsComponent implements OnInit, OnDestroy, ControlValueAccessor {
    private _cdRef;
    fetch: any;
    readonly: boolean;
    size: 'large' | 'small';
    placeholder: string;
    chipImage: string;
    chipBackground: string;
    chipColor: string;
    chipIcon: string;
    chipIconColor: string;
    chipClass: string;
    hint: string;
    allowText: boolean;
    allowObject: boolean;
    delay: number;
    validateText: (text: string) => boolean;
    invalidTextMessage: string;
    removable: boolean;
    allowClear: boolean;
    color: string;
    background: string;
    orderable: boolean;
    limit: number;
    initOnClick: boolean;
    fetchOnFocus: boolean;
    multiple: boolean;
    set panelClass(value: any);
    compareWith: (o1: any, o2: any) => any;
    set setDisabled(value: any);
    panelWidth: string | number;
    selected: EventEmitter<any>;
    removed: EventEmitter<any>;
    reordered: EventEmitter<any>;
    clearEvent: EventEmitter<any>;
    formWrapper: boolean;
    dragStart(e: any): void;
    input: ElementRef;
    dummyInput: ElementRef;
    autocompleteTriggers: QueryList<MatAutocompleteTrigger>;
    autocompleteTrigger: any;
    formField: ElementRef;
    objectTemplate: TemplateRef<FsAutocompleteObjectDirective>;
    chipSuffixTemplate: TemplateRef<FsAutocompleteChipSuffixDirective>;
    chipsSuffixTemplate: TemplateRef<FsAutocompleteChipsSuffixDirective>;
    noResultsTemplate: TemplateRef<FsAutocompleteChipsNoResultsDirective>;
    staticTemplates: TemplateRef<FsAutocompleteChipsStaticDirective>[];
    staticDirectives: QueryList<FsAutocompleteChipsStaticDirective>;
    data: IAutocompleteItem[];
    textData: Partial<IAutocompleteItem>;
    disabled: boolean;
    dataType: typeof DataType;
    keyword: string;
    noResults: boolean;
    name: string;
    _model: any[];
    inited: boolean;
    panelClasses: string;
    get model(): any[];
    get inputEl(): any;
    private _keyword$;
    private _fetch$;
    private _destroy$;
    private _onTouched;
    private _onChange;
    registerOnChange(fn: (value: any) => any): void;
    registerOnTouched(fn: () => any): void;
    constructor(_cdRef: ChangeDetectorRef);
    ngOnInit(): void;
    init(options?: {
        focus: boolean;
    }): void;
    drop(event: CdkDragDrop<{
        index: number;
    }>): void;
    selectAll(): void;
    inputed(event: any): void;
    keyDown(event: KeyboardEvent): void;
    chipClick(event: MouseEvent): void;
    chipKeyDown(event: KeyboardEvent, index: any): void;
    chipRemoved(event: UIEvent, item: any): void;
    focus(options?: {
        delay: number;
    }): void;
    unfocus(): void;
    clearClick(event: KeyboardEvent): void;
    clear(closePanel?: boolean): void;
    closePanel(): void;
    closed(): void;
    focused(e: any): void;
    optionClick(event: UIEvent, value: any, refocus?: boolean): void;
    optionSelected(event: MatAutocompleteSelectedEvent): void;
    writeValue(value: any): void;
    staticClick(event: KeyboardEvent, index: any): void;
    ngOnDestroy(): void;
    private _clearData;
    private _clearInput;
    private _select;
    private _createTextItem;
    private _createObjectItem;
    private _validateText;
    private _updateModel;
    private _addObject;
    private _addText;
    private _close;
    private _fetch;
    private _listenKeywordChange;
    private _listenFetch;
    private _doFetchByKeyword;
    static ɵfac: i0.ɵɵFactoryDeclaration<FsAutocompleteChipsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<FsAutocompleteChipsComponent, "fs-autocomplete-chips", never, { "fetch": "fetch"; "readonly": "readonly"; "size": "size"; "placeholder": "placeholder"; "chipImage": "chipImage"; "chipBackground": "chipBackground"; "chipColor": "chipColor"; "chipIcon": "chipIcon"; "chipIconColor": "chipIconColor"; "chipClass": "chipClass"; "hint": "hint"; "allowText": "allowText"; "allowObject": "allowObject"; "delay": "delay"; "validateText": "validateText"; "invalidTextMessage": "invalidTextMessage"; "removable": "removable"; "allowClear": "allowClear"; "color": "color"; "background": "background"; "orderable": "orderable"; "limit": "limit"; "initOnClick": "initOnClick"; "fetchOnFocus": "fetchOnFocus"; "multiple": "multiple"; "panelClass": "panelClass"; "compareWith": "compareWith"; "setDisabled": "disabled"; "panelWidth": "panelWidth"; }, { "selected": "selected"; "removed": "removed"; "reordered": "reordered"; "clearEvent": "clear"; }, ["objectTemplate", "chipSuffixTemplate", "chipsSuffixTemplate", "noResultsTemplate", "staticTemplates", "staticDirectives"], never>;
}
