(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('@angular/material/dialog'), require('@angular/material/button'), require('@firestitch/dialog'), require('@angular/platform-browser'), require('@firestitch/autocomplete'), require('@firestitch/autocomplete-chips'), require('@angular/material/form-field'), require('@angular/material/select'), require('rxjs'), require('@angular/material/core'), require('@angular/material/input'), require('@firestitch/datepicker'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@firestitch/prompt', ['exports', '@angular/core', '@angular/common', '@angular/forms', '@angular/material/dialog', '@angular/material/button', '@firestitch/dialog', '@angular/platform-browser', '@firestitch/autocomplete', '@firestitch/autocomplete-chips', '@angular/material/form-field', '@angular/material/select', 'rxjs', '@angular/material/core', '@angular/material/input', '@firestitch/datepicker', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.firestitch = global.firestitch || {}, global.firestitch.prompt = {}), global.ng.core, global.ng.common, global.ng.forms, global.ng.material.dialog, global.ng.material.button, global.i2$1, global.ng.platformBrowser, global.i3, global.i3$1, global.ng.material.formField, global.ng.material.select, global.rxjs, global.ng.material.core, global.ng.material.input, global.i4$2, global.rxjs.operators));
})(this, (function (exports, i0, i6, i5, i1, i4, i2$1, i2, i3, i3$1, i3$2, i4$1, rxjs, i5$1, i7, i4$2, operators) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3$1);
    var i3__namespace$2 = /*#__PURE__*/_interopNamespace(i3$2);
    var i4__namespace$1 = /*#__PURE__*/_interopNamespace(i4$1);
    var i5__namespace$1 = /*#__PURE__*/_interopNamespace(i5$1);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var i4__namespace$2 = /*#__PURE__*/_interopNamespace(i4$2);

    var FsPromptConfirmComponent = /** @class */ (function () {
        function FsPromptConfirmComponent(dialogRef, sanitizer, data) {
            this.dialogRef = dialogRef;
            this.sanitizer = sanitizer;
            this.data = data;
            this.template = this.sanitizer.bypassSecurityTrustHtml(data.template);
        }
        FsPromptConfirmComponent.prototype.close = function (button) {
            var value = button.cancel ? undefined : button.value || true;
            this.dialogRef.close(value);
        };
        return FsPromptConfirmComponent;
    }());
    FsPromptConfirmComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptConfirmComponent, deps: [{ token: i1__namespace.MatDialogRef }, { token: i2__namespace.DomSanitizer }, { token: i1.MAT_DIALOG_DATA }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FsPromptConfirmComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsPromptConfirmComponent, selector: "ng-component", ngImport: i0__namespace, template: "<fs-dialog mobileMode=\"float\">\n  <h2 mat-dialog-title>{{data.title}}</h2>\n  <mat-dialog-content>\n    <span [innerHtml]=\"template\"></span>\n  </mat-dialog-content>\n\n  <mat-dialog-actions>\n    <button mat-button\n            (click)=\"close(button)\"\n            type=\"button\"\n            [color]=\"button.color\"\n            [ngClass]=\"button.class\"\n            *ngFor=\"let button of data.buttons\">{{button.label}}</button>\n  </mat-dialog-actions>\n</fs-dialog>\n", styles: [".mat-form-field{display:block}.dialog-title{margin:0 0 20px;display:block}.mat-dialog-content{outline:none}\n"], components: [{ type: i2__namespace$1.FsDialogComponent, selector: "fs-dialog", inputs: ["mobileMode"] }, { type: i4__namespace.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], directives: [{ type: i1__namespace.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i1__namespace.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i1__namespace.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]" }, { type: i6__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i6__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptConfirmComponent, decorators: [{
                type: i0.Component,
                args: [{
                        templateUrl: './prompt-confirm.component.html',
                        styleUrls: ['../../prompt.css'],
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.MatDialogRef }, { type: i2__namespace.DomSanitizer }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1.MAT_DIALOG_DATA]
                        }] }];
        } });

    var FsPromptConfirmModule = /** @class */ (function () {
        function FsPromptConfirmModule() {
        }
        return FsPromptConfirmModule;
    }());
    FsPromptConfirmModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptConfirmModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    FsPromptConfirmModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptConfirmModule, declarations: [FsPromptConfirmComponent], imports: [
            // Angular
            i6.CommonModule,
            i5.FormsModule,
            // Material
            i1.MatDialogModule,
            i4.MatButtonModule,
            i2$1.FsDialogModule
        ] });
    FsPromptConfirmModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptConfirmModule, imports: [[
                // Angular
                i6.CommonModule,
                i5.FormsModule,
                // Material
                i1.MatDialogModule,
                i4.MatButtonModule,
                i2$1.FsDialogModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptConfirmModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            // Angular
                            i6.CommonModule,
                            i5.FormsModule,
                            // Material
                            i1.MatDialogModule,
                            i4.MatButtonModule,
                            i2$1.FsDialogModule
                        ],
                        entryComponents: [
                            FsPromptConfirmComponent,
                        ],
                        declarations: [
                            FsPromptConfirmComponent,
                        ],
                    }]
            }] });

    // THIS MODULE ONLY FOR BACKWARD COMPATIBILITY
    var FsPromptModule = /** @class */ (function () {
        function FsPromptModule() {
        }
        FsPromptModule.forRoot = function () {
            return {
                ngModule: FsPromptModule,
                providers: []
            };
        };
        return FsPromptModule;
    }());
    FsPromptModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    FsPromptModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptModule, imports: [FsPromptConfirmModule], exports: [FsPromptConfirmModule] });
    FsPromptModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptModule, imports: [[
                FsPromptConfirmModule,
            ], FsPromptConfirmModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            FsPromptConfirmModule,
                        ],
                        exports: [
                            FsPromptConfirmModule,
                        ],
                    }]
            }] });

    var FsPromptAutocompleteComponent = /** @class */ (function () {
        function FsPromptAutocompleteComponent(dialogRef, data) {
            var _this = this;
            this.dialogRef = dialogRef;
            this.data = data;
            this.inputControl = new i5.FormControl('', []);
            this.loading = false;
            this.items = [];
            this.error = false;
            this.config = {
                fetchOnFocus: true,
            };
            this.fetch = function (name) {
                return _this.data.values(name);
            };
            this.config = Object.assign(Object.assign({}, this.config), data.config);
        }
        FsPromptAutocompleteComponent.prototype.modelChange = function (result) {
            if (result) {
                this.dialogRef.close(result.value);
            }
        };
        FsPromptAutocompleteComponent.prototype.displayWith = function (value) {
            return value ? value.name : undefined;
        };
        return FsPromptAutocompleteComponent;
    }());
    FsPromptAutocompleteComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptAutocompleteComponent, deps: [{ token: i1__namespace.MatDialogRef }, { token: i1.MAT_DIALOG_DATA }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FsPromptAutocompleteComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsPromptAutocompleteComponent, selector: "fs-prompt-autocomplete", ngImport: i0__namespace, template: "<fs-dialog mobileMode=\"float\">\n  <h2 mat-dialog-title>{{data.title}}</h2>\n  <mat-dialog-content tabindex=\"-1\">\n    {{data.template}}\n    <fs-autocomplete\n        [fetch]=\"fetch\"\n        [fetchOnFocus]=\"config.fetchOnFocus\"\n        [displayWith]=\"displayWith\"\n        [(ngModel)]=\"result\"\n        [placeholder]=\"data.label\"\n        (ngModelChange)=\"modelChange($event)\"\n        [required]=\"true\"\n        name=\"result\">\n      <ng-template fsAutocompleteTemplate let-data=\"data\">\n        {{ data.name }}\n      </ng-template>\n    </fs-autocomplete>\n  </mat-dialog-content>\n\n  <mat-dialog-actions>\n    <button mat-button [mat-dialog-close]=\"undefined\" type=\"button\" *ngIf=\"data.cancelShow\">{{data.cancelLabel}}</button>\n  </mat-dialog-actions>\n</fs-dialog>\n", styles: [".mat-form-field{display:block}.dialog-title{margin:0 0 20px;display:block}.mat-dialog-content{outline:none}\n", ":host ::ng-deep .mat-form-field{width:100%}.mat-dialog-content{outline:none}\n"], components: [{ type: i2__namespace$1.FsDialogComponent, selector: "fs-dialog", inputs: ["mobileMode"] }, { type: i3__namespace.FsAutocompleteComponent, selector: "fs-autocomplete", inputs: ["fetch", "placeholder", "displayWith", "fetchOnFocus", "readonly", "required", "disabled", "hint", "panelWidth", "panelClass", "showClear"], outputs: ["cleared"] }, { type: i4__namespace.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], directives: [{ type: i1__namespace.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i1__namespace.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i5__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5__namespace.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i5__namespace.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i3__namespace.FsAutocompleteTemplateDirective, selector: "[fsAutocompleteTemplate]" }, { type: i1__namespace.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]" }, { type: i6__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["type", "mat-dialog-close", "aria-label", "matDialogClose"], exportAs: ["matDialogClose"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptAutocompleteComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'fs-prompt-autocomplete',
                        templateUrl: 'prompt-autocomplete.component.html',
                        styleUrls: ['../../prompt.css', 'prompt-autocomplete.component.scss'],
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.MatDialogRef }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1.MAT_DIALOG_DATA]
                        }] }];
        } });

    var FsPromptAutocompleteModule = /** @class */ (function () {
        function FsPromptAutocompleteModule() {
        }
        return FsPromptAutocompleteModule;
    }());
    FsPromptAutocompleteModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptAutocompleteModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    FsPromptAutocompleteModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptAutocompleteModule, declarations: [FsPromptAutocompleteComponent], imports: [
            // Angular
            i6.CommonModule,
            i5.FormsModule,
            // Material
            i1.MatDialogModule,
            i4.MatButtonModule,
            // Firestitch
            i3.FsAutocompleteModule,
            i2$1.FsDialogModule
        ] });
    FsPromptAutocompleteModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptAutocompleteModule, imports: [[
                // Angular
                i6.CommonModule,
                i5.FormsModule,
                // Material
                i1.MatDialogModule,
                i4.MatButtonModule,
                // Firestitch
                i3.FsAutocompleteModule,
                i2$1.FsDialogModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptAutocompleteModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            // Angular
                            i6.CommonModule,
                            i5.FormsModule,
                            // Material
                            i1.MatDialogModule,
                            i4.MatButtonModule,
                            // Firestitch
                            i3.FsAutocompleteModule,
                            i2$1.FsDialogModule
                        ],
                        entryComponents: [
                            FsPromptAutocompleteComponent,
                        ],
                        declarations: [
                            FsPromptAutocompleteComponent,
                        ],
                    }]
            }] });

    var FsPromptAutocompleteChipsComponent = /** @class */ (function () {
        function FsPromptAutocompleteChipsComponent(_dialogRef, data) {
            var _this = this;
            this._dialogRef = _dialogRef;
            this.data = data;
            this.config = {
                default: [],
            };
            this.promptInputForm = new i5.FormGroup({
                input: new i5.FormControl(''),
            });
            this.fetch = function (name) {
                return _this.data.values(name);
            };
            this.validateText = function (name) {
                return !_this.config.allowText || _this.config.validateText(name);
            };
            this.config = Object.assign(Object.assign({}, this.config), data.config);
            this.model = this.config.default;
        }
        FsPromptAutocompleteChipsComponent.prototype.complete = function () {
            var _this = this;
            var model = this.model
                .map(function (item) {
                return _this.config.allowText ? item : item.value;
            });
            this._dialogRef.close(model);
        };
        return FsPromptAutocompleteChipsComponent;
    }());
    FsPromptAutocompleteChipsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptAutocompleteChipsComponent, deps: [{ token: i1__namespace.MatDialogRef }, { token: i1.MAT_DIALOG_DATA }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FsPromptAutocompleteChipsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsPromptAutocompleteChipsComponent, selector: "fs-prompt-autocomplete-chips", viewQueries: [{ propertyName: "autocomplete", first: true, predicate: ["autocomplete"], descendants: true }], ngImport: i0__namespace, template: "<fs-dialog mobileMode=\"float\">\n  <h2 mat-dialog-title>{{data.title}}</h2>\n  <mat-dialog-content tabindex=\"-1\">\n    {{data.template}}\n    <fs-autocomplete-chips\n        #autocomplete\n        [fetch]=\"fetch\"\n        [placeholder]=\"config.label\"\n        [fetchOnFocus]=\"true\"\n        [(ngModel)]=\"model\"\n        [allowText]=\"config.allowText\"\n        [allowObject]=\"!config.allowText\"\n        [validateText]=\"validateText\"\n        [required]=\"true\"\n        [multiple]=\"true\"\n        name=\"model\">\n      <ng-template fsAutocompleteChipsTemplate let-object=\"object\">\n        {{ object.name }}\n    </ng-template>\n  </fs-autocomplete-chips>\n  </mat-dialog-content>\n  <mat-dialog-actions>\n    <button mat-button\n        type=\"submit\"\n        [disabled]=\"!model.length\"\n        (click)=\"complete()\"\n        color=\"primary\">\n      {{data.commitLabel}}\n    </button>    \n    <button mat-button [mat-dialog-close]=\"undefined\" type=\"button\" *ngIf=\"data.cancelShow\">{{data.cancelLabel}}</button>\n  </mat-dialog-actions>\n</fs-dialog>", styles: [".mat-form-field{display:block}.dialog-title{margin:0 0 20px;display:block}.mat-dialog-content{outline:none}\n", ":host ::ng-deep .mat-form-field{width:100%}.mat-dialog-content{outline:none}\n"], components: [{ type: i2__namespace$1.FsDialogComponent, selector: "fs-dialog", inputs: ["mobileMode"] }, { type: i3__namespace$1.FsAutocompleteChipsComponent, selector: "fs-autocomplete-chips", inputs: ["fetch", "readonly", "size", "placeholder", "chipImage", "allowObject", "delay", "invalidTextMessage", "removable", "allowClear", "color", "background", "orderable", "limit", "initOnClick", "fetchOnFocus", "multiple", "compareWith", "panelWidth", "panelClass", "disabled", "chipBackground", "chipColor", "chipIcon", "chipIconColor", "chipClass", "hint", "allowText", "validateText"], outputs: ["selected", "removed", "reordered", "clear"] }, { type: i4__namespace.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], directives: [{ type: i1__namespace.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i1__namespace.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i5__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5__namespace.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i5__namespace.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i3__namespace$1.FsAutocompleteObjectDirective, selector: "[fsAutocompleteObject],[fsAutocompleteChipsTemplate]" }, { type: i1__namespace.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]" }, { type: i6__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["type", "mat-dialog-close", "aria-label", "matDialogClose"], exportAs: ["matDialogClose"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptAutocompleteChipsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'fs-prompt-autocomplete-chips',
                        templateUrl: 'prompt-autocomplete-chips.component.html',
                        styleUrls: ['../../prompt.css', 'prompt-autocomplete-chips.component.scss'],
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.MatDialogRef }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1.MAT_DIALOG_DATA]
                        }] }];
        }, propDecorators: { autocomplete: [{
                    type: i0.ViewChild,
                    args: ['autocomplete']
                }] } });

    var FsPromptAutocompleteChipsModule = /** @class */ (function () {
        function FsPromptAutocompleteChipsModule() {
        }
        return FsPromptAutocompleteChipsModule;
    }());
    FsPromptAutocompleteChipsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptAutocompleteChipsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    FsPromptAutocompleteChipsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptAutocompleteChipsModule, declarations: [FsPromptAutocompleteChipsComponent], imports: [i6.CommonModule,
            i5.FormsModule,
            i1.MatDialogModule,
            i4.MatButtonModule,
            i3$1.FsAutocompleteChipsModule,
            i2$1.FsDialogModule] });
    FsPromptAutocompleteChipsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptAutocompleteChipsModule, imports: [[
                i6.CommonModule,
                i5.FormsModule,
                i1.MatDialogModule,
                i4.MatButtonModule,
                i3$1.FsAutocompleteChipsModule,
                i2$1.FsDialogModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptAutocompleteChipsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i6.CommonModule,
                            i5.FormsModule,
                            i1.MatDialogModule,
                            i4.MatButtonModule,
                            i3$1.FsAutocompleteChipsModule,
                            i2$1.FsDialogModule
                        ],
                        entryComponents: [
                            FsPromptAutocompleteChipsComponent,
                        ],
                        declarations: [
                            FsPromptAutocompleteChipsComponent,
                        ],
                    }]
            }] });

    var PromptType;
    (function (PromptType) {
        PromptType["confirm"] = "confirm";
        PromptType["input"] = "input";
        PromptType["select"] = "select";
        PromptType["autocomplete"] = "autocomplete";
        PromptType["autocompleteChips"] = "autocompleteChips";
        PromptType["date"] = "date";
        PromptType["dateTime"] = "datetime";
    })(PromptType || (PromptType = {}));
    var ConverterType;
    (function (ConverterType) {
        ConverterType[ConverterType["observable"] = 0] = "observable";
        ConverterType[ConverterType["promise"] = 1] = "promise";
        ConverterType[ConverterType["array"] = 2] = "array";
    })(ConverterType || (ConverterType = {}));

    function valuesConverter(values) {
        if (typeof values === 'function') {
            values = values();
        }
        if (values instanceof rxjs.Observable) { // check if it Observable
            return {
                type: ConverterType.observable,
                values: values
            };
        }
        else if (!!values && (typeof values === 'object' || typeof values === 'function')
            && typeof values.then === 'function') {
            return {
                type: ConverterType.promise,
                values: values
            };
        }
        else if (Array.isArray(values)) { // check if it Array
            return {
                type: ConverterType.array,
                values: values
            };
        }
        // if we can't detect type
        return {
            type: ConverterType.array,
            values: []
        };
    }

    var FsPromptSelectComponent = /** @class */ (function () {
        function FsPromptSelectComponent(dialogRef, data, _cdRef) {
            this.dialogRef = dialogRef;
            this.data = data;
            this._cdRef = _cdRef;
            this.loading = false;
            this.items = [];
            this.error = false;
        }
        FsPromptSelectComponent.prototype.ngOnInit = function () {
            this.loadItems();
        };
        FsPromptSelectComponent.prototype.modelChange = function (e) {
            this.dialogRef.close(this.result);
        };
        FsPromptSelectComponent.prototype.loadItems = function () {
            var _this = this;
            var result = valuesConverter(this.data.values);
            switch (result.type) {
                case ConverterType.observable:
                    {
                        this.loading = true;
                        result.values
                            .subscribe(function (response) {
                            _this.items = response;
                            _this.loading = false;
                            _this._cdRef.markForCheck();
                        }, function () {
                            _this.error = true;
                            _this.loading = false;
                            _this._cdRef.markForCheck();
                        });
                    }
                    break;
                case ConverterType.promise:
                    {
                        this.loading = true;
                        result.values.then(function (response) {
                            _this.items = response;
                            _this.loading = false;
                            _this._cdRef.markForCheck();
                        }, function () {
                            _this.error = true;
                            _this.loading = false;
                            _this._cdRef.markForCheck();
                        });
                    }
                    break;
                case ConverterType.array:
                    {
                        this.items = this.data.values;
                        this._cdRef.markForCheck();
                    }
                    break;
                default: {
                    this.error = true;
                    this._cdRef.markForCheck();
                }
            }
        };
        return FsPromptSelectComponent;
    }());
    FsPromptSelectComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptSelectComponent, deps: [{ token: i1__namespace.MatDialogRef }, { token: i1.MAT_DIALOG_DATA }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FsPromptSelectComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsPromptSelectComponent, selector: "ng-component", ngImport: i0__namespace, template: "<fs-dialog mobileMode=\"float\">\n  <h2 mat-dialog-title>{{data.title}}</h2>\n  <mat-dialog-content tabindex=\"-1\">\n    {{data.template}}\n    <mat-form-field *ngIf=\"!loading && !error\">\n      <mat-select\n        [placeholder]=\"data.label\"\n        [(ngModel)]=\"result\" name=\"select\"\n        (ngModelChange)=\"modelChange($event)\">\n        <mat-option *ngFor=\"let item of items\" [value]=\"item.value\">\n          {{ item.name }}\n        </mat-option>\n      </mat-select>\n      <mat-hint>{{data.hint}}</mat-hint>\n    </mat-form-field>\n    <ng-container *ngIf=\"loading\">Please wait...</ng-container>\n    <ng-container *ngIf=\"error\">Something went wrong. Please, try again</ng-container>\n  </mat-dialog-content>\n\n  <mat-dialog-actions>\n    <button mat-button [mat-dialog-close]=\"undefined\" type=\"button\" >{{data.cancelLabel}}</button>\n  </mat-dialog-actions>\n</fs-dialog>\n", styles: [".mat-form-field{display:block}.dialog-title{margin:0 0 20px;display:block}.mat-dialog-content{outline:none}\n"], components: [{ type: i2__namespace$1.FsDialogComponent, selector: "fs-dialog", inputs: ["mobileMode"] }, { type: i3__namespace$2.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace$1.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i5__namespace$1.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i4__namespace.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], directives: [{ type: i1__namespace.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i1__namespace.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i6__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5__namespace.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i6__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace$2.MatHint, selector: "mat-hint", inputs: ["align", "id"] }, { type: i1__namespace.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]" }, { type: i1__namespace.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["type", "mat-dialog-close", "aria-label", "matDialogClose"], exportAs: ["matDialogClose"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptSelectComponent, decorators: [{
                type: i0.Component,
                args: [{
                        templateUrl: 'prompt-select.component.html',
                        styleUrls: ['../../prompt.css'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.MatDialogRef }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1.MAT_DIALOG_DATA]
                        }] }, { type: i0__namespace.ChangeDetectorRef }];
        } });

    var FsPromptSelectModule = /** @class */ (function () {
        function FsPromptSelectModule() {
        }
        return FsPromptSelectModule;
    }());
    FsPromptSelectModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptSelectModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    FsPromptSelectModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptSelectModule, declarations: [FsPromptSelectComponent], imports: [
            // Angular
            i6.CommonModule,
            i5.FormsModule,
            // Material
            i1.MatDialogModule,
            i4.MatButtonModule,
            i3$2.MatFormFieldModule,
            i4$1.MatSelectModule,
            i2$1.FsDialogModule
        ] });
    FsPromptSelectModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptSelectModule, imports: [[
                // Angular
                i6.CommonModule,
                i5.FormsModule,
                // Material
                i1.MatDialogModule,
                i4.MatButtonModule,
                i3$2.MatFormFieldModule,
                i4$1.MatSelectModule,
                i2$1.FsDialogModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptSelectModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            // Angular
                            i6.CommonModule,
                            i5.FormsModule,
                            // Material
                            i1.MatDialogModule,
                            i4.MatButtonModule,
                            i3$2.MatFormFieldModule,
                            i4$1.MatSelectModule,
                            i2$1.FsDialogModule
                        ],
                        entryComponents: [
                            FsPromptSelectComponent,
                        ],
                        declarations: [
                            FsPromptSelectComponent,
                        ],
                    }]
            }] });

    var FsPromptInputComponent = /** @class */ (function () {
        function FsPromptInputComponent(data, _dialogRef) {
            this.data = data;
            this._dialogRef = _dialogRef;
            this.promptInputForm = new i5.FormGroup({
                input: new i5.FormControl(''),
            });
        }
        Object.defineProperty(FsPromptInputComponent.prototype, "inputControl", {
            get: function () {
                return this.promptInputForm.get('input');
            },
            enumerable: false,
            configurable: true
        });
        FsPromptInputComponent.prototype.ngOnInit = function () {
            this._init();
        };
        FsPromptInputComponent.prototype.complete = function () {
            if (this.inputControl.valid) {
                this._dialogRef.close(this.inputControl.value);
            }
        };
        FsPromptInputComponent.prototype._init = function () {
            this.inputControl.setValue(this.data.default);
            if (this.data.required) {
                this.inputControl.setValidators(i5.Validators.required);
            }
        };
        return FsPromptInputComponent;
    }());
    FsPromptInputComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptInputComponent, deps: [{ token: i1.MAT_DIALOG_DATA }, { token: i1__namespace.MatDialogRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FsPromptInputComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsPromptInputComponent, selector: "ng-component", ngImport: i0__namespace, template: "<fs-dialog mobileMode=\"float\">\n  <form [formGroup]=\"promptInputForm\">\n    <h2 mat-dialog-title *ngIf=\"data.title\">{{data.title}}</h2>\n    <mat-dialog-content tabindex=\"-1\">\n      {{data.template}}\n      <mat-form-field>\n        <input matInput [placeholder]=\"data.label\" formControlName=\"input\" name=\"input\">\n        <mat-hint>\n          <ng-container *ngIf=\"inputControl.valid || !inputControl.dirty; else invalidMessage\">\n            {{data.hint}}\n          </ng-container>\n\n          <ng-template #invalidMessage>\n            <div class=\"form-error\">\n              This field is required\n            </div>\n          </ng-template>\n        </mat-hint>\n      </mat-form-field>\n    </mat-dialog-content>\n\n    <mat-dialog-actions>\n      <button mat-button\n              type=\"submit\"\n              *ngIf=\"data.commitShow\"\n              (click)=\"complete()\"\n              [disabled]=\"inputControl.invalid\"\n              color=\"primary\">\n        {{data.commitLabel}}\n      </button>\n      <button mat-button [mat-dialog-close]=\"undefined\" type=\"button\" *ngIf=\"data.cancelShow\">{{data.cancelLabel}}</button>\n    </mat-dialog-actions>\n  </form>\n</fs-dialog>\n", styles: [".mat-form-field{display:block}.dialog-title{margin:0 0 20px;display:block}.mat-dialog-content{outline:none}\n", "\n      .form-error {\n        color: #f44336;\n      }\n    "], components: [{ type: i2__namespace$1.FsDialogComponent, selector: "fs-dialog", inputs: ["mobileMode"] }, { type: i3__namespace$2.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], directives: [{ type: i5__namespace.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i5__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i6__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i1__namespace.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i7__namespace.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["id", "disabled", "required", "type", "value", "readonly", "placeholder", "errorStateMatcher", "aria-describedby"], exportAs: ["matInput"] }, { type: i5__namespace.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i5__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i3__namespace$2.MatHint, selector: "mat-hint", inputs: ["align", "id"] }, { type: i1__namespace.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]" }, { type: i1__namespace.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["type", "mat-dialog-close", "aria-label", "matDialogClose"], exportAs: ["matDialogClose"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptInputComponent, decorators: [{
                type: i0.Component,
                args: [{
                        templateUrl: 'prompt-input.component.html',
                        styleUrls: ['../../prompt.css'],
                        styles: [
                            "\n      .form-error {\n        color: #f44336;\n      }\n    "
                        ]
                    }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1.MAT_DIALOG_DATA]
                        }] }, { type: i1__namespace.MatDialogRef }];
        } });

    var FsPromptInputModule = /** @class */ (function () {
        function FsPromptInputModule() {
        }
        return FsPromptInputModule;
    }());
    FsPromptInputModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptInputModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    FsPromptInputModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptInputModule, declarations: [FsPromptInputComponent], imports: [
            // Angular
            i6.CommonModule,
            i5.ReactiveFormsModule,
            // Material
            i1.MatDialogModule,
            i4.MatButtonModule,
            i7.MatInputModule,
            i2$1.FsDialogModule
        ] });
    FsPromptInputModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptInputModule, imports: [[
                // Angular
                i6.CommonModule,
                i5.ReactiveFormsModule,
                // Material
                i1.MatDialogModule,
                i4.MatButtonModule,
                i7.MatInputModule,
                i2$1.FsDialogModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptInputModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            // Angular
                            i6.CommonModule,
                            i5.ReactiveFormsModule,
                            // Material
                            i1.MatDialogModule,
                            i4.MatButtonModule,
                            i7.MatInputModule,
                            i2$1.FsDialogModule
                        ],
                        entryComponents: [
                            FsPromptInputComponent,
                        ],
                        declarations: [
                            FsPromptInputComponent,
                        ],
                    }]
            }] });

    var FsPromptDateComponent = /** @class */ (function () {
        function FsPromptDateComponent(data, _dialogRef) {
            this.data = data;
            this._dialogRef = _dialogRef;
            this.input = new i5.FormControl('');
            this.promptType = this.data.promptType;
        }
        FsPromptDateComponent.prototype.ngOnInit = function () {
            this._init();
        };
        FsPromptDateComponent.prototype.complete = function () {
            if (this.input.valid) {
                this._dialogRef.close(this.input.value);
            }
        };
        FsPromptDateComponent.prototype._init = function () {
            this.input.setValue(this.data.default);
            if (this.data.required) {
                this.input.setValidators(i5.Validators.required);
            }
        };
        return FsPromptDateComponent;
    }());
    FsPromptDateComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptDateComponent, deps: [{ token: i1.MAT_DIALOG_DATA }, { token: i1__namespace.MatDialogRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FsPromptDateComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsPromptDateComponent, selector: "ng-component", ngImport: i0__namespace, template: "<fs-dialog mobileMode=\"float\">\n  <h2 mat-dialog-title *ngIf=\"data.title\">{{data.title}}</h2>\n  <mat-dialog-content tabindex=\"-1\">\n    {{data.template}}\n    <mat-form-field>\n      <input matInput fsDatePicker [placeholder]=\"data.label\" [formControl]=\"input\" name=\"input\" [view]=\"promptType\">\n\n      <mat-hint>\n        <ng-container *ngIf=\"input.valid || !input.dirty; else invalidMessage\">\n          {{data.hint}}\n        </ng-container>\n\n        <ng-template #invalidMessage>\n          <div class=\"form-error\">\n            This field is required\n          </div>\n        </ng-template>\n      </mat-hint>\n    </mat-form-field>\n  </mat-dialog-content>\n\n  <mat-dialog-actions>\n    <button mat-button\n            *ngIf=\"data.commitShow\"\n            (click)=\"complete()\"\n            [disabled]=\"input.invalid\"\n            color=\"primary\">\n      {{data.commitLabel}}\n    </button>\n    <button mat-button [mat-dialog-close]=\"undefined\" type=\"button\" *ngIf=\"data.cancelShow\">{{data.cancelLabel}}</button>\n  </mat-dialog-actions>\n</fs-dialog>\n", styles: [".mat-form-field{display:block}.dialog-title{margin:0 0 20px;display:block}.mat-dialog-content{outline:none}\n", "\n      .form-error {\n        color: #f44336;\n      }\n    "], components: [{ type: i2__namespace$1.FsDialogComponent, selector: "fs-dialog", inputs: ["mobileMode"] }, { type: i3__namespace$2.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace$2.FsDatePickerComponent, selector: "[fsDatePicker]", inputs: ["minYear", "maxYear", "minDate", "maxDate", "startOfDay", "view", "minutes", "format"], outputs: ["change"] }, { type: i4__namespace.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], directives: [{ type: i6__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i1__namespace.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i7__namespace.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["id", "disabled", "required", "type", "value", "readonly", "placeholder", "errorStateMatcher", "aria-describedby"], exportAs: ["matInput"] }, { type: i5__namespace.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i5__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5__namespace.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i3__namespace$2.MatHint, selector: "mat-hint", inputs: ["align", "id"] }, { type: i1__namespace.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]" }, { type: i1__namespace.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["type", "mat-dialog-close", "aria-label", "matDialogClose"], exportAs: ["matDialogClose"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptDateComponent, decorators: [{
                type: i0.Component,
                args: [{
                        templateUrl: 'prompt-date.component.html',
                        styleUrls: ['../../prompt.css'],
                        styles: [
                            "\n      .form-error {\n        color: #f44336;\n      }\n    "
                        ]
                    }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1.MAT_DIALOG_DATA]
                        }] }, { type: i1__namespace.MatDialogRef }];
        } });

    var FsPromptDateModule = /** @class */ (function () {
        function FsPromptDateModule() {
        }
        return FsPromptDateModule;
    }());
    FsPromptDateModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptDateModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    FsPromptDateModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptDateModule, declarations: [FsPromptDateComponent], imports: [
            // Angular
            i6.CommonModule,
            i5.ReactiveFormsModule,
            // Material
            i1.MatDialogModule,
            i4.MatButtonModule,
            i7.MatInputModule,
            i2$1.FsDialogModule,
            i4$2.FsDatePickerModule
        ] });
    FsPromptDateModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptDateModule, imports: [[
                // Angular
                i6.CommonModule,
                i5.ReactiveFormsModule,
                // Material
                i1.MatDialogModule,
                i4.MatButtonModule,
                i7.MatInputModule,
                i2$1.FsDialogModule,
                i4$2.FsDatePickerModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPromptDateModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            // Angular
                            i6.CommonModule,
                            i5.ReactiveFormsModule,
                            // Material
                            i1.MatDialogModule,
                            i4.MatButtonModule,
                            i7.MatInputModule,
                            i2$1.FsDialogModule,
                            i4$2.FsDatePickerModule,
                        ],
                        entryComponents: [
                            FsPromptDateComponent,
                        ],
                        declarations: [
                            FsPromptDateComponent,
                        ],
                    }]
            }] });

    var FsPromptConfig = /** @class */ (function () {
        function FsPromptConfig(config, promptType) {
            this.config = config;
            this.promptType = promptType;
            this.title = '';
            this.template = '';
            this.hint = '';
            this.label = '';
            this.class = '';
            this.commitLabel = 'Ok';
            this.cancelLabel = 'Cancel';
            this.commitShow = true;
            this.cancelShow = true;
            this.autofocus = true;
            this.buttons = [];
            this.values = [];
            this._defaultDialogConfig = {
                width: '500px',
                height: 'auto'
            };
            this.type = promptType;
            this.applyConfig(config);
            this.applyDialogConfig(config);
        }
        Object.defineProperty(FsPromptConfig.prototype, "dialogConfig", {
            get: function () {
                var config = Object.assign({}, this._dialogConfig);
                config.data = this;
                return config;
            },
            set: function (value) {
                this._dialogConfig = value;
            },
            enumerable: false,
            configurable: true
        });
        FsPromptConfig.prototype.addDefaultPanelClasses = function (type) {
            // FIXME replace this with FsUtil or something else
            if (typeof this._dialogConfig.panelClass === 'string' || this._dialogConfig.panelClass instanceof String) {
                this._dialogConfig.panelClass = this._dialogConfig.panelClass.split(' ');
            }
            if (!Array.isArray(this._dialogConfig.panelClass)) {
                this._dialogConfig.panelClass = [];
            }
            this._dialogConfig.panelClass.push('fs-prompt', 'fs-prompt-' + type);
        };
        FsPromptConfig.prototype.applyConfig = function (config) {
            Object.assign(this, config);
        };
        FsPromptConfig.prototype.applyDialogConfig = function (config) {
            var inputDialogConfig = config.dialogConfig;
            // Previously let's assign default config
            this._dialogConfig = Object.assign(Object.assign({}, this._defaultDialogConfig), { autoFocus: this.autofocus });
            // Then assign passed config
            if (inputDialogConfig) {
                Object.assign(this._dialogConfig, inputDialogConfig);
            }
            // Assign panel class (class for modal container) only if we don't have this class in modal options
            if (config.class) {
                this._dialogConfig.panelClass = config.class;
            }
        };
        return FsPromptConfig;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var FsPromptConfirmConfig = /** @class */ (function (_super) {
        __extends(FsPromptConfirmConfig, _super);
        function FsPromptConfirmConfig() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FsPromptConfirmConfig.prototype.applyConfig = function (config) {
            _super.prototype.applyConfig.call(this, config);
            if (!config.title) {
                config.title = 'Confirm';
            }
            if (!config.class) {
                config.class = 'fs-modal-confirm';
            }
            if (!this.buttons.length) {
                if (this.commitShow) {
                    this.buttons.push({
                        label: this.commitLabel,
                        color: 'primary'
                    });
                }
                if (this.cancelShow) {
                    this.buttons.push({
                        label: this.cancelLabel,
                        cancel: true,
                        color: ''
                    });
                }
            }
        };
        FsPromptConfirmConfig.prototype.applyDialogConfig = function (config) {
            _super.prototype.applyDialogConfig.call(this, config);
            var inputDialogConfig = config.dialogConfig;
            // Confrim has small width by default than other types
            if (!inputDialogConfig || inputDialogConfig.width === void 0) {
                this._dialogConfig.width = '250px';
            }
        };
        return FsPromptConfirmConfig;
    }(FsPromptConfig));

    var FsPrompt = /** @class */ (function () {
        function FsPrompt(dialog) {
            this.dialog = dialog;
        }
        /**
         * Open confirmation window and return close observable
         */
        FsPrompt.prototype.confirm = function (config) {
            if (config === void 0) { config = {}; }
            var openConfig = new FsPromptConfirmConfig(config, PromptType.confirm);
            return this.open(openConfig);
        };
        /**
         * Open window with input field for filling
         */
        FsPrompt.prototype.input = function (config) {
            if (config === void 0) { config = {}; }
            var openConfig = new FsPromptConfig(config, PromptType.input);
            return this.open(openConfig);
        };
        /**
         * Open modal with list
         */
        FsPrompt.prototype.select = function (config) {
            if (config === void 0) { config = {}; }
            var openConfig = new FsPromptConfig(config, PromptType.select);
            return this.open(openConfig);
        };
        /**
         * Open modal with autocomplete
         */
        FsPrompt.prototype.autocomplete = function (config) {
            if (config === void 0) { config = {}; }
            var openConfig = new FsPromptConfig(config, PromptType.autocomplete);
            return this.open(openConfig);
        };
        /**
         * Open modal with autocomplete chips
         */
        FsPrompt.prototype.autocompleteChips = function (config) {
            if (config === void 0) { config = {}; }
            var openConfig = new FsPromptConfig(config, PromptType.autocompleteChips);
            return this.open(openConfig);
        };
        /**
         * Open modal with list
         */
        FsPrompt.prototype.dateTime = function (config) {
            if (config === void 0) { config = {}; }
            config.autofocus = false;
            var openConfig = new FsPromptConfig(config, PromptType.dateTime);
            return this.open(openConfig);
        };
        /**
         * Open modal with list
         */
        FsPrompt.prototype.date = function (config) {
            if (config === void 0) { config = {}; }
            config.autofocus = false;
            var openConfig = new FsPromptConfig(config, PromptType.date);
            return this.open(openConfig);
        };
        /**
         * Open modal dialog depends from type
         */
        FsPrompt.prototype.open = function (config) {
            // Default classes for modal
            config.addDefaultPanelClasses(config.type);
            switch (config.type) {
                case PromptType.confirm: {
                    return this.dialog
                        .open(FsPromptConfirmComponent, config.dialogConfig)
                        .afterClosed()
                        .pipe(operators.switchMap(function (value) { return value === undefined ? rxjs.throwError('error') : rxjs.of(value); }));
                }
                case PromptType.input: {
                    return this.dialog.open(FsPromptInputComponent, config.dialogConfig)
                        .afterClosed()
                        .pipe(operators.switchMap(function (value) { return value === undefined ? rxjs.throwError('error') : rxjs.of(value); }));
                }
                case PromptType.select: {
                    return this.dialog.open(FsPromptSelectComponent, config.dialogConfig)
                        .afterClosed()
                        .pipe(operators.switchMap(function (value) { return value === undefined ? rxjs.throwError('error') : rxjs.of(value); }));
                }
                case PromptType.autocomplete: {
                    return this.dialog.open(FsPromptAutocompleteComponent, config.dialogConfig)
                        .afterClosed()
                        .pipe(operators.switchMap(function (value) { return value === undefined ? rxjs.throwError('error') : rxjs.of(value); }));
                }
                case PromptType.autocompleteChips: {
                    return this.dialog.open(FsPromptAutocompleteChipsComponent, config.dialogConfig)
                        .afterClosed()
                        .pipe(operators.switchMap(function (value) { return value === undefined ? rxjs.throwError('error') : rxjs.of(value); }));
                }
                case PromptType.date:
                case PromptType.dateTime: {
                    return this.dialog.open(FsPromptDateComponent, config.dialogConfig)
                        .afterClosed()
                        .pipe(operators.switchMap(function (value) { return value === undefined ? rxjs.throwError('error') : rxjs.of(value); }));
                }
                default: return rxjs.throwError('Erorr');
            }
        };
        return FsPrompt;
    }());
    FsPrompt.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPrompt, deps: [{ token: i1__namespace.MatDialog }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    FsPrompt.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPrompt, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPrompt, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.MatDialog }]; } });

    /*
     * Public API Surface of fs-menu
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.FsPrompt = FsPrompt;
    exports.FsPromptAutocompleteChipsModule = FsPromptAutocompleteChipsModule;
    exports.FsPromptAutocompleteModule = FsPromptAutocompleteModule;
    exports.FsPromptConfig = FsPromptConfig;
    exports.FsPromptConfirmConfig = FsPromptConfirmConfig;
    exports.FsPromptConfirmModule = FsPromptConfirmModule;
    exports.FsPromptDateModule = FsPromptDateModule;
    exports.FsPromptInputModule = FsPromptInputModule;
    exports.FsPromptModule = FsPromptModule;
    exports.FsPromptSelectModule = FsPromptSelectModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=firestitch-prompt.umd.js.map
