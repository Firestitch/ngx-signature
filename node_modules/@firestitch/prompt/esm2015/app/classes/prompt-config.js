export class FsPromptConfig {
    constructor(config, promptType) {
        this.config = config;
        this.promptType = promptType;
        this.title = '';
        this.template = '';
        this.hint = '';
        this.label = '';
        this.class = '';
        this.commitLabel = 'Ok';
        this.cancelLabel = 'Cancel';
        this.commitShow = true;
        this.cancelShow = true;
        this.autofocus = true;
        this.buttons = [];
        this.values = [];
        this._defaultDialogConfig = {
            width: '500px',
            height: 'auto'
        };
        this.type = promptType;
        this.applyConfig(config);
        this.applyDialogConfig(config);
    }
    get dialogConfig() {
        const config = Object.assign({}, this._dialogConfig);
        config.data = this;
        return config;
    }
    set dialogConfig(value) {
        this._dialogConfig = value;
    }
    addDefaultPanelClasses(type) {
        // FIXME replace this with FsUtil or something else
        if (typeof this._dialogConfig.panelClass === 'string' || this._dialogConfig.panelClass instanceof String) {
            this._dialogConfig.panelClass = this._dialogConfig.panelClass.split(' ');
        }
        if (!Array.isArray(this._dialogConfig.panelClass)) {
            this._dialogConfig.panelClass = [];
        }
        this._dialogConfig.panelClass.push('fs-prompt', 'fs-prompt-' + type);
    }
    applyConfig(config) {
        Object.assign(this, config);
    }
    applyDialogConfig(config) {
        const inputDialogConfig = config.dialogConfig;
        // Previously let's assign default config
        this._dialogConfig = Object.assign(Object.assign({}, this._defaultDialogConfig), { autoFocus: this.autofocus });
        // Then assign passed config
        if (inputDialogConfig) {
            Object.assign(this._dialogConfig, inputDialogConfig);
        }
        // Assign panel class (class for modal container) only if we don't have this class in modal options
        if (config.class) {
            this._dialogConfig.panelClass = config.class;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbXB0LWNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcHAvY2xhc3Nlcy9wcm9tcHQtY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFBLE1BQU0sT0FBTyxjQUFjO0lBd0J6QixZQUNTLE1BQXVCLEVBQ3ZCLFVBQXNCO1FBRHRCLFdBQU0sR0FBTixNQUFNLENBQWlCO1FBQ3ZCLGVBQVUsR0FBVixVQUFVLENBQVk7UUF6QnhCLFVBQUssR0FBRyxFQUFFLENBQUM7UUFDWCxhQUFRLEdBQUcsRUFBRSxDQUFDO1FBQ2QsU0FBSSxHQUFHLEVBQUUsQ0FBQztRQUNWLFVBQUssR0FBRyxFQUFFLENBQUM7UUFDWCxVQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ1gsZ0JBQVcsR0FBRyxJQUFJLENBQUM7UUFDbkIsZ0JBQVcsR0FBRyxRQUFRLENBQUM7UUFDdkIsZUFBVSxHQUFHLElBQUksQ0FBQztRQUNsQixlQUFVLEdBQUcsSUFBSSxDQUFDO1FBRWxCLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFFakIsWUFBTyxHQUFHLEVBQUUsQ0FBQztRQUViLFdBQU0sR0FBd0QsRUFBRSxDQUFDO1FBSTlELHlCQUFvQixHQUFHO1lBQy9CLEtBQUssRUFBRSxPQUFPO1lBQ2QsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFDO1FBTUEsSUFBSSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUM7UUFDdkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELElBQUksWUFBWTtRQUVkLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNyRCxNQUFNLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUVuQixPQUFPLE1BQU0sQ0FBQTtJQUNmLENBQUM7SUFFRCxJQUFJLFlBQVksQ0FBQyxLQUFLO1FBQ3BCLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO0lBQzdCLENBQUM7SUFFTSxzQkFBc0IsQ0FBQyxJQUFZO1FBQ3hDLG1EQUFtRDtRQUNuRCxJQUFJLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEtBQUssUUFBUSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxZQUFZLE1BQU0sRUFBRTtZQUN4RyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDMUU7UUFFRCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ2pELElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztTQUNwQztRQUVELElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsWUFBWSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFUyxXQUFXLENBQUMsTUFBdUI7UUFDM0MsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVTLGlCQUFpQixDQUFDLE1BQXVCO1FBQ2pELE1BQU0saUJBQWlCLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQztRQUU5Qyx5Q0FBeUM7UUFDekMsSUFBSSxDQUFDLGFBQWEsbUNBQVEsSUFBSSxDQUFDLG9CQUFvQixLQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxHQUFFLENBQUM7UUFFakYsNEJBQTRCO1FBQzVCLElBQUksaUJBQWlCLEVBQUU7WUFDckIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLENBQUM7U0FDdEQ7UUFFRCxtR0FBbUc7UUFDbkcsSUFBSSxNQUFNLENBQUMsS0FBSyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7U0FDOUM7SUFDSCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYXREaWFsb2dDb25maWcgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kaWFsb2cnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBGc1ZhbHVlc0Z1bmN0aW9uIH0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBJRnNQcm9tcHRDb25maWcgfSBmcm9tICcuLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IFByb21wdFR5cGUgfSBmcm9tICcuLi9oZWxwZXJzL2VudW1zJztcblxuXG5leHBvcnQgY2xhc3MgRnNQcm9tcHRDb25maWc8VD4ge1xuICBwdWJsaWMgdGl0bGUgPSAnJztcbiAgcHVibGljIHRlbXBsYXRlID0gJyc7XG4gIHB1YmxpYyBoaW50ID0gJyc7XG4gIHB1YmxpYyBsYWJlbCA9ICcnO1xuICBwdWJsaWMgY2xhc3MgPSAnJztcbiAgcHVibGljIGNvbW1pdExhYmVsID0gJ09rJztcbiAgcHVibGljIGNhbmNlbExhYmVsID0gJ0NhbmNlbCc7XG4gIHB1YmxpYyBjb21taXRTaG93ID0gdHJ1ZTtcbiAgcHVibGljIGNhbmNlbFNob3cgPSB0cnVlO1xuICBwdWJsaWMgZGVmYXVsdDtcbiAgcHVibGljIGF1dG9mb2N1cyA9IHRydWU7XG4gIHB1YmxpYyB0eXBlOiBQcm9tcHRUeXBlO1xuICBwdWJsaWMgYnV0dG9ucyA9IFtdO1xuXG4gIHB1YmxpYyB2YWx1ZXM6IE9ic2VydmFibGU8VD4gfCBQcm9taXNlPFQ+IHwgVFtdIHwgRnNWYWx1ZXNGdW5jdGlvbiA9IFtdO1xuXG4gIHByb3RlY3RlZCBfZGlhbG9nQ29uZmlnOiBNYXREaWFsb2dDb25maWc7XG5cbiAgcHJvdGVjdGVkIF9kZWZhdWx0RGlhbG9nQ29uZmlnID0ge1xuICAgIHdpZHRoOiAnNTAwcHgnLFxuICAgIGhlaWdodDogJ2F1dG8nXG4gIH07XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGNvbmZpZzogSUZzUHJvbXB0Q29uZmlnLFxuICAgIHB1YmxpYyBwcm9tcHRUeXBlOiBQcm9tcHRUeXBlLFxuICApIHtcbiAgICB0aGlzLnR5cGUgPSBwcm9tcHRUeXBlO1xuICAgIHRoaXMuYXBwbHlDb25maWcoY29uZmlnKTtcbiAgICB0aGlzLmFwcGx5RGlhbG9nQ29uZmlnKGNvbmZpZyk7XG4gIH1cblxuICBnZXQgZGlhbG9nQ29uZmlnKCkge1xuXG4gICAgY29uc3QgY29uZmlnID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5fZGlhbG9nQ29uZmlnKTtcbiAgICBjb25maWcuZGF0YSA9IHRoaXM7XG5cbiAgICByZXR1cm4gY29uZmlnXG4gIH1cblxuICBzZXQgZGlhbG9nQ29uZmlnKHZhbHVlKSB7XG4gICAgdGhpcy5fZGlhbG9nQ29uZmlnID0gdmFsdWU7XG4gIH1cblxuICBwdWJsaWMgYWRkRGVmYXVsdFBhbmVsQ2xhc3Nlcyh0eXBlOiBzdHJpbmcpIHtcbiAgICAvLyBGSVhNRSByZXBsYWNlIHRoaXMgd2l0aCBGc1V0aWwgb3Igc29tZXRoaW5nIGVsc2VcbiAgICBpZiAodHlwZW9mIHRoaXMuX2RpYWxvZ0NvbmZpZy5wYW5lbENsYXNzID09PSAnc3RyaW5nJyB8fCB0aGlzLl9kaWFsb2dDb25maWcucGFuZWxDbGFzcyBpbnN0YW5jZW9mIFN0cmluZykge1xuICAgICAgdGhpcy5fZGlhbG9nQ29uZmlnLnBhbmVsQ2xhc3MgPSB0aGlzLl9kaWFsb2dDb25maWcucGFuZWxDbGFzcy5zcGxpdCgnICcpO1xuICAgIH1cblxuICAgIGlmICghQXJyYXkuaXNBcnJheSh0aGlzLl9kaWFsb2dDb25maWcucGFuZWxDbGFzcykpIHtcbiAgICAgIHRoaXMuX2RpYWxvZ0NvbmZpZy5wYW5lbENsYXNzID0gW107XG4gICAgfVxuXG4gICAgdGhpcy5fZGlhbG9nQ29uZmlnLnBhbmVsQ2xhc3MucHVzaCgnZnMtcHJvbXB0JywgJ2ZzLXByb21wdC0nICsgdHlwZSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXBwbHlDb25maWcoY29uZmlnOiBJRnNQcm9tcHRDb25maWcpIHtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIGNvbmZpZyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXBwbHlEaWFsb2dDb25maWcoY29uZmlnOiBJRnNQcm9tcHRDb25maWcpIHtcbiAgICBjb25zdCBpbnB1dERpYWxvZ0NvbmZpZyA9IGNvbmZpZy5kaWFsb2dDb25maWc7XG5cbiAgICAvLyBQcmV2aW91c2x5IGxldCdzIGFzc2lnbiBkZWZhdWx0IGNvbmZpZ1xuICAgIHRoaXMuX2RpYWxvZ0NvbmZpZyA9IHsgLi4udGhpcy5fZGVmYXVsdERpYWxvZ0NvbmZpZywgYXV0b0ZvY3VzOiB0aGlzLmF1dG9mb2N1cyB9O1xuXG4gICAgLy8gVGhlbiBhc3NpZ24gcGFzc2VkIGNvbmZpZ1xuICAgIGlmIChpbnB1dERpYWxvZ0NvbmZpZykge1xuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLl9kaWFsb2dDb25maWcsIGlucHV0RGlhbG9nQ29uZmlnKTtcbiAgICB9XG5cbiAgICAvLyBBc3NpZ24gcGFuZWwgY2xhc3MgKGNsYXNzIGZvciBtb2RhbCBjb250YWluZXIpIG9ubHkgaWYgd2UgZG9uJ3QgaGF2ZSB0aGlzIGNsYXNzIGluIG1vZGFsIG9wdGlvbnNcbiAgICBpZiAoY29uZmlnLmNsYXNzKSB7XG4gICAgICB0aGlzLl9kaWFsb2dDb25maWcucGFuZWxDbGFzcyA9IGNvbmZpZy5jbGFzcztcbiAgICB9XG4gIH1cbn1cbiJdfQ==