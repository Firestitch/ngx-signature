import { FsPromptDateComponent } from './../components/prompt-date/prompt-date.component';
import { Injectable, } from '@angular/core';
// Modal
import { MatDialog } from '@angular/material/dialog';
// RX
import { throwError, of } from 'rxjs';
import { switchMap } from 'rxjs/operators';
// Configs
import { FsPromptConfig, FsPromptConfirmConfig } from '../classes';
// Components for open in modal
import { FsPromptConfirmComponent } from '../components/prompt-confirm/prompt-confirm.component';
import { FsPromptAutocompleteComponent } from '../components/prompt-autocomplete/prompt-autocomplete.component';
import { FsPromptSelectComponent } from '../components/prompt-select/prompt-select.component';
import { FsPromptInputComponent } from '../components/prompt-input/prompt-input.component';
import { PromptType } from '../helpers/enums';
import { FsPromptAutocompleteChipsComponent } from '../components/prompt-autocomplete-chips/prompt-autocomplete-chips.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
export class FsPrompt {
    constructor(dialog) {
        this.dialog = dialog;
    }
    /**
     * Open confirmation window and return close observable
     */
    confirm(config = {}) {
        const openConfig = new FsPromptConfirmConfig(config, PromptType.confirm);
        return this.open(openConfig);
    }
    /**
     * Open window with input field for filling
     */
    input(config = {}) {
        const openConfig = new FsPromptConfig(config, PromptType.input);
        return this.open(openConfig);
    }
    /**
     * Open modal with list
     */
    select(config = {}) {
        const openConfig = new FsPromptConfig(config, PromptType.select);
        return this.open(openConfig);
    }
    /**
     * Open modal with autocomplete
     */
    autocomplete(config = {}) {
        const openConfig = new FsPromptConfig(config, PromptType.autocomplete);
        return this.open(openConfig);
    }
    /**
     * Open modal with autocomplete chips
     */
    autocompleteChips(config = {}) {
        const openConfig = new FsPromptConfig(config, PromptType.autocompleteChips);
        return this.open(openConfig);
    }
    /**
     * Open modal with list
     */
    dateTime(config = {}) {
        config.autofocus = false;
        const openConfig = new FsPromptConfig(config, PromptType.dateTime);
        return this.open(openConfig);
    }
    /**
     * Open modal with list
     */
    date(config = {}) {
        config.autofocus = false;
        const openConfig = new FsPromptConfig(config, PromptType.date);
        return this.open(openConfig);
    }
    /**
     * Open modal dialog depends from type
     */
    open(config) {
        // Default classes for modal
        config.addDefaultPanelClasses(config.type);
        switch (config.type) {
            case PromptType.confirm: {
                return this.dialog
                    .open(FsPromptConfirmComponent, config.dialogConfig)
                    .afterClosed()
                    .pipe(switchMap((value) => value === undefined ? throwError('error') : of(value)));
            }
            case PromptType.input: {
                return this.dialog.open(FsPromptInputComponent, config.dialogConfig)
                    .afterClosed()
                    .pipe(switchMap((value) => value === undefined ? throwError('error') : of(value)));
            }
            case PromptType.select: {
                return this.dialog.open(FsPromptSelectComponent, config.dialogConfig)
                    .afterClosed()
                    .pipe(switchMap((value) => value === undefined ? throwError('error') : of(value)));
            }
            case PromptType.autocomplete: {
                return this.dialog.open(FsPromptAutocompleteComponent, config.dialogConfig)
                    .afterClosed()
                    .pipe(switchMap((value) => value === undefined ? throwError('error') : of(value)));
            }
            case PromptType.autocompleteChips: {
                return this.dialog.open(FsPromptAutocompleteChipsComponent, config.dialogConfig)
                    .afterClosed()
                    .pipe(switchMap((value) => value === undefined ? throwError('error') : of(value)));
            }
            case PromptType.date:
            case PromptType.dateTime: {
                return this.dialog.open(FsPromptDateComponent, config.dialogConfig)
                    .afterClosed()
                    .pipe(switchMap((value) => value === undefined ? throwError('error') : of(value)));
            }
            default: return throwError('Erorr');
        }
    }
}
FsPrompt.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPrompt, deps: [{ token: i1.MatDialog }], target: i0.ɵɵFactoryTarget.Injectable });
FsPrompt.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPrompt, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPrompt, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.MatDialog }]; } });
//# sourceMappingURL=data:application/json;base64,