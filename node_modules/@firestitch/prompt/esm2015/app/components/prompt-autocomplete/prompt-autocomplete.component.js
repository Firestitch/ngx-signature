import { Component, Inject } from '@angular/core';
import { FormControl } from '@angular/forms';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@firestitch/dialog";
import * as i3 from "@firestitch/autocomplete";
import * as i4 from "@angular/material/button";
import * as i5 from "@angular/forms";
import * as i6 from "@angular/common";
export class FsPromptAutocompleteComponent {
    constructor(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
        this.inputControl = new FormControl('', []);
        this.loading = false;
        this.items = [];
        this.error = false;
        this.config = {
            fetchOnFocus: true,
        };
        this.fetch = (name) => {
            return this.data.values(name);
        };
        this.config = Object.assign(Object.assign({}, this.config), data.config);
    }
    modelChange(result) {
        if (result) {
            this.dialogRef.close(result.value);
        }
    }
    displayWith(value) {
        return value ? value.name : undefined;
    }
}
FsPromptAutocompleteComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptAutocompleteComponent, deps: [{ token: i1.MatDialogRef }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });
FsPromptAutocompleteComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsPromptAutocompleteComponent, selector: "fs-prompt-autocomplete", ngImport: i0, template: "<fs-dialog mobileMode=\"float\">\n  <h2 mat-dialog-title>{{data.title}}</h2>\n  <mat-dialog-content tabindex=\"-1\">\n    {{data.template}}\n    <fs-autocomplete\n        [fetch]=\"fetch\"\n        [fetchOnFocus]=\"config.fetchOnFocus\"\n        [displayWith]=\"displayWith\"\n        [(ngModel)]=\"result\"\n        [placeholder]=\"data.label\"\n        (ngModelChange)=\"modelChange($event)\"\n        [required]=\"true\"\n        name=\"result\">\n      <ng-template fsAutocompleteTemplate let-data=\"data\">\n        {{ data.name }}\n      </ng-template>\n    </fs-autocomplete>\n  </mat-dialog-content>\n\n  <mat-dialog-actions>\n    <button mat-button [mat-dialog-close]=\"undefined\" type=\"button\" *ngIf=\"data.cancelShow\">{{data.cancelLabel}}</button>\n  </mat-dialog-actions>\n</fs-dialog>\n", styles: [".mat-form-field{display:block}.dialog-title{margin:0 0 20px;display:block}.mat-dialog-content{outline:none}\n", ":host ::ng-deep .mat-form-field{width:100%}.mat-dialog-content{outline:none}\n"], components: [{ type: i2.FsDialogComponent, selector: "fs-dialog", inputs: ["mobileMode"] }, { type: i3.FsAutocompleteComponent, selector: "fs-autocomplete", inputs: ["fetch", "placeholder", "displayWith", "fetchOnFocus", "readonly", "required", "disabled", "hint", "panelWidth", "panelClass", "showClear"], outputs: ["cleared"] }, { type: i4.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], directives: [{ type: i1.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i1.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i5.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i3.FsAutocompleteTemplateDirective, selector: "[fsAutocompleteTemplate]" }, { type: i1.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]" }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["type", "mat-dialog-close", "aria-label", "matDialogClose"], exportAs: ["matDialogClose"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptAutocompleteComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'fs-prompt-autocomplete',
                    templateUrl: 'prompt-autocomplete.component.html',
                    styleUrls: ['../../prompt.css', 'prompt-autocomplete.component.scss'],
                }]
        }], ctorParameters: function () { return [{ type: i1.MatDialogRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbXB0LWF1dG9jb21wbGV0ZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYXBwL2NvbXBvbmVudHMvcHJvbXB0LWF1dG9jb21wbGV0ZS9wcm9tcHQtYXV0b2NvbXBsZXRlLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3NyYy9hcHAvY29tcG9uZW50cy9wcm9tcHQtYXV0b2NvbXBsZXRlL3Byb21wdC1hdXRvY29tcGxldGUuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDMUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxZQUFZLEVBQUUsZUFBZSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7Ozs7Ozs7O0FBU3pFLE1BQU0sT0FBTyw2QkFBNkI7SUFheEMsWUFDUyxTQUFzRCxFQUM3QixJQUFTO1FBRGxDLGNBQVMsR0FBVCxTQUFTLENBQTZDO1FBQzdCLFNBQUksR0FBSixJQUFJLENBQUs7UUFicEMsaUJBQVksR0FBRyxJQUFJLFdBQVcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFHdkMsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUNoQixVQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ1gsVUFBSyxHQUFHLEtBQUssQ0FBQztRQUVkLFdBQU0sR0FBRztZQUNkLFlBQVksRUFBRSxJQUFJO1NBQ25CLENBQUM7UUFZSyxVQUFLLEdBQUcsQ0FBQyxJQUFZLEVBQUUsRUFBRTtZQUM5QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hDLENBQUMsQ0FBQztRQVJBLElBQUksQ0FBQyxNQUFNLG1DQUNOLElBQUksQ0FBQyxNQUFNLEdBQ1gsSUFBSSxDQUFDLE1BQU0sQ0FDZixDQUFDO0lBQ0osQ0FBQztJQU1NLFdBQVcsQ0FBQyxNQUFNO1FBQ3ZCLElBQUksTUFBTSxFQUFFO1lBQ1YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3BDO0lBQ0gsQ0FBQztJQUVNLFdBQVcsQ0FBQyxLQUFLO1FBQ3RCLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDeEMsQ0FBQzs7MkhBbkNVLDZCQUE2Qiw4Q0FlOUIsZUFBZTsrR0FmZCw2QkFBNkIsOERDWDFDLHF5QkF1QkE7NEZEWmEsNkJBQTZCO2tCQUx6QyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSx3QkFBd0I7b0JBQ2xDLFdBQVcsRUFBRSxvQ0FBb0M7b0JBQ2pELFNBQVMsRUFBRSxDQUFFLGtCQUFrQixFQUFFLG9DQUFvQyxDQUFFO2lCQUN4RTs7MEJBZ0JJLE1BQU07MkJBQUMsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5qZWN0LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Db250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgTWF0RGlhbG9nUmVmLCBNQVRfRElBTE9HX0RBVEEgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kaWFsb2cnO1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2ZzLXByb21wdC1hdXRvY29tcGxldGUnLFxuICB0ZW1wbGF0ZVVybDogJ3Byb21wdC1hdXRvY29tcGxldGUuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsgJy4uLy4uL3Byb21wdC5jc3MnLCAncHJvbXB0LWF1dG9jb21wbGV0ZS5jb21wb25lbnQuc2NzcycgXSxcbn0pXG5leHBvcnQgY2xhc3MgRnNQcm9tcHRBdXRvY29tcGxldGVDb21wb25lbnQge1xuXG4gIHB1YmxpYyBpbnB1dENvbnRyb2wgPSBuZXcgRm9ybUNvbnRyb2woJycsIFtdKTtcbiAgcHVibGljIGZpbHRlcmVkSXRlbXM6IE9ic2VydmFibGU8YW55W10+O1xuICBwdWJsaWMgcmVzdWx0O1xuICBwdWJsaWMgbG9hZGluZyA9IGZhbHNlO1xuICBwdWJsaWMgaXRlbXMgPSBbXTtcbiAgcHVibGljIGVycm9yID0gZmFsc2U7XG4gIHB1YmxpYyBtb2RlbDtcbiAgcHVibGljIGNvbmZpZyA9IHtcbiAgICBmZXRjaE9uRm9jdXM6IHRydWUsXG4gIH07XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGRpYWxvZ1JlZjogTWF0RGlhbG9nUmVmPEZzUHJvbXB0QXV0b2NvbXBsZXRlQ29tcG9uZW50PixcbiAgICBASW5qZWN0KE1BVF9ESUFMT0dfREFUQSkgcHVibGljIGRhdGE6IGFueSxcbiAgKSB7XG4gICAgdGhpcy5jb25maWcgPSB7XG4gICAgICAuLi50aGlzLmNvbmZpZyxcbiAgICAgIC4uLmRhdGEuY29uZmlnLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgZmV0Y2ggPSAobmFtZTogc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YS52YWx1ZXMobmFtZSk7XG4gIH07XG5cbiAgcHVibGljIG1vZGVsQ2hhbmdlKHJlc3VsdCkge1xuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIHRoaXMuZGlhbG9nUmVmLmNsb3NlKHJlc3VsdC52YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGRpc3BsYXlXaXRoKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID8gdmFsdWUubmFtZSA6IHVuZGVmaW5lZDtcbiAgfVxufVxuIiwiPGZzLWRpYWxvZyBtb2JpbGVNb2RlPVwiZmxvYXRcIj5cbiAgPGgyIG1hdC1kaWFsb2ctdGl0bGU+e3tkYXRhLnRpdGxlfX08L2gyPlxuICA8bWF0LWRpYWxvZy1jb250ZW50IHRhYmluZGV4PVwiLTFcIj5cbiAgICB7e2RhdGEudGVtcGxhdGV9fVxuICAgIDxmcy1hdXRvY29tcGxldGVcbiAgICAgICAgW2ZldGNoXT1cImZldGNoXCJcbiAgICAgICAgW2ZldGNoT25Gb2N1c109XCJjb25maWcuZmV0Y2hPbkZvY3VzXCJcbiAgICAgICAgW2Rpc3BsYXlXaXRoXT1cImRpc3BsYXlXaXRoXCJcbiAgICAgICAgWyhuZ01vZGVsKV09XCJyZXN1bHRcIlxuICAgICAgICBbcGxhY2Vob2xkZXJdPVwiZGF0YS5sYWJlbFwiXG4gICAgICAgIChuZ01vZGVsQ2hhbmdlKT1cIm1vZGVsQ2hhbmdlKCRldmVudClcIlxuICAgICAgICBbcmVxdWlyZWRdPVwidHJ1ZVwiXG4gICAgICAgIG5hbWU9XCJyZXN1bHRcIj5cbiAgICAgIDxuZy10ZW1wbGF0ZSBmc0F1dG9jb21wbGV0ZVRlbXBsYXRlIGxldC1kYXRhPVwiZGF0YVwiPlxuICAgICAgICB7eyBkYXRhLm5hbWUgfX1cbiAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgPC9mcy1hdXRvY29tcGxldGU+XG4gIDwvbWF0LWRpYWxvZy1jb250ZW50PlxuXG4gIDxtYXQtZGlhbG9nLWFjdGlvbnM+XG4gICAgPGJ1dHRvbiBtYXQtYnV0dG9uIFttYXQtZGlhbG9nLWNsb3NlXT1cInVuZGVmaW5lZFwiIHR5cGU9XCJidXR0b25cIiAqbmdJZj1cImRhdGEuY2FuY2VsU2hvd1wiPnt7ZGF0YS5jYW5jZWxMYWJlbH19PC9idXR0b24+XG4gIDwvbWF0LWRpYWxvZy1hY3Rpb25zPlxuPC9mcy1kaWFsb2c+XG4iXX0=