import { Component, Inject, ViewChild } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@firestitch/dialog";
import * as i3 from "@firestitch/autocomplete-chips";
import * as i4 from "@angular/material/button";
import * as i5 from "@angular/forms";
import * as i6 from "@angular/common";
export class FsPromptAutocompleteChipsComponent {
    constructor(_dialogRef, data) {
        this._dialogRef = _dialogRef;
        this.data = data;
        this.config = {
            default: [],
        };
        this.promptInputForm = new FormGroup({
            input: new FormControl(''),
        });
        this.fetch = (name) => {
            return this.data.values(name);
        };
        this.validateText = (name) => {
            return !this.config.allowText || this.config.validateText(name);
        };
        this.config = Object.assign(Object.assign({}, this.config), data.config);
        this.model = this.config.default;
    }
    complete() {
        const model = this.model
            .map((item) => {
            return this.config.allowText ? item : item.value;
        });
        this._dialogRef.close(model);
    }
}
FsPromptAutocompleteChipsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptAutocompleteChipsComponent, deps: [{ token: i1.MatDialogRef }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });
FsPromptAutocompleteChipsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsPromptAutocompleteChipsComponent, selector: "fs-prompt-autocomplete-chips", viewQueries: [{ propertyName: "autocomplete", first: true, predicate: ["autocomplete"], descendants: true }], ngImport: i0, template: "<fs-dialog mobileMode=\"float\">\n  <h2 mat-dialog-title>{{data.title}}</h2>\n  <mat-dialog-content tabindex=\"-1\">\n    {{data.template}}\n    <fs-autocomplete-chips\n        #autocomplete\n        [fetch]=\"fetch\"\n        [placeholder]=\"config.label\"\n        [fetchOnFocus]=\"true\"\n        [(ngModel)]=\"model\"\n        [allowText]=\"config.allowText\"\n        [allowObject]=\"!config.allowText\"\n        [validateText]=\"validateText\"\n        [required]=\"true\"\n        [multiple]=\"true\"\n        name=\"model\">\n      <ng-template fsAutocompleteChipsTemplate let-object=\"object\">\n        {{ object.name }}\n    </ng-template>\n  </fs-autocomplete-chips>\n  </mat-dialog-content>\n  <mat-dialog-actions>\n    <button mat-button\n        type=\"submit\"\n        [disabled]=\"!model.length\"\n        (click)=\"complete()\"\n        color=\"primary\">\n      {{data.commitLabel}}\n    </button>    \n    <button mat-button [mat-dialog-close]=\"undefined\" type=\"button\" *ngIf=\"data.cancelShow\">{{data.cancelLabel}}</button>\n  </mat-dialog-actions>\n</fs-dialog>", styles: [".mat-form-field{display:block}.dialog-title{margin:0 0 20px;display:block}.mat-dialog-content{outline:none}\n", ":host ::ng-deep .mat-form-field{width:100%}.mat-dialog-content{outline:none}\n"], components: [{ type: i2.FsDialogComponent, selector: "fs-dialog", inputs: ["mobileMode"] }, { type: i3.FsAutocompleteChipsComponent, selector: "fs-autocomplete-chips", inputs: ["fetch", "readonly", "size", "placeholder", "chipImage", "allowObject", "delay", "invalidTextMessage", "removable", "allowClear", "color", "background", "orderable", "limit", "initOnClick", "fetchOnFocus", "multiple", "compareWith", "panelWidth", "panelClass", "disabled", "chipBackground", "chipColor", "chipIcon", "chipIconColor", "chipClass", "hint", "allowText", "validateText"], outputs: ["selected", "removed", "reordered", "clear"] }, { type: i4.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], directives: [{ type: i1.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i1.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i5.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i3.FsAutocompleteObjectDirective, selector: "[fsAutocompleteObject],[fsAutocompleteChipsTemplate]" }, { type: i1.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]" }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["type", "mat-dialog-close", "aria-label", "matDialogClose"], exportAs: ["matDialogClose"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptAutocompleteChipsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'fs-prompt-autocomplete-chips',
                    templateUrl: 'prompt-autocomplete-chips.component.html',
                    styleUrls: ['../../prompt.css', 'prompt-autocomplete-chips.component.scss'],
                }]
        }], ctorParameters: function () { return [{ type: i1.MatDialogRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }]; }, propDecorators: { autocomplete: [{
                type: ViewChild,
                args: ['autocomplete']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbXB0LWF1dG9jb21wbGV0ZS1jaGlwcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYXBwL2NvbXBvbmVudHMvcHJvbXB0LWF1dG9jb21wbGV0ZS1jaGlwcy9wcm9tcHQtYXV0b2NvbXBsZXRlLWNoaXBzLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3NyYy9hcHAvY29tcG9uZW50cy9wcm9tcHQtYXV0b2NvbXBsZXRlLWNoaXBzL3Byb21wdC1hdXRvY29tcGxldGUtY2hpcHMuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFlBQVksRUFBRSxlQUFlLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQzs7Ozs7Ozs7QUFVekUsTUFBTSxPQUFPLGtDQUFrQztJQWE3QyxZQUNVLFVBQTRELEVBQ3BDLElBQVM7UUFEakMsZUFBVSxHQUFWLFVBQVUsQ0FBa0Q7UUFDcEMsU0FBSSxHQUFKLElBQUksQ0FBSztRQVRwQyxXQUFNLEdBQXFDO1lBQ2hELE9BQU8sRUFBRSxFQUFFO1NBQ1osQ0FBQztRQUNLLG9CQUFlLEdBQUcsSUFBSSxTQUFTLENBQUM7WUFDckMsS0FBSyxFQUFFLElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQztTQUMzQixDQUFDLENBQUM7UUFjSSxVQUFLLEdBQUcsQ0FBQyxJQUFZLEVBQUUsRUFBRTtZQUM5QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hDLENBQUMsQ0FBQztRQUVLLGlCQUFZLEdBQUcsQ0FBQyxJQUFZLEVBQUUsRUFBRTtZQUNyQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEUsQ0FBQyxDQUFDO1FBZEEsSUFBSSxDQUFDLE1BQU0sbUNBQ04sSUFBSSxDQUFDLE1BQU0sR0FDWCxJQUFJLENBQUMsTUFBTSxDQUNmLENBQUM7UUFFRixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO0lBQ25DLENBQUM7SUFVTSxRQUFRO1FBQ2IsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUs7YUFDdkIsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDWixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDbkQsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMvQixDQUFDOztnSUF4Q1Usa0NBQWtDLDhDQWVuQyxlQUFlO29IQWZkLGtDQUFrQyxrTENaL0MsbWtDQStCWTs0RkRuQkMsa0NBQWtDO2tCQUw5QyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSw4QkFBOEI7b0JBQ3hDLFdBQVcsRUFBRSwwQ0FBMEM7b0JBQ3ZELFNBQVMsRUFBRSxDQUFFLGtCQUFrQixFQUFFLDBDQUEwQyxDQUFFO2lCQUM5RTs7MEJBZ0JJLE1BQU07MkJBQUMsZUFBZTs0Q0FabEIsWUFBWTtzQkFEbEIsU0FBUzt1QkFBQyxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbmplY3QsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2wsIEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IE1hdERpYWxvZ1JlZiwgTUFUX0RJQUxPR19EQVRBIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvZGlhbG9nJztcblxuaW1wb3J0IHsgSUZzUHJvbXB0QXV0b2NvbXBsZXRlQ2hpcHNDb25maWcsIElGc1Byb21wdENvbmZpZyB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMnO1xuXG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2ZzLXByb21wdC1hdXRvY29tcGxldGUtY2hpcHMnLFxuICB0ZW1wbGF0ZVVybDogJ3Byb21wdC1hdXRvY29tcGxldGUtY2hpcHMuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsgJy4uLy4uL3Byb21wdC5jc3MnLCAncHJvbXB0LWF1dG9jb21wbGV0ZS1jaGlwcy5jb21wb25lbnQuc2NzcycgXSxcbn0pXG5leHBvcnQgY2xhc3MgRnNQcm9tcHRBdXRvY29tcGxldGVDaGlwc0NvbXBvbmVudCB7XG4gIFxuICBAVmlld0NoaWxkKCdhdXRvY29tcGxldGUnKVxuICBwdWJsaWMgYXV0b2NvbXBsZXRlOiBGc1Byb21wdEF1dG9jb21wbGV0ZUNoaXBzQ29tcG9uZW50O1xuXG4gIHB1YmxpYyBtb2RlbDtcbiAgcHVibGljIGNvbmZpZzogSUZzUHJvbXB0QXV0b2NvbXBsZXRlQ2hpcHNDb25maWcgPSB7XG4gICAgZGVmYXVsdDogW10sXG4gIH07XG4gIHB1YmxpYyBwcm9tcHRJbnB1dEZvcm0gPSBuZXcgRm9ybUdyb3VwKHtcbiAgICBpbnB1dDogbmV3IEZvcm1Db250cm9sKCcnKSxcbiAgfSk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBfZGlhbG9nUmVmOiBNYXREaWFsb2dSZWY8RnNQcm9tcHRBdXRvY29tcGxldGVDaGlwc0NvbXBvbmVudD4sXG4gICAgQEluamVjdChNQVRfRElBTE9HX0RBVEEpIHB1YmxpYyBkYXRhOiBhbnksXG4gICkgeyAgICBcbiAgICB0aGlzLmNvbmZpZyA9IHtcbiAgICAgIC4uLnRoaXMuY29uZmlnLFxuICAgICAgLi4uZGF0YS5jb25maWcsXG4gICAgfTtcblxuICAgIHRoaXMubW9kZWwgPSB0aGlzLmNvbmZpZy5kZWZhdWx0O1xuICB9XG5cbiAgcHVibGljIGZldGNoID0gKG5hbWU6IHN0cmluZykgPT4ge1xuICAgIHJldHVybiB0aGlzLmRhdGEudmFsdWVzKG5hbWUpO1xuICB9O1xuXG4gIHB1YmxpYyB2YWxpZGF0ZVRleHQgPSAobmFtZTogc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuICF0aGlzLmNvbmZpZy5hbGxvd1RleHQgfHwgdGhpcy5jb25maWcudmFsaWRhdGVUZXh0KG5hbWUpO1xuICB9O1xuXG4gIHB1YmxpYyBjb21wbGV0ZSgpIHtcbiAgICBjb25zdCBtb2RlbCA9IHRoaXMubW9kZWxcbiAgICAubWFwKChpdGVtKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5jb25maWcuYWxsb3dUZXh0ID8gaXRlbSA6IGl0ZW0udmFsdWU7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9kaWFsb2dSZWYuY2xvc2UobW9kZWwpO1xuICB9XG59XG4iLCI8ZnMtZGlhbG9nIG1vYmlsZU1vZGU9XCJmbG9hdFwiPlxuICA8aDIgbWF0LWRpYWxvZy10aXRsZT57e2RhdGEudGl0bGV9fTwvaDI+XG4gIDxtYXQtZGlhbG9nLWNvbnRlbnQgdGFiaW5kZXg9XCItMVwiPlxuICAgIHt7ZGF0YS50ZW1wbGF0ZX19XG4gICAgPGZzLWF1dG9jb21wbGV0ZS1jaGlwc1xuICAgICAgICAjYXV0b2NvbXBsZXRlXG4gICAgICAgIFtmZXRjaF09XCJmZXRjaFwiXG4gICAgICAgIFtwbGFjZWhvbGRlcl09XCJjb25maWcubGFiZWxcIlxuICAgICAgICBbZmV0Y2hPbkZvY3VzXT1cInRydWVcIlxuICAgICAgICBbKG5nTW9kZWwpXT1cIm1vZGVsXCJcbiAgICAgICAgW2FsbG93VGV4dF09XCJjb25maWcuYWxsb3dUZXh0XCJcbiAgICAgICAgW2FsbG93T2JqZWN0XT1cIiFjb25maWcuYWxsb3dUZXh0XCJcbiAgICAgICAgW3ZhbGlkYXRlVGV4dF09XCJ2YWxpZGF0ZVRleHRcIlxuICAgICAgICBbcmVxdWlyZWRdPVwidHJ1ZVwiXG4gICAgICAgIFttdWx0aXBsZV09XCJ0cnVlXCJcbiAgICAgICAgbmFtZT1cIm1vZGVsXCI+XG4gICAgICA8bmctdGVtcGxhdGUgZnNBdXRvY29tcGxldGVDaGlwc1RlbXBsYXRlIGxldC1vYmplY3Q9XCJvYmplY3RcIj5cbiAgICAgICAge3sgb2JqZWN0Lm5hbWUgfX1cbiAgICA8L25nLXRlbXBsYXRlPlxuICA8L2ZzLWF1dG9jb21wbGV0ZS1jaGlwcz5cbiAgPC9tYXQtZGlhbG9nLWNvbnRlbnQ+XG4gIDxtYXQtZGlhbG9nLWFjdGlvbnM+XG4gICAgPGJ1dHRvbiBtYXQtYnV0dG9uXG4gICAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgICAgICBbZGlzYWJsZWRdPVwiIW1vZGVsLmxlbmd0aFwiXG4gICAgICAgIChjbGljayk9XCJjb21wbGV0ZSgpXCJcbiAgICAgICAgY29sb3I9XCJwcmltYXJ5XCI+XG4gICAgICB7e2RhdGEuY29tbWl0TGFiZWx9fVxuICAgIDwvYnV0dG9uPiAgICBcbiAgICA8YnV0dG9uIG1hdC1idXR0b24gW21hdC1kaWFsb2ctY2xvc2VdPVwidW5kZWZpbmVkXCIgdHlwZT1cImJ1dHRvblwiICpuZ0lmPVwiZGF0YS5jYW5jZWxTaG93XCI+e3tkYXRhLmNhbmNlbExhYmVsfX08L2J1dHRvbj5cbiAgPC9tYXQtZGlhbG9nLWFjdGlvbnM+XG48L2ZzLWRpYWxvZz4iXX0=