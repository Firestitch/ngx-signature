import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
import { valuesConverter } from '../../helpers/values-converter';
import { ConverterType } from '../../helpers/enums';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@firestitch/dialog";
import * as i3 from "@angular/material/form-field";
import * as i4 from "@angular/material/select";
import * as i5 from "@angular/material/core";
import * as i6 from "@angular/material/button";
import * as i7 from "@angular/common";
import * as i8 from "@angular/forms";
export class FsPromptSelectComponent {
    constructor(dialogRef, data, _cdRef) {
        this.dialogRef = dialogRef;
        this.data = data;
        this._cdRef = _cdRef;
        this.loading = false;
        this.items = [];
        this.error = false;
    }
    ngOnInit() {
        this.loadItems();
    }
    modelChange(e) {
        this.dialogRef.close(this.result);
    }
    loadItems() {
        const result = valuesConverter(this.data.values);
        switch (result.type) {
            case ConverterType.observable:
                {
                    this.loading = true;
                    result.values
                        .subscribe((response) => {
                        this.items = response;
                        this.loading = false;
                        this._cdRef.markForCheck();
                    }, () => {
                        this.error = true;
                        this.loading = false;
                        this._cdRef.markForCheck();
                    });
                }
                break;
            case ConverterType.promise:
                {
                    this.loading = true;
                    result.values.then((response) => {
                        this.items = response;
                        this.loading = false;
                        this._cdRef.markForCheck();
                    }, () => {
                        this.error = true;
                        this.loading = false;
                        this._cdRef.markForCheck();
                    });
                }
                break;
            case ConverterType.array:
                {
                    this.items = this.data.values;
                    this._cdRef.markForCheck();
                }
                break;
            default: {
                this.error = true;
                this._cdRef.markForCheck();
            }
        }
    }
}
FsPromptSelectComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptSelectComponent, deps: [{ token: i1.MatDialogRef }, { token: MAT_DIALOG_DATA }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
FsPromptSelectComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsPromptSelectComponent, selector: "ng-component", ngImport: i0, template: "<fs-dialog mobileMode=\"float\">\n  <h2 mat-dialog-title>{{data.title}}</h2>\n  <mat-dialog-content tabindex=\"-1\">\n    {{data.template}}\n    <mat-form-field *ngIf=\"!loading && !error\">\n      <mat-select\n        [placeholder]=\"data.label\"\n        [(ngModel)]=\"result\" name=\"select\"\n        (ngModelChange)=\"modelChange($event)\">\n        <mat-option *ngFor=\"let item of items\" [value]=\"item.value\">\n          {{ item.name }}\n        </mat-option>\n      </mat-select>\n      <mat-hint>{{data.hint}}</mat-hint>\n    </mat-form-field>\n    <ng-container *ngIf=\"loading\">Please wait...</ng-container>\n    <ng-container *ngIf=\"error\">Something went wrong. Please, try again</ng-container>\n  </mat-dialog-content>\n\n  <mat-dialog-actions>\n    <button mat-button [mat-dialog-close]=\"undefined\" type=\"button\" >{{data.cancelLabel}}</button>\n  </mat-dialog-actions>\n</fs-dialog>\n", styles: [".mat-form-field{display:block}.dialog-title{margin:0 0 20px;display:block}.mat-dialog-content{outline:none}\n"], components: [{ type: i2.FsDialogComponent, selector: "fs-dialog", inputs: ["mobileMode"] }, { type: i3.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i5.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i6.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], directives: [{ type: i1.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i1.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i8.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i7.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.MatHint, selector: "mat-hint", inputs: ["align", "id"] }, { type: i1.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]" }, { type: i1.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["type", "mat-dialog-close", "aria-label", "matDialogClose"], exportAs: ["matDialogClose"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptSelectComponent, decorators: [{
            type: Component,
            args: [{
                    templateUrl: 'prompt-select.component.html',
                    styleUrls: ['../../prompt.css'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.MatDialogRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }, { type: i0.ChangeDetectorRef }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbXB0LXNlbGVjdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYXBwL2NvbXBvbmVudHMvcHJvbXB0LXNlbGVjdC9wcm9tcHQtc2VsZWN0LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3NyYy9hcHAvY29tcG9uZW50cy9wcm9tcHQtc2VsZWN0L3Byb21wdC1zZWxlY3QuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixpQkFBaUIsRUFDakIsU0FBUyxFQUNULE1BQU0sRUFFUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsZUFBZSxFQUFFLFlBQVksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRXpFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNqRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0scUJBQXFCLENBQUM7Ozs7Ozs7Ozs7QUFRcEQsTUFBTSxPQUFPLHVCQUF1QjtJQU9sQyxZQUNTLFNBQWdELEVBQ3ZCLElBQVMsRUFDakMsTUFBeUI7UUFGMUIsY0FBUyxHQUFULFNBQVMsQ0FBdUM7UUFDdkIsU0FBSSxHQUFKLElBQUksQ0FBSztRQUNqQyxXQUFNLEdBQU4sTUFBTSxDQUFtQjtRQVA1QixZQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ2hCLFVBQUssR0FBRyxFQUFFLENBQUM7UUFDWCxVQUFLLEdBQUcsS0FBSyxDQUFDO0lBT3JCLENBQUM7SUFFTSxRQUFRO1FBQ2IsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ25CLENBQUM7SUFFTSxXQUFXLENBQUMsQ0FBQztRQUNsQixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVPLFNBQVM7UUFDZixNQUFNLE1BQU0sR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVqRCxRQUFRLE1BQU0sQ0FBQyxJQUFJLEVBQUU7WUFDbkIsS0FBSyxhQUFhLENBQUMsVUFBVTtnQkFBRTtvQkFDN0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7b0JBQ3BCLE1BQU0sQ0FBQyxNQUFNO3lCQUNaLFNBQVMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO3dCQUN0QixJQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQzt3QkFDdEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7d0JBQ3JCLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7b0JBQzdCLENBQUMsRUFBRSxHQUFHLEVBQUU7d0JBQ04sSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7d0JBQ2xCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO3dCQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO29CQUM3QixDQUFDLENBQUMsQ0FBQTtpQkFDSDtnQkFBQyxNQUFNO1lBRVIsS0FBSyxhQUFhLENBQUMsT0FBTztnQkFBRTtvQkFDMUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7b0JBQ3BCLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUU7d0JBQzlCLElBQUksQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDO3dCQUN0QixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQzt3QkFDckIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztvQkFDN0IsQ0FBQyxFQUFFLEdBQUcsRUFBRTt3QkFDTixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQzt3QkFDbEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7d0JBQ3JCLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7b0JBQzdCLENBQUMsQ0FBQyxDQUFBO2lCQUNIO2dCQUFDLE1BQU07WUFFUixLQUFLLGFBQWEsQ0FBQyxLQUFLO2dCQUFFO29CQUN4QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO29CQUM5QixJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO2lCQUM1QjtnQkFBQyxNQUFNO1lBRVIsT0FBTyxDQUFDLENBQUM7Z0JBQ1AsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7Z0JBQ2xCLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7YUFDNUI7U0FDRjtJQUNILENBQUM7O3FIQS9EVSx1QkFBdUIsOENBU3hCLGVBQWU7eUdBVGQsdUJBQXVCLG9EQ2xCcEMsODRCQXVCQTs0RkRMYSx1QkFBdUI7a0JBTG5DLFNBQVM7bUJBQUM7b0JBQ1QsV0FBVyxFQUFFLDhCQUE4QjtvQkFDM0MsU0FBUyxFQUFFLENBQUUsa0JBQWtCLENBQUU7b0JBQ2pDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2lCQUNoRDs7MEJBVUksTUFBTTsyQkFBQyxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIEluamVjdCxcbiAgT25Jbml0XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTUFUX0RJQUxPR19EQVRBLCBNYXREaWFsb2dSZWYgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kaWFsb2cnO1xuXG5pbXBvcnQgeyB2YWx1ZXNDb252ZXJ0ZXIgfSBmcm9tICcuLi8uLi9oZWxwZXJzL3ZhbHVlcy1jb252ZXJ0ZXInO1xuaW1wb3J0IHsgQ29udmVydGVyVHlwZSB9IGZyb20gJy4uLy4uL2hlbHBlcnMvZW51bXMnO1xuXG5cbkBDb21wb25lbnQoe1xuICB0ZW1wbGF0ZVVybDogJ3Byb21wdC1zZWxlY3QuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsgJy4uLy4uL3Byb21wdC5jc3MnIF0sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBGc1Byb21wdFNlbGVjdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgcHVibGljIHJlc3VsdDtcbiAgcHVibGljIGxvYWRpbmcgPSBmYWxzZTtcbiAgcHVibGljIGl0ZW1zID0gW107XG4gIHB1YmxpYyBlcnJvciA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBkaWFsb2dSZWY6IE1hdERpYWxvZ1JlZjxGc1Byb21wdFNlbGVjdENvbXBvbmVudD4sXG4gICAgQEluamVjdChNQVRfRElBTE9HX0RBVEEpIHB1YmxpYyBkYXRhOiBhbnksXG4gICAgcHJpdmF0ZSBfY2RSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuICApIHtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmxvYWRJdGVtcygpO1xuICB9XG5cbiAgcHVibGljIG1vZGVsQ2hhbmdlKGUpIHtcbiAgICB0aGlzLmRpYWxvZ1JlZi5jbG9zZSh0aGlzLnJlc3VsdCk7XG4gIH1cblxuICBwcml2YXRlIGxvYWRJdGVtcygpIHtcbiAgICBjb25zdCByZXN1bHQgPSB2YWx1ZXNDb252ZXJ0ZXIodGhpcy5kYXRhLnZhbHVlcyk7XG5cbiAgICBzd2l0Y2ggKHJlc3VsdC50eXBlKSB7XG4gICAgICBjYXNlIENvbnZlcnRlclR5cGUub2JzZXJ2YWJsZToge1xuICAgICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICByZXN1bHQudmFsdWVzXG4gICAgICAgIC5zdWJzY3JpYmUoKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgdGhpcy5pdGVtcyA9IHJlc3BvbnNlO1xuICAgICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMuX2NkUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgICAgICB9LCAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5lcnJvciA9IHRydWU7XG4gICAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5fY2RSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgICAgIH0pXG4gICAgICB9IGJyZWFrO1xuXG4gICAgICBjYXNlIENvbnZlcnRlclR5cGUucHJvbWlzZToge1xuICAgICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICByZXN1bHQudmFsdWVzLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgdGhpcy5pdGVtcyA9IHJlc3BvbnNlO1xuICAgICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMuX2NkUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgICAgICB9LCAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5lcnJvciA9IHRydWU7XG4gICAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5fY2RSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgICAgIH0pXG4gICAgICB9IGJyZWFrO1xuXG4gICAgICBjYXNlIENvbnZlcnRlclR5cGUuYXJyYXk6IHtcbiAgICAgICAgdGhpcy5pdGVtcyA9IHRoaXMuZGF0YS52YWx1ZXM7XG4gICAgICAgIHRoaXMuX2NkUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgICAgfSBicmVhaztcblxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICB0aGlzLmVycm9yID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fY2RSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCI8ZnMtZGlhbG9nIG1vYmlsZU1vZGU9XCJmbG9hdFwiPlxuICA8aDIgbWF0LWRpYWxvZy10aXRsZT57e2RhdGEudGl0bGV9fTwvaDI+XG4gIDxtYXQtZGlhbG9nLWNvbnRlbnQgdGFiaW5kZXg9XCItMVwiPlxuICAgIHt7ZGF0YS50ZW1wbGF0ZX19XG4gICAgPG1hdC1mb3JtLWZpZWxkICpuZ0lmPVwiIWxvYWRpbmcgJiYgIWVycm9yXCI+XG4gICAgICA8bWF0LXNlbGVjdFxuICAgICAgICBbcGxhY2Vob2xkZXJdPVwiZGF0YS5sYWJlbFwiXG4gICAgICAgIFsobmdNb2RlbCldPVwicmVzdWx0XCIgbmFtZT1cInNlbGVjdFwiXG4gICAgICAgIChuZ01vZGVsQ2hhbmdlKT1cIm1vZGVsQ2hhbmdlKCRldmVudClcIj5cbiAgICAgICAgPG1hdC1vcHRpb24gKm5nRm9yPVwibGV0IGl0ZW0gb2YgaXRlbXNcIiBbdmFsdWVdPVwiaXRlbS52YWx1ZVwiPlxuICAgICAgICAgIHt7IGl0ZW0ubmFtZSB9fVxuICAgICAgICA8L21hdC1vcHRpb24+XG4gICAgICA8L21hdC1zZWxlY3Q+XG4gICAgICA8bWF0LWhpbnQ+e3tkYXRhLmhpbnR9fTwvbWF0LWhpbnQ+XG4gICAgPC9tYXQtZm9ybS1maWVsZD5cbiAgICA8bmctY29udGFpbmVyICpuZ0lmPVwibG9hZGluZ1wiPlBsZWFzZSB3YWl0Li4uPC9uZy1jb250YWluZXI+XG4gICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImVycm9yXCI+U29tZXRoaW5nIHdlbnQgd3JvbmcuIFBsZWFzZSwgdHJ5IGFnYWluPC9uZy1jb250YWluZXI+XG4gIDwvbWF0LWRpYWxvZy1jb250ZW50PlxuXG4gIDxtYXQtZGlhbG9nLWFjdGlvbnM+XG4gICAgPGJ1dHRvbiBtYXQtYnV0dG9uIFttYXQtZGlhbG9nLWNsb3NlXT1cInVuZGVmaW5lZFwiIHR5cGU9XCJidXR0b25cIiA+e3tkYXRhLmNhbmNlbExhYmVsfX08L2J1dHRvbj5cbiAgPC9tYXQtZGlhbG9nLWFjdGlvbnM+XG48L2ZzLWRpYWxvZz5cbiJdfQ==