import { Component, Inject } from '@angular/core';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@firestitch/dialog";
import * as i3 from "@angular/material/form-field";
import * as i4 from "@angular/material/button";
import * as i5 from "@angular/forms";
import * as i6 from "@angular/common";
import * as i7 from "@angular/material/input";
export class FsPromptInputComponent {
    constructor(data, _dialogRef) {
        this.data = data;
        this._dialogRef = _dialogRef;
        this.promptInputForm = new FormGroup({
            input: new FormControl(''),
        });
    }
    get inputControl() {
        return this.promptInputForm.get('input');
    }
    ngOnInit() {
        this._init();
    }
    complete() {
        if (this.inputControl.valid) {
            this._dialogRef.close(this.inputControl.value);
        }
    }
    _init() {
        this.inputControl.setValue(this.data.default);
        if (this.data.required) {
            this.inputControl.setValidators(Validators.required);
        }
    }
}
FsPromptInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptInputComponent, deps: [{ token: MAT_DIALOG_DATA }, { token: i1.MatDialogRef }], target: i0.ɵɵFactoryTarget.Component });
FsPromptInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsPromptInputComponent, selector: "ng-component", ngImport: i0, template: "<fs-dialog mobileMode=\"float\">\n  <form [formGroup]=\"promptInputForm\">\n    <h2 mat-dialog-title *ngIf=\"data.title\">{{data.title}}</h2>\n    <mat-dialog-content tabindex=\"-1\">\n      {{data.template}}\n      <mat-form-field>\n        <input matInput [placeholder]=\"data.label\" formControlName=\"input\" name=\"input\">\n        <mat-hint>\n          <ng-container *ngIf=\"inputControl.valid || !inputControl.dirty; else invalidMessage\">\n            {{data.hint}}\n          </ng-container>\n\n          <ng-template #invalidMessage>\n            <div class=\"form-error\">\n              This field is required\n            </div>\n          </ng-template>\n        </mat-hint>\n      </mat-form-field>\n    </mat-dialog-content>\n\n    <mat-dialog-actions>\n      <button mat-button\n              type=\"submit\"\n              *ngIf=\"data.commitShow\"\n              (click)=\"complete()\"\n              [disabled]=\"inputControl.invalid\"\n              color=\"primary\">\n        {{data.commitLabel}}\n      </button>\n      <button mat-button [mat-dialog-close]=\"undefined\" type=\"button\" *ngIf=\"data.cancelShow\">{{data.cancelLabel}}</button>\n    </mat-dialog-actions>\n  </form>\n</fs-dialog>\n", styles: [".mat-form-field{display:block}.dialog-title{margin:0 0 20px;display:block}.mat-dialog-content{outline:none}\n", "\n      .form-error {\n        color: #f44336;\n      }\n    "], components: [{ type: i2.FsDialogComponent, selector: "fs-dialog", inputs: ["mobileMode"] }, { type: i3.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], directives: [{ type: i5.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i1.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i7.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["id", "disabled", "required", "type", "value", "readonly", "placeholder", "errorStateMatcher", "aria-describedby"], exportAs: ["matInput"] }, { type: i5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i3.MatHint, selector: "mat-hint", inputs: ["align", "id"] }, { type: i1.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]" }, { type: i1.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["type", "mat-dialog-close", "aria-label", "matDialogClose"], exportAs: ["matDialogClose"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptInputComponent, decorators: [{
            type: Component,
            args: [{
                    templateUrl: 'prompt-input.component.html',
                    styleUrls: ['../../prompt.css'],
                    styles: [
                        `
      .form-error {
        color: #f44336;
      }
    `
                    ]
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }, { type: i1.MatDialogRef }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbXB0LWlucHV0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hcHAvY29tcG9uZW50cy9wcm9tcHQtaW5wdXQvcHJvbXB0LWlucHV0LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3NyYy9hcHAvY29tcG9uZW50cy9wcm9tcHQtaW5wdXQvcHJvbXB0LWlucHV0LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQzFELE9BQU8sRUFBRSxZQUFZLEVBQUUsZUFBZSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDekUsT0FBTyxFQUFtQixXQUFXLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7Ozs7Ozs7QUFhckYsTUFBTSxPQUFPLHNCQUFzQjtJQU1qQyxZQUNrQyxJQUFTLEVBQ2pDLFVBQWdEO1FBRHhCLFNBQUksR0FBSixJQUFJLENBQUs7UUFDakMsZUFBVSxHQUFWLFVBQVUsQ0FBc0M7UUFObkQsb0JBQWUsR0FBRyxJQUFJLFNBQVMsQ0FBQztZQUNyQyxLQUFLLEVBQUUsSUFBSSxXQUFXLENBQUMsRUFBRSxDQUFDO1NBQzNCLENBQUMsQ0FBQztJQUtBLENBQUM7SUFFSixJQUFXLFlBQVk7UUFDckIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRU0sUUFBUTtRQUNiLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNmLENBQUM7SUFFTSxRQUFRO1FBQ2IsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRTtZQUMzQixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2hEO0lBQ0gsQ0FBQztJQUVPLEtBQUs7UUFDWCxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRTlDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDdEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3REO0lBQ0gsQ0FBQzs7b0hBL0JVLHNCQUFzQixrQkFPdkIsZUFBZTt3R0FQZCxzQkFBc0Isb0RDZm5DLHdzQ0FrQ0E7NEZEbkJhLHNCQUFzQjtrQkFYbEMsU0FBUzttQkFBQztvQkFDVCxXQUFXLEVBQUUsNkJBQTZCO29CQUMxQyxTQUFTLEVBQUUsQ0FBRSxrQkFBa0IsQ0FBRTtvQkFDakMsTUFBTSxFQUFFO3dCQUNOOzs7O0tBSUM7cUJBQ0Y7aUJBQ0Y7OzBCQVFJLE1BQU07MkJBQUMsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5qZWN0LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdERpYWxvZ1JlZiwgTUFUX0RJQUxPR19EQVRBIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvZGlhbG9nJztcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgRm9ybUNvbnRyb2wsIEZvcm1Hcm91cCwgVmFsaWRhdG9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuQENvbXBvbmVudCh7XG4gIHRlbXBsYXRlVXJsOiAncHJvbXB0LWlucHV0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbICcuLi8uLi9wcm9tcHQuY3NzJyBdLFxuICBzdHlsZXM6IFtcbiAgICBgXG4gICAgICAuZm9ybS1lcnJvciB7XG4gICAgICAgIGNvbG9yOiAjZjQ0MzM2O1xuICAgICAgfVxuICAgIGBcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBGc1Byb21wdElucHV0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBwdWJsaWMgcHJvbXB0SW5wdXRGb3JtID0gbmV3IEZvcm1Hcm91cCh7XG4gICAgaW5wdXQ6IG5ldyBGb3JtQ29udHJvbCgnJyksXG4gIH0pO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoTUFUX0RJQUxPR19EQVRBKSBwdWJsaWMgZGF0YTogYW55LFxuICAgIHByaXZhdGUgX2RpYWxvZ1JlZjogTWF0RGlhbG9nUmVmPEZzUHJvbXB0SW5wdXRDb21wb25lbnQ+LFxuICApIHt9XG5cbiAgcHVibGljIGdldCBpbnB1dENvbnRyb2woKTogQWJzdHJhY3RDb250cm9sIHtcbiAgICByZXR1cm4gdGhpcy5wcm9tcHRJbnB1dEZvcm0uZ2V0KCdpbnB1dCcpO1xuICB9XG5cbiAgcHVibGljIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuX2luaXQoKTtcbiAgfVxuXG4gIHB1YmxpYyBjb21wbGV0ZSgpIHtcbiAgICBpZiAodGhpcy5pbnB1dENvbnRyb2wudmFsaWQpIHtcbiAgICAgIHRoaXMuX2RpYWxvZ1JlZi5jbG9zZSh0aGlzLmlucHV0Q29udHJvbC52YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfaW5pdCgpIHtcbiAgICB0aGlzLmlucHV0Q29udHJvbC5zZXRWYWx1ZSh0aGlzLmRhdGEuZGVmYXVsdCk7XG5cbiAgICBpZiAodGhpcy5kYXRhLnJlcXVpcmVkKSB7XG4gICAgICB0aGlzLmlucHV0Q29udHJvbC5zZXRWYWxpZGF0b3JzKFZhbGlkYXRvcnMucmVxdWlyZWQpO1xuICAgIH1cbiAgfVxufVxuIiwiPGZzLWRpYWxvZyBtb2JpbGVNb2RlPVwiZmxvYXRcIj5cbiAgPGZvcm0gW2Zvcm1Hcm91cF09XCJwcm9tcHRJbnB1dEZvcm1cIj5cbiAgICA8aDIgbWF0LWRpYWxvZy10aXRsZSAqbmdJZj1cImRhdGEudGl0bGVcIj57e2RhdGEudGl0bGV9fTwvaDI+XG4gICAgPG1hdC1kaWFsb2ctY29udGVudCB0YWJpbmRleD1cIi0xXCI+XG4gICAgICB7e2RhdGEudGVtcGxhdGV9fVxuICAgICAgPG1hdC1mb3JtLWZpZWxkPlxuICAgICAgICA8aW5wdXQgbWF0SW5wdXQgW3BsYWNlaG9sZGVyXT1cImRhdGEubGFiZWxcIiBmb3JtQ29udHJvbE5hbWU9XCJpbnB1dFwiIG5hbWU9XCJpbnB1dFwiPlxuICAgICAgICA8bWF0LWhpbnQ+XG4gICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImlucHV0Q29udHJvbC52YWxpZCB8fCAhaW5wdXRDb250cm9sLmRpcnR5OyBlbHNlIGludmFsaWRNZXNzYWdlXCI+XG4gICAgICAgICAgICB7e2RhdGEuaGludH19XG4gICAgICAgICAgPC9uZy1jb250YWluZXI+XG5cbiAgICAgICAgICA8bmctdGVtcGxhdGUgI2ludmFsaWRNZXNzYWdlPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZXJyb3JcIj5cbiAgICAgICAgICAgICAgVGhpcyBmaWVsZCBpcyByZXF1aXJlZFxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgPC9tYXQtaGludD5cbiAgICAgIDwvbWF0LWZvcm0tZmllbGQ+XG4gICAgPC9tYXQtZGlhbG9nLWNvbnRlbnQ+XG5cbiAgICA8bWF0LWRpYWxvZy1hY3Rpb25zPlxuICAgICAgPGJ1dHRvbiBtYXQtYnV0dG9uXG4gICAgICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgICAgICAgICAgICAqbmdJZj1cImRhdGEuY29tbWl0U2hvd1wiXG4gICAgICAgICAgICAgIChjbGljayk9XCJjb21wbGV0ZSgpXCJcbiAgICAgICAgICAgICAgW2Rpc2FibGVkXT1cImlucHV0Q29udHJvbC5pbnZhbGlkXCJcbiAgICAgICAgICAgICAgY29sb3I9XCJwcmltYXJ5XCI+XG4gICAgICAgIHt7ZGF0YS5jb21taXRMYWJlbH19XG4gICAgICA8L2J1dHRvbj5cbiAgICAgIDxidXR0b24gbWF0LWJ1dHRvbiBbbWF0LWRpYWxvZy1jbG9zZV09XCJ1bmRlZmluZWRcIiB0eXBlPVwiYnV0dG9uXCIgKm5nSWY9XCJkYXRhLmNhbmNlbFNob3dcIj57e2RhdGEuY2FuY2VsTGFiZWx9fTwvYnV0dG9uPlxuICAgIDwvbWF0LWRpYWxvZy1hY3Rpb25zPlxuICA8L2Zvcm0+XG48L2ZzLWRpYWxvZz5cbiJdfQ==