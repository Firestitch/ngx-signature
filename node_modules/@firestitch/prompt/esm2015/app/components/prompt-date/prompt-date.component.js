import { Component, Inject } from '@angular/core';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { FormControl, Validators } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@firestitch/dialog";
import * as i3 from "@angular/material/form-field";
import * as i4 from "@firestitch/datepicker";
import * as i5 from "@angular/material/button";
import * as i6 from "@angular/common";
import * as i7 from "@angular/material/input";
import * as i8 from "@angular/forms";
export class FsPromptDateComponent {
    constructor(data, _dialogRef) {
        this.data = data;
        this._dialogRef = _dialogRef;
        this.input = new FormControl('');
        this.promptType = this.data.promptType;
    }
    ngOnInit() {
        this._init();
    }
    complete() {
        if (this.input.valid) {
            this._dialogRef.close(this.input.value);
        }
    }
    _init() {
        this.input.setValue(this.data.default);
        if (this.data.required) {
            this.input.setValidators(Validators.required);
        }
    }
}
FsPromptDateComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptDateComponent, deps: [{ token: MAT_DIALOG_DATA }, { token: i1.MatDialogRef }], target: i0.ɵɵFactoryTarget.Component });
FsPromptDateComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsPromptDateComponent, selector: "ng-component", ngImport: i0, template: "<fs-dialog mobileMode=\"float\">\n  <h2 mat-dialog-title *ngIf=\"data.title\">{{data.title}}</h2>\n  <mat-dialog-content tabindex=\"-1\">\n    {{data.template}}\n    <mat-form-field>\n      <input matInput fsDatePicker [placeholder]=\"data.label\" [formControl]=\"input\" name=\"input\" [view]=\"promptType\">\n\n      <mat-hint>\n        <ng-container *ngIf=\"input.valid || !input.dirty; else invalidMessage\">\n          {{data.hint}}\n        </ng-container>\n\n        <ng-template #invalidMessage>\n          <div class=\"form-error\">\n            This field is required\n          </div>\n        </ng-template>\n      </mat-hint>\n    </mat-form-field>\n  </mat-dialog-content>\n\n  <mat-dialog-actions>\n    <button mat-button\n            *ngIf=\"data.commitShow\"\n            (click)=\"complete()\"\n            [disabled]=\"input.invalid\"\n            color=\"primary\">\n      {{data.commitLabel}}\n    </button>\n    <button mat-button [mat-dialog-close]=\"undefined\" type=\"button\" *ngIf=\"data.cancelShow\">{{data.cancelLabel}}</button>\n  </mat-dialog-actions>\n</fs-dialog>\n", styles: [".mat-form-field{display:block}.dialog-title{margin:0 0 20px;display:block}.mat-dialog-content{outline:none}\n", "\n      .form-error {\n        color: #f44336;\n      }\n    "], components: [{ type: i2.FsDialogComponent, selector: "fs-dialog", inputs: ["mobileMode"] }, { type: i3.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4.FsDatePickerComponent, selector: "[fsDatePicker]", inputs: ["minYear", "maxYear", "minDate", "maxDate", "startOfDay", "view", "minutes", "format"], outputs: ["change"] }, { type: i5.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i1.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i7.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["id", "disabled", "required", "type", "value", "readonly", "placeholder", "errorStateMatcher", "aria-describedby"], exportAs: ["matInput"] }, { type: i8.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i8.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i8.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i3.MatHint, selector: "mat-hint", inputs: ["align", "id"] }, { type: i1.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]" }, { type: i1.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["type", "mat-dialog-close", "aria-label", "matDialogClose"], exportAs: ["matDialogClose"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptDateComponent, decorators: [{
            type: Component,
            args: [{
                    templateUrl: 'prompt-date.component.html',
                    styleUrls: ['../../prompt.css'],
                    styles: [
                        `
      .form-error {
        color: #f44336;
      }
    `
                    ]
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }, { type: i1.MatDialogRef }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbXB0LWRhdGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2FwcC9jb21wb25lbnRzL3Byb21wdC1kYXRlL3Byb21wdC1kYXRlLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3NyYy9hcHAvY29tcG9uZW50cy9wcm9tcHQtZGF0ZS9wcm9tcHQtZGF0ZS5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUMxRCxPQUFPLEVBQUUsWUFBWSxFQUFFLGVBQWUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7Ozs7Ozs7QUFhekQsTUFBTSxPQUFPLHFCQUFxQjtJQUtoQyxZQUNrQyxJQUFTLEVBQ2pDLFVBQStDO1FBRHZCLFNBQUksR0FBSixJQUFJLENBQUs7UUFDakMsZUFBVSxHQUFWLFVBQVUsQ0FBcUM7UUFMbEQsVUFBSyxHQUFHLElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBT2pDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDekMsQ0FBQztJQUVNLFFBQVE7UUFDYixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDZixDQUFDO0lBRU0sUUFBUTtRQUNiLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN6QztJQUNILENBQUM7SUFFTyxLQUFLO1FBQ1gsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV2QyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUMvQztJQUNILENBQUM7O21IQTVCVSxxQkFBcUIsa0JBTXRCLGVBQWU7dUdBTmQscUJBQXFCLG9EQ2ZsQyw0a0NBZ0NBOzRGRGpCYSxxQkFBcUI7a0JBWGpDLFNBQVM7bUJBQUM7b0JBQ1QsV0FBVyxFQUFFLDRCQUE0QjtvQkFDekMsU0FBUyxFQUFFLENBQUUsa0JBQWtCLENBQUU7b0JBQ2pDLE1BQU0sRUFBRTt3QkFDTjs7OztLQUlDO3FCQUNGO2lCQUNGOzswQkFPSSxNQUFNOzJCQUFDLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEluamVjdCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXREaWFsb2dSZWYsIE1BVF9ESUFMT0dfREFUQSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2RpYWxvZyc7XG5pbXBvcnQgeyBGb3JtQ29udHJvbCwgVmFsaWRhdG9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuQENvbXBvbmVudCh7XG4gIHRlbXBsYXRlVXJsOiAncHJvbXB0LWRhdGUuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsgJy4uLy4uL3Byb21wdC5jc3MnIF0sXG4gIHN0eWxlczogW1xuICAgIGBcbiAgICAgIC5mb3JtLWVycm9yIHtcbiAgICAgICAgY29sb3I6ICNmNDQzMzY7XG4gICAgICB9XG4gICAgYFxuICBdXG59KVxuZXhwb3J0IGNsYXNzIEZzUHJvbXB0RGF0ZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgcHVibGljIGlucHV0ID0gbmV3IEZvcm1Db250cm9sKCcnKTtcbiAgcHVibGljIHByb21wdFR5cGU7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChNQVRfRElBTE9HX0RBVEEpIHB1YmxpYyBkYXRhOiBhbnksXG4gICAgcHJpdmF0ZSBfZGlhbG9nUmVmOiBNYXREaWFsb2dSZWY8RnNQcm9tcHREYXRlQ29tcG9uZW50PixcbiAgKSB7XG4gICAgdGhpcy5wcm9tcHRUeXBlID0gdGhpcy5kYXRhLnByb21wdFR5cGU7XG4gIH1cblxuICBwdWJsaWMgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5faW5pdCgpO1xuICB9XG5cbiAgcHVibGljIGNvbXBsZXRlKCkge1xuICAgIGlmICh0aGlzLmlucHV0LnZhbGlkKSB7XG4gICAgICB0aGlzLl9kaWFsb2dSZWYuY2xvc2UodGhpcy5pbnB1dC52YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfaW5pdCgpIHtcbiAgICB0aGlzLmlucHV0LnNldFZhbHVlKHRoaXMuZGF0YS5kZWZhdWx0KTtcblxuICAgIGlmICh0aGlzLmRhdGEucmVxdWlyZWQpIHtcbiAgICAgIHRoaXMuaW5wdXQuc2V0VmFsaWRhdG9ycyhWYWxpZGF0b3JzLnJlcXVpcmVkKTtcbiAgICB9XG4gIH1cbn1cbiIsIjxmcy1kaWFsb2cgbW9iaWxlTW9kZT1cImZsb2F0XCI+XG4gIDxoMiBtYXQtZGlhbG9nLXRpdGxlICpuZ0lmPVwiZGF0YS50aXRsZVwiPnt7ZGF0YS50aXRsZX19PC9oMj5cbiAgPG1hdC1kaWFsb2ctY29udGVudCB0YWJpbmRleD1cIi0xXCI+XG4gICAge3tkYXRhLnRlbXBsYXRlfX1cbiAgICA8bWF0LWZvcm0tZmllbGQ+XG4gICAgICA8aW5wdXQgbWF0SW5wdXQgZnNEYXRlUGlja2VyIFtwbGFjZWhvbGRlcl09XCJkYXRhLmxhYmVsXCIgW2Zvcm1Db250cm9sXT1cImlucHV0XCIgbmFtZT1cImlucHV0XCIgW3ZpZXddPVwicHJvbXB0VHlwZVwiPlxuXG4gICAgICA8bWF0LWhpbnQ+XG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJpbnB1dC52YWxpZCB8fCAhaW5wdXQuZGlydHk7IGVsc2UgaW52YWxpZE1lc3NhZ2VcIj5cbiAgICAgICAgICB7e2RhdGEuaGludH19XG4gICAgICAgIDwvbmctY29udGFpbmVyPlxuXG4gICAgICAgIDxuZy10ZW1wbGF0ZSAjaW52YWxpZE1lc3NhZ2U+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZXJyb3JcIj5cbiAgICAgICAgICAgIFRoaXMgZmllbGQgaXMgcmVxdWlyZWRcbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgIDwvbWF0LWhpbnQ+XG4gICAgPC9tYXQtZm9ybS1maWVsZD5cbiAgPC9tYXQtZGlhbG9nLWNvbnRlbnQ+XG5cbiAgPG1hdC1kaWFsb2ctYWN0aW9ucz5cbiAgICA8YnV0dG9uIG1hdC1idXR0b25cbiAgICAgICAgICAgICpuZ0lmPVwiZGF0YS5jb21taXRTaG93XCJcbiAgICAgICAgICAgIChjbGljayk9XCJjb21wbGV0ZSgpXCJcbiAgICAgICAgICAgIFtkaXNhYmxlZF09XCJpbnB1dC5pbnZhbGlkXCJcbiAgICAgICAgICAgIGNvbG9yPVwicHJpbWFyeVwiPlxuICAgICAge3tkYXRhLmNvbW1pdExhYmVsfX1cbiAgICA8L2J1dHRvbj5cbiAgICA8YnV0dG9uIG1hdC1idXR0b24gW21hdC1kaWFsb2ctY2xvc2VdPVwidW5kZWZpbmVkXCIgdHlwZT1cImJ1dHRvblwiICpuZ0lmPVwiZGF0YS5jYW5jZWxTaG93XCI+e3tkYXRhLmNhbmNlbExhYmVsfX08L2J1dHRvbj5cbiAgPC9tYXQtZGlhbG9nLWFjdGlvbnM+XG48L2ZzLWRpYWxvZz5cbiJdfQ==