import { Observable } from 'rxjs';
import { ConverterType } from './enums';
export function valuesConverter(values) {
    if (typeof values === 'function') {
        values = values();
    }
    if (values instanceof Observable) { // check if it Observable
        return {
            type: ConverterType.observable,
            values: values
        };
    }
    else if (!!values && (typeof values === 'object' || typeof values === 'function')
        && typeof values.then === 'function') {
        return {
            type: ConverterType.promise,
            values: values
        };
    }
    else if (Array.isArray(values)) { // check if it Array
        return {
            type: ConverterType.array,
            values: values
        };
    }
    // if we can't detect type
    return {
        type: ConverterType.array,
        values: []
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsdWVzLWNvbnZlcnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcHAvaGVscGVycy92YWx1ZXMtY29udmVydGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDbEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUV4QyxNQUFNLFVBQVUsZUFBZSxDQUFDLE1BQVc7SUFFdkMsSUFBSSxPQUFPLE1BQU0sS0FBSyxVQUFVLEVBQUU7UUFDaEMsTUFBTSxHQUFHLE1BQU0sRUFBRSxDQUFDO0tBQ25CO0lBRUQsSUFBSSxNQUFNLFlBQVksVUFBVSxFQUFFLEVBQUUseUJBQXlCO1FBQ3pELE9BQU87WUFDTCxJQUFJLEVBQUUsYUFBYSxDQUFDLFVBQVU7WUFDOUIsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFBO0tBQ0o7U0FBTSxJQUFJLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxPQUFPLE1BQU0sS0FBSyxRQUFRLElBQUksT0FBTyxNQUFNLEtBQUssVUFBVSxDQUFDO1dBQ3JFLE9BQVEsTUFBdUIsQ0FBQyxJQUFJLEtBQUssVUFBVSxFQUFFO1FBQy9ELE9BQU87WUFDTCxJQUFJLEVBQUUsYUFBYSxDQUFDLE9BQU87WUFDM0IsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFBO0tBQ0o7U0FBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxvQkFBb0I7UUFDdEQsT0FBTztZQUNMLElBQUksRUFBRSxhQUFhLENBQUMsS0FBSztZQUN6QixNQUFNLEVBQUUsTUFBTTtTQUNmLENBQUE7S0FDRjtJQUVELDBCQUEwQjtJQUMxQixPQUFPO1FBQ0wsSUFBSSxFQUFFLGFBQWEsQ0FBQyxLQUFLO1FBQ3pCLE1BQU0sRUFBRSxFQUFFO0tBQ1gsQ0FBQTtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBDb252ZXJ0ZXJUeXBlIH0gZnJvbSAnLi9lbnVtcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWx1ZXNDb252ZXJ0ZXIodmFsdWVzOiBhbnkpIHtcblxuICAgIGlmICh0eXBlb2YgdmFsdWVzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YWx1ZXMgPSB2YWx1ZXMoKTtcbiAgICB9XG5cbiAgICBpZiAodmFsdWVzIGluc3RhbmNlb2YgT2JzZXJ2YWJsZSkgeyAvLyBjaGVjayBpZiBpdCBPYnNlcnZhYmxlXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogQ29udmVydGVyVHlwZS5vYnNlcnZhYmxlLFxuICAgICAgICAgIHZhbHVlczogdmFsdWVzXG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCEhdmFsdWVzICYmICh0eXBlb2YgdmFsdWVzID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgdmFsdWVzID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgICAgJiYgdHlwZW9mICh2YWx1ZXMgYXMgUHJvbWlzZTxhbnk+KS50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogQ29udmVydGVyVHlwZS5wcm9taXNlLFxuICAgICAgICAgIHZhbHVlczogdmFsdWVzXG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVzKSkgeyAvLyBjaGVjayBpZiBpdCBBcnJheVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogQ29udmVydGVyVHlwZS5hcnJheSxcbiAgICAgICAgdmFsdWVzOiB2YWx1ZXNcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBpZiB3ZSBjYW4ndCBkZXRlY3QgdHlwZVxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBDb252ZXJ0ZXJUeXBlLmFycmF5LFxuICAgICAgdmFsdWVzOiBbXVxuICAgIH1cbiAgfVxuIl19