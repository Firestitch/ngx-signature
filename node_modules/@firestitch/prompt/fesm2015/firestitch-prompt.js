import * as i0 from '@angular/core';
import { Component, Inject, NgModule, ViewChild, ChangeDetectionStrategy, Injectable } from '@angular/core';
import * as i6 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i5 from '@angular/forms';
import { FormsModule, FormControl, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import * as i1 from '@angular/material/dialog';
import { MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';
import * as i4 from '@angular/material/button';
import { MatButtonModule } from '@angular/material/button';
import * as i2$1 from '@firestitch/dialog';
import { FsDialogModule } from '@firestitch/dialog';
import * as i2 from '@angular/platform-browser';
import * as i3 from '@firestitch/autocomplete';
import { FsAutocompleteModule } from '@firestitch/autocomplete';
import * as i3$1 from '@firestitch/autocomplete-chips';
import { FsAutocompleteChipsModule } from '@firestitch/autocomplete-chips';
import * as i3$2 from '@angular/material/form-field';
import { MatFormFieldModule } from '@angular/material/form-field';
import * as i4$1 from '@angular/material/select';
import { MatSelectModule } from '@angular/material/select';
import { Observable, throwError, of } from 'rxjs';
import * as i5$1 from '@angular/material/core';
import * as i7 from '@angular/material/input';
import { MatInputModule } from '@angular/material/input';
import * as i4$2 from '@firestitch/datepicker';
import { FsDatePickerModule } from '@firestitch/datepicker';
import { switchMap } from 'rxjs/operators';

class FsPromptConfirmComponent {
    constructor(dialogRef, sanitizer, data) {
        this.dialogRef = dialogRef;
        this.sanitizer = sanitizer;
        this.data = data;
        this.template = this.sanitizer.bypassSecurityTrustHtml(data.template);
    }
    close(button) {
        const value = button.cancel ? undefined : button.value || true;
        this.dialogRef.close(value);
    }
}
FsPromptConfirmComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptConfirmComponent, deps: [{ token: i1.MatDialogRef }, { token: i2.DomSanitizer }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });
FsPromptConfirmComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsPromptConfirmComponent, selector: "ng-component", ngImport: i0, template: "<fs-dialog mobileMode=\"float\">\n  <h2 mat-dialog-title>{{data.title}}</h2>\n  <mat-dialog-content>\n    <span [innerHtml]=\"template\"></span>\n  </mat-dialog-content>\n\n  <mat-dialog-actions>\n    <button mat-button\n            (click)=\"close(button)\"\n            type=\"button\"\n            [color]=\"button.color\"\n            [ngClass]=\"button.class\"\n            *ngFor=\"let button of data.buttons\">{{button.label}}</button>\n  </mat-dialog-actions>\n</fs-dialog>\n", styles: [".mat-form-field{display:block}.dialog-title{margin:0 0 20px;display:block}.mat-dialog-content{outline:none}\n"], components: [{ type: i2$1.FsDialogComponent, selector: "fs-dialog", inputs: ["mobileMode"] }, { type: i4.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], directives: [{ type: i1.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i1.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i1.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]" }, { type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i6.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptConfirmComponent, decorators: [{
            type: Component,
            args: [{
                    templateUrl: './prompt-confirm.component.html',
                    styleUrls: ['../../prompt.css'],
                }]
        }], ctorParameters: function () { return [{ type: i1.MatDialogRef }, { type: i2.DomSanitizer }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }]; } });

class FsPromptConfirmModule {
}
FsPromptConfirmModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptConfirmModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
FsPromptConfirmModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptConfirmModule, declarations: [FsPromptConfirmComponent], imports: [
        // Angular
        CommonModule,
        FormsModule,
        // Material
        MatDialogModule,
        MatButtonModule,
        FsDialogModule] });
FsPromptConfirmModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptConfirmModule, imports: [[
            // Angular
            CommonModule,
            FormsModule,
            // Material
            MatDialogModule,
            MatButtonModule,
            FsDialogModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptConfirmModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        // Angular
                        CommonModule,
                        FormsModule,
                        // Material
                        MatDialogModule,
                        MatButtonModule,
                        FsDialogModule
                    ],
                    entryComponents: [
                        FsPromptConfirmComponent,
                    ],
                    declarations: [
                        FsPromptConfirmComponent,
                    ],
                }]
        }] });

// THIS MODULE ONLY FOR BACKWARD COMPATIBILITY
class FsPromptModule {
    static forRoot() {
        return {
            ngModule: FsPromptModule,
            providers: []
        };
    }
}
FsPromptModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
FsPromptModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptModule, imports: [FsPromptConfirmModule], exports: [FsPromptConfirmModule] });
FsPromptModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptModule, imports: [[
            FsPromptConfirmModule,
        ], FsPromptConfirmModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        FsPromptConfirmModule,
                    ],
                    exports: [
                        FsPromptConfirmModule,
                    ],
                }]
        }] });

class FsPromptAutocompleteComponent {
    constructor(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
        this.inputControl = new FormControl('', []);
        this.loading = false;
        this.items = [];
        this.error = false;
        this.config = {
            fetchOnFocus: true,
        };
        this.fetch = (name) => {
            return this.data.values(name);
        };
        this.config = Object.assign(Object.assign({}, this.config), data.config);
    }
    modelChange(result) {
        if (result) {
            this.dialogRef.close(result.value);
        }
    }
    displayWith(value) {
        return value ? value.name : undefined;
    }
}
FsPromptAutocompleteComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptAutocompleteComponent, deps: [{ token: i1.MatDialogRef }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });
FsPromptAutocompleteComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsPromptAutocompleteComponent, selector: "fs-prompt-autocomplete", ngImport: i0, template: "<fs-dialog mobileMode=\"float\">\n  <h2 mat-dialog-title>{{data.title}}</h2>\n  <mat-dialog-content tabindex=\"-1\">\n    {{data.template}}\n    <fs-autocomplete\n        [fetch]=\"fetch\"\n        [fetchOnFocus]=\"config.fetchOnFocus\"\n        [displayWith]=\"displayWith\"\n        [(ngModel)]=\"result\"\n        [placeholder]=\"data.label\"\n        (ngModelChange)=\"modelChange($event)\"\n        [required]=\"true\"\n        name=\"result\">\n      <ng-template fsAutocompleteTemplate let-data=\"data\">\n        {{ data.name }}\n      </ng-template>\n    </fs-autocomplete>\n  </mat-dialog-content>\n\n  <mat-dialog-actions>\n    <button mat-button [mat-dialog-close]=\"undefined\" type=\"button\" *ngIf=\"data.cancelShow\">{{data.cancelLabel}}</button>\n  </mat-dialog-actions>\n</fs-dialog>\n", styles: [".mat-form-field{display:block}.dialog-title{margin:0 0 20px;display:block}.mat-dialog-content{outline:none}\n", ":host ::ng-deep .mat-form-field{width:100%}.mat-dialog-content{outline:none}\n"], components: [{ type: i2$1.FsDialogComponent, selector: "fs-dialog", inputs: ["mobileMode"] }, { type: i3.FsAutocompleteComponent, selector: "fs-autocomplete", inputs: ["fetch", "placeholder", "displayWith", "fetchOnFocus", "readonly", "required", "disabled", "hint", "panelWidth", "panelClass", "showClear"], outputs: ["cleared"] }, { type: i4.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], directives: [{ type: i1.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i1.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i5.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i3.FsAutocompleteTemplateDirective, selector: "[fsAutocompleteTemplate]" }, { type: i1.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]" }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["type", "mat-dialog-close", "aria-label", "matDialogClose"], exportAs: ["matDialogClose"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptAutocompleteComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'fs-prompt-autocomplete',
                    templateUrl: 'prompt-autocomplete.component.html',
                    styleUrls: ['../../prompt.css', 'prompt-autocomplete.component.scss'],
                }]
        }], ctorParameters: function () { return [{ type: i1.MatDialogRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }]; } });

class FsPromptAutocompleteModule {
}
FsPromptAutocompleteModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptAutocompleteModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
FsPromptAutocompleteModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptAutocompleteModule, declarations: [FsPromptAutocompleteComponent], imports: [
        // Angular
        CommonModule,
        FormsModule,
        // Material
        MatDialogModule,
        MatButtonModule,
        // Firestitch
        FsAutocompleteModule,
        FsDialogModule] });
FsPromptAutocompleteModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptAutocompleteModule, imports: [[
            // Angular
            CommonModule,
            FormsModule,
            // Material
            MatDialogModule,
            MatButtonModule,
            // Firestitch
            FsAutocompleteModule,
            FsDialogModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptAutocompleteModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        // Angular
                        CommonModule,
                        FormsModule,
                        // Material
                        MatDialogModule,
                        MatButtonModule,
                        // Firestitch
                        FsAutocompleteModule,
                        FsDialogModule
                    ],
                    entryComponents: [
                        FsPromptAutocompleteComponent,
                    ],
                    declarations: [
                        FsPromptAutocompleteComponent,
                    ],
                }]
        }] });

class FsPromptAutocompleteChipsComponent {
    constructor(_dialogRef, data) {
        this._dialogRef = _dialogRef;
        this.data = data;
        this.config = {
            default: [],
        };
        this.promptInputForm = new FormGroup({
            input: new FormControl(''),
        });
        this.fetch = (name) => {
            return this.data.values(name);
        };
        this.validateText = (name) => {
            return !this.config.allowText || this.config.validateText(name);
        };
        this.config = Object.assign(Object.assign({}, this.config), data.config);
        this.model = this.config.default;
    }
    complete() {
        const model = this.model
            .map((item) => {
            return this.config.allowText ? item : item.value;
        });
        this._dialogRef.close(model);
    }
}
FsPromptAutocompleteChipsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptAutocompleteChipsComponent, deps: [{ token: i1.MatDialogRef }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });
FsPromptAutocompleteChipsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsPromptAutocompleteChipsComponent, selector: "fs-prompt-autocomplete-chips", viewQueries: [{ propertyName: "autocomplete", first: true, predicate: ["autocomplete"], descendants: true }], ngImport: i0, template: "<fs-dialog mobileMode=\"float\">\n  <h2 mat-dialog-title>{{data.title}}</h2>\n  <mat-dialog-content tabindex=\"-1\">\n    {{data.template}}\n    <fs-autocomplete-chips\n        #autocomplete\n        [fetch]=\"fetch\"\n        [placeholder]=\"config.label\"\n        [fetchOnFocus]=\"true\"\n        [(ngModel)]=\"model\"\n        [allowText]=\"config.allowText\"\n        [allowObject]=\"!config.allowText\"\n        [validateText]=\"validateText\"\n        [required]=\"true\"\n        [multiple]=\"true\"\n        name=\"model\">\n      <ng-template fsAutocompleteChipsTemplate let-object=\"object\">\n        {{ object.name }}\n    </ng-template>\n  </fs-autocomplete-chips>\n  </mat-dialog-content>\n  <mat-dialog-actions>\n    <button mat-button\n        type=\"submit\"\n        [disabled]=\"!model.length\"\n        (click)=\"complete()\"\n        color=\"primary\">\n      {{data.commitLabel}}\n    </button>    \n    <button mat-button [mat-dialog-close]=\"undefined\" type=\"button\" *ngIf=\"data.cancelShow\">{{data.cancelLabel}}</button>\n  </mat-dialog-actions>\n</fs-dialog>", styles: [".mat-form-field{display:block}.dialog-title{margin:0 0 20px;display:block}.mat-dialog-content{outline:none}\n", ":host ::ng-deep .mat-form-field{width:100%}.mat-dialog-content{outline:none}\n"], components: [{ type: i2$1.FsDialogComponent, selector: "fs-dialog", inputs: ["mobileMode"] }, { type: i3$1.FsAutocompleteChipsComponent, selector: "fs-autocomplete-chips", inputs: ["fetch", "readonly", "size", "placeholder", "chipImage", "allowObject", "delay", "invalidTextMessage", "removable", "allowClear", "color", "background", "orderable", "limit", "initOnClick", "fetchOnFocus", "multiple", "compareWith", "panelWidth", "panelClass", "disabled", "chipBackground", "chipColor", "chipIcon", "chipIconColor", "chipClass", "hint", "allowText", "validateText"], outputs: ["selected", "removed", "reordered", "clear"] }, { type: i4.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], directives: [{ type: i1.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i1.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i5.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i3$1.FsAutocompleteObjectDirective, selector: "[fsAutocompleteObject],[fsAutocompleteChipsTemplate]" }, { type: i1.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]" }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["type", "mat-dialog-close", "aria-label", "matDialogClose"], exportAs: ["matDialogClose"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptAutocompleteChipsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'fs-prompt-autocomplete-chips',
                    templateUrl: 'prompt-autocomplete-chips.component.html',
                    styleUrls: ['../../prompt.css', 'prompt-autocomplete-chips.component.scss'],
                }]
        }], ctorParameters: function () { return [{ type: i1.MatDialogRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }]; }, propDecorators: { autocomplete: [{
                type: ViewChild,
                args: ['autocomplete']
            }] } });

class FsPromptAutocompleteChipsModule {
}
FsPromptAutocompleteChipsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptAutocompleteChipsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
FsPromptAutocompleteChipsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptAutocompleteChipsModule, declarations: [FsPromptAutocompleteChipsComponent], imports: [CommonModule,
        FormsModule,
        MatDialogModule,
        MatButtonModule,
        FsAutocompleteChipsModule,
        FsDialogModule] });
FsPromptAutocompleteChipsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptAutocompleteChipsModule, imports: [[
            CommonModule,
            FormsModule,
            MatDialogModule,
            MatButtonModule,
            FsAutocompleteChipsModule,
            FsDialogModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptAutocompleteChipsModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        MatDialogModule,
                        MatButtonModule,
                        FsAutocompleteChipsModule,
                        FsDialogModule
                    ],
                    entryComponents: [
                        FsPromptAutocompleteChipsComponent,
                    ],
                    declarations: [
                        FsPromptAutocompleteChipsComponent,
                    ],
                }]
        }] });

var PromptType;
(function (PromptType) {
    PromptType["confirm"] = "confirm";
    PromptType["input"] = "input";
    PromptType["select"] = "select";
    PromptType["autocomplete"] = "autocomplete";
    PromptType["autocompleteChips"] = "autocompleteChips";
    PromptType["date"] = "date";
    PromptType["dateTime"] = "datetime";
})(PromptType || (PromptType = {}));
var ConverterType;
(function (ConverterType) {
    ConverterType[ConverterType["observable"] = 0] = "observable";
    ConverterType[ConverterType["promise"] = 1] = "promise";
    ConverterType[ConverterType["array"] = 2] = "array";
})(ConverterType || (ConverterType = {}));

function valuesConverter(values) {
    if (typeof values === 'function') {
        values = values();
    }
    if (values instanceof Observable) { // check if it Observable
        return {
            type: ConverterType.observable,
            values: values
        };
    }
    else if (!!values && (typeof values === 'object' || typeof values === 'function')
        && typeof values.then === 'function') {
        return {
            type: ConverterType.promise,
            values: values
        };
    }
    else if (Array.isArray(values)) { // check if it Array
        return {
            type: ConverterType.array,
            values: values
        };
    }
    // if we can't detect type
    return {
        type: ConverterType.array,
        values: []
    };
}

class FsPromptSelectComponent {
    constructor(dialogRef, data, _cdRef) {
        this.dialogRef = dialogRef;
        this.data = data;
        this._cdRef = _cdRef;
        this.loading = false;
        this.items = [];
        this.error = false;
    }
    ngOnInit() {
        this.loadItems();
    }
    modelChange(e) {
        this.dialogRef.close(this.result);
    }
    loadItems() {
        const result = valuesConverter(this.data.values);
        switch (result.type) {
            case ConverterType.observable:
                {
                    this.loading = true;
                    result.values
                        .subscribe((response) => {
                        this.items = response;
                        this.loading = false;
                        this._cdRef.markForCheck();
                    }, () => {
                        this.error = true;
                        this.loading = false;
                        this._cdRef.markForCheck();
                    });
                }
                break;
            case ConverterType.promise:
                {
                    this.loading = true;
                    result.values.then((response) => {
                        this.items = response;
                        this.loading = false;
                        this._cdRef.markForCheck();
                    }, () => {
                        this.error = true;
                        this.loading = false;
                        this._cdRef.markForCheck();
                    });
                }
                break;
            case ConverterType.array:
                {
                    this.items = this.data.values;
                    this._cdRef.markForCheck();
                }
                break;
            default: {
                this.error = true;
                this._cdRef.markForCheck();
            }
        }
    }
}
FsPromptSelectComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptSelectComponent, deps: [{ token: i1.MatDialogRef }, { token: MAT_DIALOG_DATA }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
FsPromptSelectComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsPromptSelectComponent, selector: "ng-component", ngImport: i0, template: "<fs-dialog mobileMode=\"float\">\n  <h2 mat-dialog-title>{{data.title}}</h2>\n  <mat-dialog-content tabindex=\"-1\">\n    {{data.template}}\n    <mat-form-field *ngIf=\"!loading && !error\">\n      <mat-select\n        [placeholder]=\"data.label\"\n        [(ngModel)]=\"result\" name=\"select\"\n        (ngModelChange)=\"modelChange($event)\">\n        <mat-option *ngFor=\"let item of items\" [value]=\"item.value\">\n          {{ item.name }}\n        </mat-option>\n      </mat-select>\n      <mat-hint>{{data.hint}}</mat-hint>\n    </mat-form-field>\n    <ng-container *ngIf=\"loading\">Please wait...</ng-container>\n    <ng-container *ngIf=\"error\">Something went wrong. Please, try again</ng-container>\n  </mat-dialog-content>\n\n  <mat-dialog-actions>\n    <button mat-button [mat-dialog-close]=\"undefined\" type=\"button\" >{{data.cancelLabel}}</button>\n  </mat-dialog-actions>\n</fs-dialog>\n", styles: [".mat-form-field{display:block}.dialog-title{margin:0 0 20px;display:block}.mat-dialog-content{outline:none}\n"], components: [{ type: i2$1.FsDialogComponent, selector: "fs-dialog", inputs: ["mobileMode"] }, { type: i3$2.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4$1.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i5$1.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i4.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], directives: [{ type: i1.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i1.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3$2.MatHint, selector: "mat-hint", inputs: ["align", "id"] }, { type: i1.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]" }, { type: i1.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["type", "mat-dialog-close", "aria-label", "matDialogClose"], exportAs: ["matDialogClose"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptSelectComponent, decorators: [{
            type: Component,
            args: [{
                    templateUrl: 'prompt-select.component.html',
                    styleUrls: ['../../prompt.css'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.MatDialogRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }, { type: i0.ChangeDetectorRef }]; } });

class FsPromptSelectModule {
}
FsPromptSelectModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
FsPromptSelectModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptSelectModule, declarations: [FsPromptSelectComponent], imports: [
        // Angular
        CommonModule,
        FormsModule,
        // Material
        MatDialogModule,
        MatButtonModule,
        MatFormFieldModule,
        MatSelectModule,
        FsDialogModule] });
FsPromptSelectModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptSelectModule, imports: [[
            // Angular
            CommonModule,
            FormsModule,
            // Material
            MatDialogModule,
            MatButtonModule,
            MatFormFieldModule,
            MatSelectModule,
            FsDialogModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptSelectModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        // Angular
                        CommonModule,
                        FormsModule,
                        // Material
                        MatDialogModule,
                        MatButtonModule,
                        MatFormFieldModule,
                        MatSelectModule,
                        FsDialogModule
                    ],
                    entryComponents: [
                        FsPromptSelectComponent,
                    ],
                    declarations: [
                        FsPromptSelectComponent,
                    ],
                }]
        }] });

class FsPromptInputComponent {
    constructor(data, _dialogRef) {
        this.data = data;
        this._dialogRef = _dialogRef;
        this.promptInputForm = new FormGroup({
            input: new FormControl(''),
        });
    }
    get inputControl() {
        return this.promptInputForm.get('input');
    }
    ngOnInit() {
        this._init();
    }
    complete() {
        if (this.inputControl.valid) {
            this._dialogRef.close(this.inputControl.value);
        }
    }
    _init() {
        this.inputControl.setValue(this.data.default);
        if (this.data.required) {
            this.inputControl.setValidators(Validators.required);
        }
    }
}
FsPromptInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptInputComponent, deps: [{ token: MAT_DIALOG_DATA }, { token: i1.MatDialogRef }], target: i0.ɵɵFactoryTarget.Component });
FsPromptInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsPromptInputComponent, selector: "ng-component", ngImport: i0, template: "<fs-dialog mobileMode=\"float\">\n  <form [formGroup]=\"promptInputForm\">\n    <h2 mat-dialog-title *ngIf=\"data.title\">{{data.title}}</h2>\n    <mat-dialog-content tabindex=\"-1\">\n      {{data.template}}\n      <mat-form-field>\n        <input matInput [placeholder]=\"data.label\" formControlName=\"input\" name=\"input\">\n        <mat-hint>\n          <ng-container *ngIf=\"inputControl.valid || !inputControl.dirty; else invalidMessage\">\n            {{data.hint}}\n          </ng-container>\n\n          <ng-template #invalidMessage>\n            <div class=\"form-error\">\n              This field is required\n            </div>\n          </ng-template>\n        </mat-hint>\n      </mat-form-field>\n    </mat-dialog-content>\n\n    <mat-dialog-actions>\n      <button mat-button\n              type=\"submit\"\n              *ngIf=\"data.commitShow\"\n              (click)=\"complete()\"\n              [disabled]=\"inputControl.invalid\"\n              color=\"primary\">\n        {{data.commitLabel}}\n      </button>\n      <button mat-button [mat-dialog-close]=\"undefined\" type=\"button\" *ngIf=\"data.cancelShow\">{{data.cancelLabel}}</button>\n    </mat-dialog-actions>\n  </form>\n</fs-dialog>\n", styles: [".mat-form-field{display:block}.dialog-title{margin:0 0 20px;display:block}.mat-dialog-content{outline:none}\n", "\n      .form-error {\n        color: #f44336;\n      }\n    "], components: [{ type: i2$1.FsDialogComponent, selector: "fs-dialog", inputs: ["mobileMode"] }, { type: i3$2.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], directives: [{ type: i5.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i1.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i7.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["id", "disabled", "required", "type", "value", "readonly", "placeholder", "errorStateMatcher", "aria-describedby"], exportAs: ["matInput"] }, { type: i5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i3$2.MatHint, selector: "mat-hint", inputs: ["align", "id"] }, { type: i1.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]" }, { type: i1.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["type", "mat-dialog-close", "aria-label", "matDialogClose"], exportAs: ["matDialogClose"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptInputComponent, decorators: [{
            type: Component,
            args: [{
                    templateUrl: 'prompt-input.component.html',
                    styleUrls: ['../../prompt.css'],
                    styles: [
                        `
      .form-error {
        color: #f44336;
      }
    `
                    ]
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }, { type: i1.MatDialogRef }]; } });

class FsPromptInputModule {
}
FsPromptInputModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
FsPromptInputModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptInputModule, declarations: [FsPromptInputComponent], imports: [
        // Angular
        CommonModule,
        ReactiveFormsModule,
        // Material
        MatDialogModule,
        MatButtonModule,
        MatInputModule,
        FsDialogModule] });
FsPromptInputModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptInputModule, imports: [[
            // Angular
            CommonModule,
            ReactiveFormsModule,
            // Material
            MatDialogModule,
            MatButtonModule,
            MatInputModule,
            FsDialogModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptInputModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        // Angular
                        CommonModule,
                        ReactiveFormsModule,
                        // Material
                        MatDialogModule,
                        MatButtonModule,
                        MatInputModule,
                        FsDialogModule
                    ],
                    entryComponents: [
                        FsPromptInputComponent,
                    ],
                    declarations: [
                        FsPromptInputComponent,
                    ],
                }]
        }] });

class FsPromptDateComponent {
    constructor(data, _dialogRef) {
        this.data = data;
        this._dialogRef = _dialogRef;
        this.input = new FormControl('');
        this.promptType = this.data.promptType;
    }
    ngOnInit() {
        this._init();
    }
    complete() {
        if (this.input.valid) {
            this._dialogRef.close(this.input.value);
        }
    }
    _init() {
        this.input.setValue(this.data.default);
        if (this.data.required) {
            this.input.setValidators(Validators.required);
        }
    }
}
FsPromptDateComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptDateComponent, deps: [{ token: MAT_DIALOG_DATA }, { token: i1.MatDialogRef }], target: i0.ɵɵFactoryTarget.Component });
FsPromptDateComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsPromptDateComponent, selector: "ng-component", ngImport: i0, template: "<fs-dialog mobileMode=\"float\">\n  <h2 mat-dialog-title *ngIf=\"data.title\">{{data.title}}</h2>\n  <mat-dialog-content tabindex=\"-1\">\n    {{data.template}}\n    <mat-form-field>\n      <input matInput fsDatePicker [placeholder]=\"data.label\" [formControl]=\"input\" name=\"input\" [view]=\"promptType\">\n\n      <mat-hint>\n        <ng-container *ngIf=\"input.valid || !input.dirty; else invalidMessage\">\n          {{data.hint}}\n        </ng-container>\n\n        <ng-template #invalidMessage>\n          <div class=\"form-error\">\n            This field is required\n          </div>\n        </ng-template>\n      </mat-hint>\n    </mat-form-field>\n  </mat-dialog-content>\n\n  <mat-dialog-actions>\n    <button mat-button\n            *ngIf=\"data.commitShow\"\n            (click)=\"complete()\"\n            [disabled]=\"input.invalid\"\n            color=\"primary\">\n      {{data.commitLabel}}\n    </button>\n    <button mat-button [mat-dialog-close]=\"undefined\" type=\"button\" *ngIf=\"data.cancelShow\">{{data.cancelLabel}}</button>\n  </mat-dialog-actions>\n</fs-dialog>\n", styles: [".mat-form-field{display:block}.dialog-title{margin:0 0 20px;display:block}.mat-dialog-content{outline:none}\n", "\n      .form-error {\n        color: #f44336;\n      }\n    "], components: [{ type: i2$1.FsDialogComponent, selector: "fs-dialog", inputs: ["mobileMode"] }, { type: i3$2.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4$2.FsDatePickerComponent, selector: "[fsDatePicker]", inputs: ["minYear", "maxYear", "minDate", "maxDate", "startOfDay", "view", "minutes", "format"], outputs: ["change"] }, { type: i4.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i1.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i7.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["id", "disabled", "required", "type", "value", "readonly", "placeholder", "errorStateMatcher", "aria-describedby"], exportAs: ["matInput"] }, { type: i5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i3$2.MatHint, selector: "mat-hint", inputs: ["align", "id"] }, { type: i1.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]" }, { type: i1.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["type", "mat-dialog-close", "aria-label", "matDialogClose"], exportAs: ["matDialogClose"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptDateComponent, decorators: [{
            type: Component,
            args: [{
                    templateUrl: 'prompt-date.component.html',
                    styleUrls: ['../../prompt.css'],
                    styles: [
                        `
      .form-error {
        color: #f44336;
      }
    `
                    ]
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }, { type: i1.MatDialogRef }]; } });

class FsPromptDateModule {
}
FsPromptDateModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptDateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
FsPromptDateModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptDateModule, declarations: [FsPromptDateComponent], imports: [
        // Angular
        CommonModule,
        ReactiveFormsModule,
        // Material
        MatDialogModule,
        MatButtonModule,
        MatInputModule,
        FsDialogModule,
        FsDatePickerModule] });
FsPromptDateModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptDateModule, imports: [[
            // Angular
            CommonModule,
            ReactiveFormsModule,
            // Material
            MatDialogModule,
            MatButtonModule,
            MatInputModule,
            FsDialogModule,
            FsDatePickerModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPromptDateModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        // Angular
                        CommonModule,
                        ReactiveFormsModule,
                        // Material
                        MatDialogModule,
                        MatButtonModule,
                        MatInputModule,
                        FsDialogModule,
                        FsDatePickerModule,
                    ],
                    entryComponents: [
                        FsPromptDateComponent,
                    ],
                    declarations: [
                        FsPromptDateComponent,
                    ],
                }]
        }] });

class FsPromptConfig {
    constructor(config, promptType) {
        this.config = config;
        this.promptType = promptType;
        this.title = '';
        this.template = '';
        this.hint = '';
        this.label = '';
        this.class = '';
        this.commitLabel = 'Ok';
        this.cancelLabel = 'Cancel';
        this.commitShow = true;
        this.cancelShow = true;
        this.autofocus = true;
        this.buttons = [];
        this.values = [];
        this._defaultDialogConfig = {
            width: '500px',
            height: 'auto'
        };
        this.type = promptType;
        this.applyConfig(config);
        this.applyDialogConfig(config);
    }
    get dialogConfig() {
        const config = Object.assign({}, this._dialogConfig);
        config.data = this;
        return config;
    }
    set dialogConfig(value) {
        this._dialogConfig = value;
    }
    addDefaultPanelClasses(type) {
        // FIXME replace this with FsUtil or something else
        if (typeof this._dialogConfig.panelClass === 'string' || this._dialogConfig.panelClass instanceof String) {
            this._dialogConfig.panelClass = this._dialogConfig.panelClass.split(' ');
        }
        if (!Array.isArray(this._dialogConfig.panelClass)) {
            this._dialogConfig.panelClass = [];
        }
        this._dialogConfig.panelClass.push('fs-prompt', 'fs-prompt-' + type);
    }
    applyConfig(config) {
        Object.assign(this, config);
    }
    applyDialogConfig(config) {
        const inputDialogConfig = config.dialogConfig;
        // Previously let's assign default config
        this._dialogConfig = Object.assign(Object.assign({}, this._defaultDialogConfig), { autoFocus: this.autofocus });
        // Then assign passed config
        if (inputDialogConfig) {
            Object.assign(this._dialogConfig, inputDialogConfig);
        }
        // Assign panel class (class for modal container) only if we don't have this class in modal options
        if (config.class) {
            this._dialogConfig.panelClass = config.class;
        }
    }
}

class FsPromptConfirmConfig extends FsPromptConfig {
    applyConfig(config) {
        super.applyConfig(config);
        if (!config.title) {
            config.title = 'Confirm';
        }
        if (!config.class) {
            config.class = 'fs-modal-confirm';
        }
        if (!this.buttons.length) {
            if (this.commitShow) {
                this.buttons.push({
                    label: this.commitLabel,
                    color: 'primary'
                });
            }
            if (this.cancelShow) {
                this.buttons.push({
                    label: this.cancelLabel,
                    cancel: true,
                    color: ''
                });
            }
        }
    }
    applyDialogConfig(config) {
        super.applyDialogConfig(config);
        const inputDialogConfig = config.dialogConfig;
        // Confrim has small width by default than other types
        if (!inputDialogConfig || inputDialogConfig.width === void 0) {
            this._dialogConfig.width = '250px';
        }
    }
}

class FsPrompt {
    constructor(dialog) {
        this.dialog = dialog;
    }
    /**
     * Open confirmation window and return close observable
     */
    confirm(config = {}) {
        const openConfig = new FsPromptConfirmConfig(config, PromptType.confirm);
        return this.open(openConfig);
    }
    /**
     * Open window with input field for filling
     */
    input(config = {}) {
        const openConfig = new FsPromptConfig(config, PromptType.input);
        return this.open(openConfig);
    }
    /**
     * Open modal with list
     */
    select(config = {}) {
        const openConfig = new FsPromptConfig(config, PromptType.select);
        return this.open(openConfig);
    }
    /**
     * Open modal with autocomplete
     */
    autocomplete(config = {}) {
        const openConfig = new FsPromptConfig(config, PromptType.autocomplete);
        return this.open(openConfig);
    }
    /**
     * Open modal with autocomplete chips
     */
    autocompleteChips(config = {}) {
        const openConfig = new FsPromptConfig(config, PromptType.autocompleteChips);
        return this.open(openConfig);
    }
    /**
     * Open modal with list
     */
    dateTime(config = {}) {
        config.autofocus = false;
        const openConfig = new FsPromptConfig(config, PromptType.dateTime);
        return this.open(openConfig);
    }
    /**
     * Open modal with list
     */
    date(config = {}) {
        config.autofocus = false;
        const openConfig = new FsPromptConfig(config, PromptType.date);
        return this.open(openConfig);
    }
    /**
     * Open modal dialog depends from type
     */
    open(config) {
        // Default classes for modal
        config.addDefaultPanelClasses(config.type);
        switch (config.type) {
            case PromptType.confirm: {
                return this.dialog
                    .open(FsPromptConfirmComponent, config.dialogConfig)
                    .afterClosed()
                    .pipe(switchMap((value) => value === undefined ? throwError('error') : of(value)));
            }
            case PromptType.input: {
                return this.dialog.open(FsPromptInputComponent, config.dialogConfig)
                    .afterClosed()
                    .pipe(switchMap((value) => value === undefined ? throwError('error') : of(value)));
            }
            case PromptType.select: {
                return this.dialog.open(FsPromptSelectComponent, config.dialogConfig)
                    .afterClosed()
                    .pipe(switchMap((value) => value === undefined ? throwError('error') : of(value)));
            }
            case PromptType.autocomplete: {
                return this.dialog.open(FsPromptAutocompleteComponent, config.dialogConfig)
                    .afterClosed()
                    .pipe(switchMap((value) => value === undefined ? throwError('error') : of(value)));
            }
            case PromptType.autocompleteChips: {
                return this.dialog.open(FsPromptAutocompleteChipsComponent, config.dialogConfig)
                    .afterClosed()
                    .pipe(switchMap((value) => value === undefined ? throwError('error') : of(value)));
            }
            case PromptType.date:
            case PromptType.dateTime: {
                return this.dialog.open(FsPromptDateComponent, config.dialogConfig)
                    .afterClosed()
                    .pipe(switchMap((value) => value === undefined ? throwError('error') : of(value)));
            }
            default: return throwError('Erorr');
        }
    }
}
FsPrompt.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPrompt, deps: [{ token: i1.MatDialog }], target: i0.ɵɵFactoryTarget.Injectable });
FsPrompt.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPrompt, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPrompt, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.MatDialog }]; } });

/*
 * Public API Surface of fs-menu
 */

/**
 * Generated bundle index. Do not edit.
 */

export { FsPrompt, FsPromptAutocompleteChipsModule, FsPromptAutocompleteModule, FsPromptConfig, FsPromptConfirmConfig, FsPromptConfirmModule, FsPromptDateModule, FsPromptInputModule, FsPromptModule, FsPromptSelectModule };
//# sourceMappingURL=firestitch-prompt.js.map
