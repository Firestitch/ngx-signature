import { ChangeDetectorRef, ElementRef, OnDestroy, OnInit, TemplateRef, QueryList, EventEmitter } from '@angular/core';
import { ControlValueAccessor, NgModel } from '@angular/forms';
import { MatAutocompleteTrigger, MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';
import { FsAutocompleteTemplateDirective } from '../../directives/autocomplete-template/autocomplete-template.directive';
import { FsAutocompleteSuffixDirective } from '../../directives/autocomplete-suffix/autocomplete-suffix.directive';
import { FsAutocompleteStaticDirective } from '../../directives/autocomplete-static/autocomplete-static.directive';
import { FsAutocompleteNoResultsDirective } from '../../directives/no-results-template/no-results-template.directive';
import { FsAutocompleteHintDirective } from '../../directives/autocomplete-hint/autocomplete-hint.directive';
import * as i0 from "@angular/core";
export declare class FsAutocompleteComponent implements ControlValueAccessor, OnInit, OnDestroy {
    private _cdRef;
    autocomplete: MatAutocompleteTrigger;
    template: TemplateRef<FsAutocompleteTemplateDirective>;
    staticTemplates: FsAutocompleteStaticDirective[];
    staticDirectives: QueryList<FsAutocompleteStaticDirective>;
    noResultsTemplate: TemplateRef<FsAutocompleteNoResultsDirective>[];
    suffix: TemplateRef<FsAutocompleteSuffixDirective>;
    hintTemplate: TemplateRef<FsAutocompleteHintDirective>;
    formWrapper: boolean;
    keywordInput: ElementRef;
    keywordNgModel: NgModel;
    fetch: Function;
    placeholder: string;
    displayWith: Function;
    fetchOnFocus: boolean;
    readonly: boolean;
    required: boolean;
    disabled: boolean;
    hint: string;
    panelWidth: string | number;
    set setPanelClass(value: any);
    set showClear(value: boolean);
    get showClear(): boolean;
    cleared: EventEmitter<any>;
    data: any[];
    keyword: string;
    panelClasses: string[];
    noResults: boolean;
    name: string;
    model: any;
    searching: boolean;
    private _showClear;
    private _destroy$;
    private _keyword$;
    private _ignoreKeys;
    private _onTouched;
    private _onChange;
    registerOnChange(fn: (value: any) => any): void;
    registerOnTouched(fn: () => any): void;
    constructor(_cdRef: ChangeDetectorRef);
    ngOnInit(): void;
    load(): void;
    focus(): void;
    inputFocus(e: KeyboardEvent): void;
    inputBlur(): void;
    display: (data: any) => any;
    select(value: any): void;
    optionSelected(event: MatAutocompleteSelectedEvent): void;
    close(): void;
    writeValue(value: any): void;
    setDisabledState(isDisabled: boolean): void;
    input(event: any): void;
    keyDown(event: KeyboardEvent): void;
    keyUp(event: any): void;
    staticSelect(index: any): void;
    ngOnDestroy(): void;
    clearResults(closePanel?: boolean): void;
    clear(closePanel?: boolean): void;
    clearKeyword(): void;
    clearClick(event: KeyboardEvent): void;
    private _updateKeywordDisplay;
    private _getKeyword;
    private _isMacOS;
    private _isWindows;
    static ɵfac: i0.ɵɵFactoryDeclaration<FsAutocompleteComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<FsAutocompleteComponent, "fs-autocomplete", never, { "fetch": "fetch"; "placeholder": "placeholder"; "displayWith": "displayWith"; "fetchOnFocus": "fetchOnFocus"; "readonly": "readonly"; "required": "required"; "disabled": "disabled"; "hint": "hint"; "panelWidth": "panelWidth"; "setPanelClass": "panelClass"; "showClear": "showClear"; }, { "cleared": "cleared"; }, ["template", "noResultsTemplate", "suffix", "hintTemplate", "staticTemplates", "staticDirectives"], never>;
}
