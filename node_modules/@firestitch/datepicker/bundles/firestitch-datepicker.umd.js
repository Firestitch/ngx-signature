(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('@angular/material/button'), require('@angular/material/icon'), require('@angular/material/menu'), require('@angular/material/select'), require('@angular/material/tabs'), require('@angular/cdk/layout'), require('@firestitch/clear'), require('@firestitch/scroll-picker'), require('date-fns'), require('@angular/cdk/portal'), require('@angular/cdk/overlay'), require('rxjs'), require('rxjs/operators'), require('@angular/material/bottom-sheet'), require('@angular/cdk/scrolling'), require('@angular/cdk/collections'), require('@firestitch/date'), require('@angular/material/list'), require('lodash-es'), require('date-fns-tz'), require('parse-messy-time'), require('@angular/material/form-field')) :
    typeof define === 'function' && define.amd ? define('@firestitch/datepicker', ['exports', '@angular/core', '@angular/common', '@angular/forms', '@angular/material/button', '@angular/material/icon', '@angular/material/menu', '@angular/material/select', '@angular/material/tabs', '@angular/cdk/layout', '@firestitch/clear', '@firestitch/scroll-picker', 'date-fns', '@angular/cdk/portal', '@angular/cdk/overlay', 'rxjs', 'rxjs/operators', '@angular/material/bottom-sheet', '@angular/cdk/scrolling', '@angular/cdk/collections', '@firestitch/date', '@angular/material/list', 'lodash-es', 'date-fns-tz', 'parse-messy-time', '@angular/material/form-field'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.firestitch = global.firestitch || {}, global.firestitch.datepicker = {}), global.ng.core, global.ng.common, global.ng.forms, global.ng.material.button, global.ng.material.icon, global.ng.material.menu, global.ng.material.select, global.ng.material.tabs, global.ng.cdk.layout, global.i1$7, global.i1$5, global.dateFns, global.ng.cdk.portal, global.ng.cdk.overlay, global.rxjs, global.rxjs.operators, global.ng.material.bottomSheet, global.ng.cdk.scrolling, global.ng.cdk.collections, global.i3, global.ng.material.list, global.lodashEs, global.dateFnsTz, global.parseMessyDate, global.ng.material.formField));
})(this, (function (exports, i0, i1, i2, i4$1, i1$1, menu, select, i1$3, i2$1, i1$7, i1$5, dateFns, portal, i1$4, rxjs, operators, i1$2, i4, collections, i3, i5, lodashEs, dateFnsTz, parseMessyDate, i1$6) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i4__namespace$1 = /*#__PURE__*/_interopNamespace(i4$1);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i1__namespace$3 = /*#__PURE__*/_interopNamespace(i1$3);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i1__namespace$7 = /*#__PURE__*/_interopNamespace(i1$7);
    var i1__namespace$4 = /*#__PURE__*/_interopNamespace(i1$5);
    var i1__namespace$5 = /*#__PURE__*/_interopNamespace(i1$4);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var parseMessyDate__namespace = /*#__PURE__*/_interopNamespace(parseMessyDate);
    var i1__namespace$6 = /*#__PURE__*/_interopNamespace(i1$6);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    function getStartDayDate() {
        return dateFns.startOfDay(new Date());
    }

    function splitDateByComponents(date) {
        if (date && dateFns.isValid(date) && dateFns.isDate(date)) {
            return {
                date: dateFns.lightFormat(date, 'yyyy-MM-dd'),
                hour: date.getHours(),
                minute: date.getMinutes(),
                year: date.getFullYear(),
                month: date.getMonth(),
                day: date.getDate(),
            };
        }
        else {
            return {
                date: null,
                hour: null,
                minute: null,
                year: null,
                month: null,
                day: null,
            };
        }
    }

    var WEEKDAYS = [
        'Sun',
        'Mon',
        'Tues',
        'Wed',
        'Thurs',
        'Fri',
        'Sat',
    ];

    function isRangeDisabled(disabledDays, start, end) {
        if (!disabledDays || !disabledDays.length) {
            return false;
        }
        for (var i = 0; i < disabledDays.length; i++) {
            var value = disabledDays[i];
            var startDay = dateFns.startOfDay(value[0]);
            var endDay = dateFns.endOfDay(value[1]);
            var startDayIntersectWithDisabled = dateFns.isWithinInterval(start, { start: startDay, end: endDay })
                || dateFns.lightFormat(start, 'yyyy-MM-dd') === dateFns.lightFormat(value[0], 'yyyy-MM-dd');
            var endDayIntersectWithDisabled = dateFns.isWithinInterval(end, { start: startDay, end: endDay })
                || dateFns.lightFormat(end, 'yyyy-MM-dd') === dateFns.lightFormat(value[1], 'yyyy-MM-dd');
            if (startDayIntersectWithDisabled && endDayIntersectWithDisabled) {
                return true;
            }
        }
        return false;
    }

    function isDayDisabled(disabledDays, date) {
        var startDay = dateFns.startOfDay(date);
        var endDay = dateFns.endOfDay(date);
        return isRangeDisabled(disabledDays, startDay, endDay);
    }

    var Week = /** @class */ (function () {
        function Week(_dateStart, _seedDate, _periodWeeks) {
            this._dateStart = _dateStart;
            this._seedDate = _seedDate;
            this._periodWeeks = _periodWeeks;
            this.days = [];
            this.firstWeekInPeriod = false;
            this.lastWeekInPeriod = false;
            this._periodVisible = false;
            if (this._seedDate && this._periodWeeks) {
                this.periodId = this._getPeriodId();
            }
            this._dateEnd = dateFns.addWeeks(this._dateStart, 1);
        }
        Object.defineProperty(Week.prototype, "dateStart", {
            get: function () {
                return this._dateStart;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Week.prototype, "dateEnd", {
            get: function () {
                return this._dateEnd;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Week.prototype, "periodLableVisible", {
            get: function () {
                return this._periodVisible;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Add related day
         * @param day
         */
        Week.prototype.addDay = function (day) {
            this.days.push(day);
        };
        /**
         * Add related period
         * @param period
         */
        Week.prototype.addPeriod = function (period) {
            this.period = period;
        };
        /**
         * Set visibility for period label
         * @param flag
         */
        Week.prototype.setPeriodVisibility = function (flag) {
            this._periodVisible = flag;
        };
        /**
         * To be able to draw borders for week
         */
        Week.prototype.markAsFirstVisiblePeriodWeek = function () {
            this.firstWeekInPeriod = true;
        };
        Week.prototype.markAsLastVisiblePeriodWeek = function () {
            this.lastWeekInPeriod = true;
        };
        /**
         * Calculate period ID based on week date start and seed date
         */
        Week.prototype._getPeriodId = function () {
            /**
             * If week date start before seed date
             */
            if (dateFns.isBefore(this._dateStart, this._seedDate)) {
                var diffInYears = dateFns.differenceInYears(this._dateStart, this._seedDate);
                var diffInCalendarYears = dateFns.differenceInCalendarYears(this._dateStart, this._seedDate);
                var seedDate = new Date(this._seedDate);
                /**
                 * Check if week date start includes seed date
                 */
                var sameWeek = dateFns.isSameWeek(this._dateStart, dateFns.addYears(seedDate, diffInYears), { weekStartsOn: this._seedDate.getDay() });
                if (sameWeek) {
                    seedDate.setFullYear(seedDate.getFullYear() + (diffInYears || -1));
                }
                else {
                    seedDate.setFullYear(seedDate.getFullYear() + (diffInCalendarYears || -1));
                }
                var weeksDiff = dateFns.differenceInCalendarWeeks(this._dateStart, seedDate, { weekStartsOn: this._seedDate.getDay() }) / this._periodWeeks;
                // Sometimes weeksDiff can be integer and we use +0.1 for easy round
                return Math.ceil(weeksDiff + 0.1);
            }
            else {
                var diffInYears = dateFns.differenceInYears(dateFns.addWeeks(this._dateStart, 1), this._seedDate);
                var seedDate = new Date(this._seedDate);
                seedDate.setFullYear(seedDate.getFullYear() + diffInYears);
                var weeksDiff = dateFns.differenceInCalendarWeeks(this._dateStart, seedDate, { weekStartsOn: this._seedDate.getDay() }) / this._periodWeeks;
                // Sometimes weeksDiff can be integer and we use +0.1 for easy round
                return Math.ceil(weeksDiff + 0.1);
            }
        };
        return Week;
    }());

    var Period = /** @class */ (function () {
        function Period(periodId, startDate, seedDate, periodWeeks, _selected) {
            if (_selected === void 0) { _selected = false; }
            this.periodId = periodId;
            this.startDate = startDate;
            this.seedDate = seedDate;
            this.periodWeeks = periodWeeks;
            this._selected = _selected;
            this.mouseOver = false;
            this._weeks = [];
            this._countOfWeeks = 0;
            this._updatePeriodInterval();
        }
        Object.defineProperty(Period.prototype, "countOfWeeks", {
            get: function () {
                return this._countOfWeeks;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Period.prototype, "selected", {
            get: function () {
                return this._selected;
            },
            set: function (value) {
                this._selected = value;
                this._weeks.forEach(function (week) {
                    week.days.forEach(function (day) {
                        day.selected = value;
                    });
                });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Period.prototype, "from", {
            get: function () {
                return this._from;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Period.prototype, "to", {
            get: function () {
                return this._to;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Period.prototype, "year", {
            get: function () {
                return this._year;
            },
            set: function (value) {
                this._year = value;
            },
            enumerable: false,
            configurable: true
        });
        Period.prototype.addWeek = function (week) {
            this._weeks.push(week);
            if (this.seedDate && this.periodWeeks) {
                this._sortWeeks();
                if (this._weeks.length === 1) {
                    week.setPeriodVisibility(true);
                }
            }
            this._countOfWeeks = this._weeks.length;
        };
        /**
         * Mark weeks with special flags to be able to draw borders
         */
        Period.prototype.markFirstLastWeeks = function () {
            var firstWeek = this._weeks[0];
            var lastWeek = this._weeks[this._weeks.length - 1];
            firstWeek.markAsFirstVisiblePeriodWeek();
            lastWeek.markAsLastVisiblePeriodWeek();
        };
        Period.prototype._sortWeeks = function () {
            this._weeks.sort(function (a, b) {
                if (a.dateStart < b.dateStart) {
                    return -1;
                }
                else if (a.dateStart > b.dateStart) {
                    return 1;
                }
                else {
                    return 0;
                }
            });
        };
        /**
         * Calc from, to, year params based on period date start
         */
        Period.prototype._updatePeriodInterval = function () {
            var diffInCalendarYears = dateFns.differenceInCalendarYears(this.startDate, this.seedDate);
            var seedDate = new Date(this.seedDate);
            seedDate.setFullYear(seedDate.getFullYear() + diffInCalendarYears);
            var offsetFromSeedDate = (this.periodWeeks * (this.periodId - 1));
            this._from = dateFns.addWeeks(seedDate, offsetFromSeedDate);
            this._to = dateFns.addWeeks(this._from, this.periodWeeks);
            this._year = this._from.getFullYear();
        };
        return Period;
    }());

    var CALENDAR_DAYS_NUMBER = 42;
    var Month = /** @class */ (function () {
        function Month(date, seedDate, periodWeeks, _disabledDays, _hideExtraDays) {
            this.date = date;
            this.seedDate = seedDate;
            this.periodWeeks = periodWeeks;
            this._disabledDays = _disabledDays;
            this._hideExtraDays = _hideExtraDays;
            this.weeks = [];
            this._initMonth(date);
            if (this.seedDate && this.periodWeeks) {
                this._seedDay = seedDate.getDay();
                this._countTotalDaysInMonth(this._seedDay);
            }
            else {
                this._countTotalDaysInMonth(0);
            }
        }
        Object.defineProperty(Month.prototype, "seedDay", {
            get: function () {
                return this._seedDay;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Render days and weeks
         */
        Month.prototype.renderDays = function () {
            var currentDate = dateFns.subDays(this.date, this._prevMonthDaysCount);
            var daysToBeRendered = this._hideExtraDays
                ? dateFns.getDaysInMonth(this.date) + this._prevMonthDaysCount
                : CALENDAR_DAYS_NUMBER;
            // only for week mode in mobile view!
            if (this._hideExtraDays && this.periodWeeks) {
                daysToBeRendered += 7 - (daysToBeRendered % 7);
            }
            var week;
            for (var d = 0; d < daysToBeRendered; d++) {
                var dayNumber = dateFns.lightFormat(currentDate, 'd');
                if (d % 7 == 0) {
                    week = new Week(currentDate, this.seedDate, this.periodWeeks);
                    this.weeks.push(week);
                }
                var dayMuted = d - this._prevMonthDaysCount < 0
                    || d >= this._daysInMonth + this._prevMonthDaysCount;
                week.addDay({
                    mute: dayMuted,
                    date: dateFns.lightFormat(currentDate, 'yyyy-MM-dd'),
                    number: dayNumber,
                    month: currentDate.getMonth(),
                    year: currentDate.getFullYear(),
                    disabled: isDayDisabled(this._disabledDays, currentDate),
                });
                currentDate = dateFns.addDays(currentDate, 1);
            }
            if (this.seedDate && this.periodWeeks) {
                this._groupWeeks();
                this._markFirstAndLastWeeks();
            }
        };
        Month.prototype.getPeriodById = function (id) {
            if (!this.weeksByPeriod.has(id)) {
                return false;
            }
            return this.weeksByPeriod.get(id);
        };
        /**
         * Input period means that instance of period is not same instance
         * that was created for month.
         * It means that period and weeksByPeriod can have same periodIds but different object refs
         * @param period
         */
        Month.prototype.updateSelectionForPeriod = function (period) {
            var p = this.getPeriodById(period.periodId);
            if (p && p.year === period.year) {
                p.selected = period.selected;
                return p;
            }
            else {
                return false;
            }
        };
        /**
         * Init base month field
         * @param date
         */
        Month.prototype._initMonth = function (date) {
            this.date = new Date(date);
            this.date.setDate(1);
            this._monthStartDay = this.date.getDay();
            this._daysInMonth = dateFns.getDaysInMonth(this.date);
            this.name = dateFns.format(this.date, 'MMMM');
            this.number = this.date.getMonth();
            this.year = this.date.getFullYear();
            this.monthAndYear = this.date.getFullYear() + "-" + this.date.getMonth();
            this.months = [{ name: dateFns.format(this.date, 'MMMM'), value: this.date.getMonth() }];
            this.years = [this.date.getFullYear()];
        };
        /**
         * Depends on week day start it counts total number of days in month
         * @param seedDay
         */
        Month.prototype._countTotalDaysInMonth = function (seedDay) {
            if (this._monthStartDay >= seedDay) {
                this._prevMonthDaysCount = this._monthStartDay - seedDay;
            }
            else {
                this._prevMonthDaysCount = 7 - (seedDay - this._monthStartDay);
            }
            // const totalDays = this._daysInMonth + this._prevMonthDaysCount;
            // this._totalDaysInMonth = Math.ceil(totalDays / 7) * 7;
        };
        /**
         * Just for easy usage
         */
        Month.prototype._groupWeeks = function () {
            var _this = this;
            this.weeksByPeriod = new Map();
            this.weeks.forEach(function (week) {
                if (!_this.weeksByPeriod.has(week.periodId)) {
                    var newPeriod = new Period(week.periodId, week.dateStart, _this.seedDate, _this.periodWeeks);
                    _this.weeksByPeriod.set(week.periodId, newPeriod);
                }
                var period = _this.weeksByPeriod
                    .get(week.periodId);
                period.addWeek(week);
                week.addPeriod(period);
            });
        };
        Month.prototype._markFirstAndLastWeeks = function () {
            this.weeksByPeriod.forEach(function (period) {
                period.markFirstLastWeeks();
            });
        };
        return Month;
    }());

    var FsDatePickerCalendarComponent = /** @class */ (function () {
        function FsDatePickerCalendarComponent(element) {
            this.element = element;
            this.date = null;
            this.period = null;
            this.rangeFrom = null;
            this.rangeTo = null;
            this.highlightStartDate = null;
            this.highlightEndDate = null;
            this.dateMode = null;
            this.disabledDays = null;
            this.drawMonth = null;
            this.hideExtraDays = false;
            this.change = new i0.EventEmitter();
            this.rangeChange = new i0.EventEmitter();
            this.periodChange = new i0.EventEmitter();
            this.hoverDay = new i0.EventEmitter();
            this.selected = {};
            this.selectedRange = {};
            this.month = null;
            this.weekDaysList = [];
            this.currentDate = new Date();
            this.today = {
                date: dateFns.format(this.currentDate, 'yyyy-MM-dd'),
                month: this.currentDate.getMonth(),
                year: this.currentDate.getFullYear()
            };
            this.highlightedRangeDays = null;
            // date | datetime | week
            this._calendarMode = 'date';
        }
        FsDatePickerCalendarComponent.prototype.ngOnInit = function () {
            this._calendarMode = this.dateMode;
            if (this.dateMode === 'week') {
                if (this.period && this.seedDate) {
                    this.selectedPeriod = new Period(this.period.period, this.period.from, this.seedDate, this.periodWeeks, true);
                    this.selectedPeriod.year = this.period.from.getFullYear();
                    var selectedPeriod = this.month.updateSelectionForPeriod(this.selectedPeriod);
                    if (selectedPeriod) {
                        this.selectedPeriod = selectedPeriod;
                    }
                }
            }
            else if (this.date) {
                this.selected = splitDateByComponents(this.date);
            }
        };
        FsDatePickerCalendarComponent.prototype.ngOnChanges = function (changes) {
            if (changes) {
                if (changes.date) {
                    this.selected = splitDateByComponents(this.date);
                    this.updateDaysHighlighted();
                }
                else if (changes.highlightStartDate || changes.highlightEndDate) {
                    this.updateDaysHighlighted();
                }
                if (changes.drawMonth) {
                    if (changes.drawMonth.currentValue) {
                        this.drawMonths(changes.drawMonth.currentValue);
                    }
                }
                if (changes.rangeFrom || changes.rangeTo) {
                    this.selectedRange = {
                        from: this.rangeFrom && dateFns.lightFormat(this.rangeFrom, 'yyyy-MM-dd') || null,
                        to: this.rangeTo && dateFns.lightFormat(this.rangeTo, 'yyyy-MM-dd') || null,
                    };
                }
            }
        };
        FsDatePickerCalendarComponent.prototype.onMouseEnterDay = function (day) {
            this.hoverDay.emit(day);
        };
        FsDatePickerCalendarComponent.prototype.mouseEnterWeek = function (week) {
            if (this.dateMode === 'week') {
                week.period.mouseOver = true;
            }
        };
        FsDatePickerCalendarComponent.prototype.mouseLeaveWeek = function (week) {
            if (this.dateMode === 'week') {
                week.period.mouseOver = false;
            }
        };
        FsDatePickerCalendarComponent.prototype.updateDaysHighlighted = function () {
            var e_1, _a;
            this.highlightedRangeDays = {
                data: {},
                min: null,
                max: null
            };
            var start = null;
            var end = null;
            if (this.highlightStartDate && this.highlightEndDate) {
                if (dateFns.isAfter(this.highlightStartDate, this.highlightEndDate)) {
                    start = this.highlightEndDate;
                    end = this.highlightStartDate;
                }
                else {
                    start = this.highlightStartDate;
                    end = this.highlightEndDate;
                }
                start = dateFns.startOfDay(start);
                end = dateFns.startOfDay(end);
                var range = Array.from(dateFns.eachDayOfInterval({ start: start, end: end }));
                if (!range.length) {
                    return;
                }
                try {
                    for (var range_1 = __values(range), range_1_1 = range_1.next(); !range_1_1.done; range_1_1 = range_1.next()) {
                        var day = range_1_1.value;
                        this.highlightedRangeDays.data[dateFns.lightFormat(day, 'yyyy-MM-dd')] = true;
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (range_1_1 && !range_1_1.done && (_a = range_1.return)) _a.call(range_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                this.highlightedRangeDays.min = dateFns.lightFormat(range[0], 'yyyy-MM-dd');
                this.highlightedRangeDays.max = dateFns.lightFormat(range[range.length - 1], 'yyyy-MM-dd');
            }
        };
        FsDatePickerCalendarComponent.prototype.createModel = function () {
            if (!this.date) {
                this.date = getStartDayDate();
            }
        };
        FsDatePickerCalendarComponent.prototype.setDate = function (date) {
            this.date = date;
            this.change.emit(date);
        };
        /**
         *
         * @param day
         * @param week
         * @param event
         */
        FsDatePickerCalendarComponent.prototype.dayClick = function (day, week, event) {
            if (this.dateMode === 'week') {
                this.selectPeriod(week.period);
            }
            else if (this.dateMode === 'monthrange') {
                this.selectMonthRange(day);
            }
            else {
                this.selectDay(day);
            }
        };
        FsDatePickerCalendarComponent.prototype.selectDay = function (day) {
            if (day.disabled) {
                return;
            }
            if (!this.date) {
                this.createModel();
            }
            var date = new Date(day.year, day.month, day.number, this.date.getHours(), this.date.getMinutes(), this.date.getSeconds());
            this.setDate(date);
        };
        FsDatePickerCalendarComponent.prototype.selectMonthRange = function (day) {
            var date = new Date(day.year, day.month, +day.number, 0, 0, 0);
            this.setDate(date);
        };
        FsDatePickerCalendarComponent.prototype.selectPeriod = function (period) {
            if (this.selectedPeriod) {
                if (this.selectedPeriod === period) {
                    this.selectedPeriod.selected = !this.selectedPeriod.selected;
                }
                else {
                    this.selectedPeriod.selected = false;
                    period.selected = true;
                    this.selectedPeriod = period;
                }
            }
            else {
                period.selected = true;
                this.selectedPeriod = period;
            }
            if (this.selectedPeriod.selected) {
                this.periodChange.emit({
                    period: this.selectedPeriod.periodId,
                    from: this.selectedPeriod.from,
                    to: this.selectedPeriod.to,
                });
            }
            else {
                this.periodChange.emit(null);
            }
        };
        FsDatePickerCalendarComponent.prototype.drawMonths = function (date) {
            this.month = this.createMonth(date);
        };
        FsDatePickerCalendarComponent.prototype.createMonth = function (date) {
            var month = new Month(date, this.seedDate, this.periodWeeks, this.disabledDays, this.hideExtraDays);
            if (this.dateMode === 'week') {
                this.weekDaysList = WEEKDAYS.map(function (_, i, arr) {
                    return arr[(i + month.seedDay) % 7];
                });
            }
            else {
                this.weekDaysList = WEEKDAYS.slice();
            }
            month.renderDays();
            if (this.dateMode === 'week' && this.selectedPeriod) {
                var selectedPeriod = month.updateSelectionForPeriod(this.selectedPeriod);
                if (selectedPeriod) {
                    this.selectedPeriod = selectedPeriod;
                }
            }
            return month;
        };
        return FsDatePickerCalendarComponent;
    }());
    FsDatePickerCalendarComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerCalendarComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FsDatePickerCalendarComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDatePickerCalendarComponent, selector: "fs-date-picker-calendar", inputs: { date: "date", period: "period", rangeFrom: "rangeFrom", rangeTo: "rangeTo", highlightStartDate: "highlightStartDate", highlightEndDate: "highlightEndDate", dateMode: "dateMode", disabledDays: "disabledDays", drawMonth: "drawMonth", seedDate: "seedDate", periodWeeks: "periodWeeks", hideExtraDays: "hideExtraDays" }, outputs: { change: "change", rangeChange: "rangeChange", periodChange: "periodChange", hoverDay: "hoverDay" }, host: { classAttribute: "fs-date-picker-calendar" }, usesOnChanges: true, ngImport: i0__namespace, template: "<table\n  [class.month-range]=\"dateMode === 'monthrange'\"\n  [class.range-selected]=\"!!selectedRange.from && !!selectedRange.to\">\n  <thead>\n    <tr>\n      <th *ngIf=\"seedDate && periodWeeks\">#</th>\n      <th *ngFor=\"let wd of weekDaysList\">{{wd}}</th>\n    </tr>\n  </thead>\n\n  <tbody class=\"calendar calendar-{{ month.monthAndYear }}\" >\n    <ng-container *ngFor=\"let week of month.weeks\">\n      <tr class=\"week\"\n          [class.first-period-week]=\"week.firstWeekInPeriod\"\n          [class.last-period-week]=\"week.lastWeekInPeriod\"\n          [class.hover]=\"week.period?.mouseOver\"\n          (mouseenter)=\"mouseEnterWeek(week)\"\n          (mouseleave)=\"mouseLeaveWeek(week)\"\n      >\n        <ng-container *ngIf=\"week.periodLableVisible\">\n          <td class=\"period\"\n              [rowSpan]=\"week.period.countOfWeeks\"\n              [class.selected]=\"week.period.selected\"\n              (click)=\"selectPeriod(week.period)\">\n            {{ week.period.periodId }}\n          </td>\n        </ng-container>\n\n        <ng-container *ngFor=\"let day of week.days\">\n          <td class=\"tile day\"\n              [class.hidden-day]=\"hideExtraDays && day.mute\"\n              [class.now]=\"today.date == day.date\"\n              [class.mute]=\"day.mute\"\n              [class.selected]=\"(day.selected || day.date == selected.date && !day.mute)\"\n              [class.range-from]=\"day.date === selectedRange.from && !day.mute && selectedRange.from !== selectedRange.to\"\n              [class.range-to]=\"day.date === selectedRange.to && !day.mute && selectedRange.from !== selectedRange.to\"\n              [class.same-range-dates]=\"(hideExtraDays && !day.mute) && selectedRange.from === day.date && selectedRange.from === selectedRange.to\"\n              [class.highlighted]=\"!day.disabled && !day.mute && !!highlightedRangeDays.data[day.date]\"\n              [class.highlight-min-date]=\"day.date === highlightedRangeDays.min\"\n              [class.highlight-max-date]=\"day.date === highlightedRangeDays.max\"\n              [class.week-mode]=\"dateMode === 'week'\"\n              [class.disabled]=\"day.disabled\"\n              (click)=\"dayClick(day, week, $event)\"\n              (mouseenter)=\"onMouseEnterDay(day)\">\n            <div class=\"tile-content\">\n              <div class=\"tile-day-label\">\n                {{ day.number }}\n              </div>\n            </div>\n          </td>\n        </ng-container>\n      </tr>\n    </ng-container>\n\n  <!--<tr *ngIf=\"month.weeks.length < 6\">\n    <td colspan=\"7\" class=\"tile\"></td>\n  </tr>-->\n  </tbody>\n</table>\n", styles: [""], directives: [{ type: i1__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerCalendarComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'fs-date-picker-calendar',
                        templateUrl: './calendar.component.html',
                        styleUrls: ['./calendar.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: {
                            'class': 'fs-date-picker-calendar',
                        },
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { date: [{
                    type: i0.Input
                }], period: [{
                    type: i0.Input
                }], rangeFrom: [{
                    type: i0.Input
                }], rangeTo: [{
                    type: i0.Input
                }], highlightStartDate: [{
                    type: i0.Input
                }], highlightEndDate: [{
                    type: i0.Input
                }], dateMode: [{
                    type: i0.Input
                }], disabledDays: [{
                    type: i0.Input
                }], drawMonth: [{
                    type: i0.Input
                }], seedDate: [{
                    type: i0.Input
                }], periodWeeks: [{
                    type: i0.Input
                }], hideExtraDays: [{
                    type: i0.Input
                }], change: [{
                    type: i0.Output
                }], rangeChange: [{
                    type: i0.Output
                }], periodChange: [{
                    type: i0.Output
                }], hoverDay: [{
                    type: i0.Output
                }] } });

    var FsDatePickerTimeComponent = /** @class */ (function () {
        function FsDatePickerTimeComponent(element, _iterableDiffers) {
            this.element = element;
            this._iterableDiffers = _iterableDiffers;
            this.date = null;
            this.disabledMinutes = [];
            this.disabledHours = [];
            this.disabledTimes = [];
            this.expanded = false;
            this.minutes = true;
            this.showNotSelected = true;
            this.onChange = new i0.EventEmitter();
            this.selected = {};
            this.disabledTimeMinutes = {};
            this.disabledTimeHours = {};
            this.disabledGroupedMinutes = {};
            this.timeHoursCollapsed = [
                [
                    [0, 1, 2, 3],
                    [4, 5, 6, 7],
                    [8, 9, 10, 11]
                ],
                [
                    [12, 13, 14, 15],
                    [16, 17, 18, 19],
                    [20, 21, 22, 23]
                ]
            ];
            this.timeMinutesCollapsed = [
                [0, 5],
                [10, 15],
                [20, 25],
                [30, 35],
                [40, 45],
                [50, 55]
            ];
            this.timeHoursExpanded = [
                [0, 12],
                [1, 13],
                [2, 14],
                [3, 15],
                [4, 16],
                [5, 17],
                [6, 18],
                [7, 19],
                [8, 20],
                [9, 21],
                [10, 22],
                [11, 23]
            ];
            this.timeMinutesExpanded = [
                [0, 1, 2, 3, 4],
                [5, 6, 7, 8, 9],
                [10, 11, 12, 13, 14],
                [15, 16, 17, 18, 19],
                [20, 21, 22, 23, 24],
                [25, 26, 27, 28, 29],
                [30, 31, 32, 33, 34],
                [35, 36, 37, 38, 39],
                [40, 41, 42, 43, 44],
                [45, 46, 47, 48, 49],
                [50, 51, 52, 53, 54],
                [55, 56, 57, 58, 59]
            ];
            this.disabledMinutesDiffer = null;
            this.disabledHoursDiffer = null;
            this.disabledTimesDiffer = null;
            this.disabledHoursDiffer = this._iterableDiffers.find([]).create(null);
            this.disabledMinutesDiffer = this._iterableDiffers.find([]).create(null);
            this.disabledTimesDiffer = this._iterableDiffers.find([]).create(null);
        }
        FsDatePickerTimeComponent.prototype.ngOnInit = function () {
            this.checkDisabledTime();
            this.nowHour = (new Date()).getHours();
            this.nowMinute = this.minutes
                ? (new Date()).getMinutes()
                : 0;
        };
        FsDatePickerTimeComponent.prototype.ngOnChanges = function (changes) {
            if (changes && changes.date) {
                this.selected = splitDateByComponents(this.date);
                if (!this.minutes) {
                    this.selected.minute = 0;
                    if (this.date) {
                        this.date.setMinutes(0);
                    }
                }
            }
        };
        FsDatePickerTimeComponent.prototype.ngDoCheck = function () {
            if (this.disabledHoursDiffer.diff(this.disabledHours) ||
                this.disabledMinutesDiffer.diff(this.disabledMinutes) ||
                this.disabledTimesDiffer.diff(this.disabledTimes)) {
                this.checkDisabledTime();
            }
        };
        FsDatePickerTimeComponent.prototype.checkDisabledTime = function () {
            var e_1, _a, e_2, _b, e_3, _c;
            this.disabledTimeMinutes = {};
            this.disabledTimeHours = {};
            this.disabledGroupedMinutes = {};
            if (this.disabledMinutes !== undefined) {
                try {
                    for (var _d = __values(this.disabledMinutes), _e = _d.next(); !_e.done; _e = _d.next()) {
                        var range = _e.value;
                        this.addDisabledMinutes(range);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            if (this.disabledHours !== undefined) {
                try {
                    for (var _f = __values(this.disabledHours), _g = _f.next(); !_g.done; _g = _f.next()) {
                        var range = _g.value;
                        this.addDisabledHours(range);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            if (this.disabledTimes !== undefined) {
                try {
                    for (var _h = __values(this.disabledTimes), _j = _h.next(); !_j.done; _j = _h.next()) {
                        var range = _j.value;
                        var min = Math.min(range[0], range[1]);
                        var max = Math.max(range[0], range[1]);
                        var minMinutes = min % 60;
                        var maxMinutes = max % 60;
                        var minHour = Math.floor(min / 60);
                        var maxHour = Math.floor(max / 60);
                        for (var h = 0; h <= 24; h++) {
                            this.disabledGroupedMinutes[h] = {};
                            if (h > minHour && h < maxHour) {
                                this.addDisabledHours(h);
                            }
                            else if (h == minHour && !minMinutes && minHour != maxHour) {
                                this.addDisabledHours(h);
                            }
                            if (h >= minHour && h <= maxHour) {
                                for (var m = minMinutes; m < maxMinutes; m++) {
                                    var minute = h * m;
                                    if (minute >= range[0] && minute <= range[1]) {
                                        this.disabledGroupedMinutes[h][m] = true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
        };
        FsDatePickerTimeComponent.prototype.addDisabledMinutes = function (range) {
            var min = Math.min(range[0], range[1]);
            var max = Math.max(range[0], range[1]);
            if (Array.isArray(range)) {
                for (var i = min; i <= max; i++) {
                    this.disabledTimeMinutes[i] = true;
                }
            }
            else {
                this.disabledTimeMinutes[range] = true;
            }
        };
        FsDatePickerTimeComponent.prototype.addDisabledHours = function (range) {
            var min = Math.min(range[0], range[1]);
            var max = Math.max(range[0], range[1]);
            if (Array.isArray(range)) {
                for (var i = min; i <= max; i++) {
                    this.disabledTimeHours[i] = true;
                }
            }
            else {
                this.disabledTimeHours[range] = true;
            }
        };
        FsDatePickerTimeComponent.prototype.createModel = function () {
            if (!this.date) {
                this.setDate(getStartDayDate());
            }
        };
        FsDatePickerTimeComponent.prototype.setDate = function (date) {
            this.date = date;
            this.onChange.emit(date);
        };
        FsDatePickerTimeComponent.prototype.hourClick = function (hour) {
            if (this.disabledTimeHours[hour]) {
                return;
            }
            var newDate;
            if (!this.date) {
                newDate = getStartDayDate();
            }
            else {
                newDate = new Date(this.date);
            }
            newDate.setHours(hour);
            this.setDate(newDate);
        };
        FsDatePickerTimeComponent.prototype.minuteClick = function (minute) {
            if (this.disabledTimeMinutes[minute]
                || (this.disabledGroupedMinutes[this.selected.hour] && this.disabledGroupedMinutes[this.selected.hour][minute])) {
                return;
            }
            var newDate;
            if (!this.date) {
                newDate = getStartDayDate();
            }
            else {
                newDate = new Date(this.date);
            }
            newDate.setMinutes(minute);
            this.setDate(newDate);
        };
        return FsDatePickerTimeComponent;
    }());
    FsDatePickerTimeComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerTimeComponent, deps: [{ token: i0__namespace.ElementRef }, { token: i0__namespace.IterableDiffers }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FsDatePickerTimeComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDatePickerTimeComponent, selector: "fs-date-picker-time", inputs: { date: "date", disabledMinutes: "disabledMinutes", disabledHours: "disabledHours", disabledTimes: "disabledTimes", expanded: "expanded", minutes: "minutes", showNotSelected: "showNotSelected" }, outputs: { onChange: "onChange" }, usesOnChanges: true, ngImport: i0__namespace, template: "<div class=\"month-year time\" *ngIf=\"minutes && showNotSelected\">\n  <ng-container *ngIf=\"date; else noTime\">\n    {{ date | date:'h:mm aa'}}\n  </ng-container>\n  <ng-template #noTime>\n    Time Not Selected\n  </ng-template>\n</div>\n\n<div class=\"time-container\">\n  <table *ngIf=\"expanded; else contracted\">\n    <thead *ngIf=\"minutes\">\n      <tr>\n        <th class=\"hours-col\">\n          Hour\n        </th>\n        <th class=\"minutes-col\">\n          Minute\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td class=\"hours-col\">\n          <div class=\"hours-container\">\n            <table>\n              <tr *ngFor=\"let hours of timeHoursExpanded\">\n                <td\n                  *ngFor=\"let hour of hours\"\n                  class=\"tile number hour\"\n                  (click)=\"hourClick(hour)\"\n                  [ngClass]=\"{\n                    disabled: disabledTimeHours[hour],\n                    now: nowHour === hour,\n                    selected: hour == selected.hour\n                  }\">\n                  <div class=\"tile-content\">\n                    <span *ngIf=\"hour < 12\">{{ hour ? hour : 12 }}<span class=\"am-pm\">am</span></span>\n                    <span *ngIf=\"hour >= 12\">{{ hour==12 ? 12 : hour-12 }}<span class=\"am-pm\">pm</span></span>\n                  </div>\n                </td>\n              </tr>\n            </table>\n          </div>\n        </td>\n        <td class=\"minutes-col\" *ngIf=\"minutes\">\n          <div class=\"minutes-container\">\n            <table>\n              <tr *ngFor=\"let minutes of timeMinutesExpanded\">\n                <td *ngFor=\"let minute of minutes\"\n                    class=\"tile number minute\"\n                    [ngClass]=\"{\n                      disabled: disabledTimeMinutes[minute] || (disabledGroupedMinutes[selected.hour] && disabledGroupedMinutes[selected.hour][minute]),\n                      selected: minute == selected.minute,\n                      now: nowMinute === minute\n                    }\"\n                    (click)=\"minuteClick(minute)\">\n                    <div class=\"tile-content\">{{ minute }}</div>\n                </td>\n              </tr>\n            </table>\n          </div>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n\n<ng-template #contracted>\n  <table>\n    <thead *ngIf=\"minutes\">\n      <tr>\n        <th class=\"hours-col\">\n          Hour\n        </th>\n        <th class=\"minutes-col\">\n          Minute\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td class=\"hours-col\">\n          <table>\n            <tbody *ngFor=\"let group of timeHoursCollapsed; let i = index\">\n            <tr *ngFor=\"let hours of group\">\n              <td\n                *ngFor=\"let hour of hours\"\n                class=\"tile number hour\"\n                (click)=\"hourClick(hour)\"\n                [ngClass]=\"{\n                  disabled: disabledTimeHours[hour],\n                  selected: hour == selected.hour,\n                  now: nowHour === hour\n                }\">\n                <div class=\"tile-content\">\n                  <span *ngIf=\"hour < 12\">{{ hour ? hour : 12 }}<span class=\"am-pm\">am</span></span>\n                  <span *ngIf=\"hour >= 12\">{{ hour==12 ? 12 : hour-12 }}<span class=\"am-pm\">pm</span></span>\n                </div>\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </td>\n\n        <td class=\"minutes-col\" *ngIf=\"minutes\">\n          <table>\n            <tr *ngFor=\"let minutes of timeMinutesCollapsed\">\n              <td\n                *ngFor=\"let minute of minutes\"\n                class=\"tile number minute\"\n                [ngClass]=\"{\n                  disabled: disabledTimeMinutes[minute] || (disabledGroupedMinutes[selected.hour] && disabledGroupedMinutes[selected.hour][minute]),\n                  selected: minute == selected.minute,\n                  now: nowMinute === minute\n                }\"\n                  (click)=\"minuteClick(minute)\">\n                <div class=\"tile-content\">{{ minute }}</div>\n              </td>\n            </tr>\n          </table>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</ng-template>\n", styles: ["thead th{text-align:center}tbody .minutes-col,tbody .hours-col{padding:0}tbody .minutes-col{padding-left:20px}tbody .hours-container{margin-right:20px}tbody .minutes-container,tbody .hours-container{max-height:300px;overflow:auto}.time-container table{width:100%}.time-container table .am-pm{font-size:13px;padding-left:2px}\n"], directives: [{ type: i1__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "date": i1__namespace.DatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerTimeComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'fs-date-picker-time',
                        templateUrl: './time.component.html',
                        styleUrls: ['./time.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }, { type: i0__namespace.IterableDiffers }]; }, propDecorators: { date: [{
                    type: i0.Input
                }], disabledMinutes: [{
                    type: i0.Input
                }], disabledHours: [{
                    type: i0.Input
                }], disabledTimes: [{
                    type: i0.Input
                }], expanded: [{
                    type: i0.Input
                }], minutes: [{
                    type: i0.Input
                }], showNotSelected: [{
                    type: i0.Input
                }], onChange: [{
                    type: i0.Output
                }] } });

    var FsDatePickerCalendarModule = /** @class */ (function () {
        function FsDatePickerCalendarModule() {
        }
        return FsDatePickerCalendarModule;
    }());
    FsDatePickerCalendarModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerCalendarModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    FsDatePickerCalendarModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerCalendarModule, declarations: [FsDatePickerCalendarComponent,
            FsDatePickerTimeComponent], imports: [i1.CommonModule,
            i1$1.MatIconModule], exports: [FsDatePickerCalendarComponent,
            FsDatePickerTimeComponent] });
    FsDatePickerCalendarModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerCalendarModule, imports: [[
                i1.CommonModule,
                i1$1.MatIconModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerCalendarModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1.CommonModule,
                            i1$1.MatIconModule,
                        ],
                        declarations: [
                            FsDatePickerCalendarComponent,
                            FsDatePickerTimeComponent,
                        ],
                        exports: [
                            FsDatePickerCalendarComponent,
                            FsDatePickerTimeComponent,
                        ],
                    }]
            }] });

    function getYearsCycle(monthLabelHeight, weekHeight, startCycleYear) {
        // Create array of 28 years.
        // Calendar repeats every 28 years
        return Array.from({ length: 28 }, function (_, i) {
            // Create array of 12 months for every year
            return Array.from({ length: 12 }, function (__, month) {
                // Calculate total height of calendar for every month
                return monthLabelHeight + weekCount(i, month, startCycleYear) * weekHeight;
            });
        });
    }
    /**
     * Calculate total height of calendars from 0 year to lastYear
     */
    function reduceCycle(yearsCycle, lastYear, lastMonth) {
        if (lastYear === void 0) { lastYear = 28; }
        if (lastMonth === void 0) { lastMonth = 12; }
        return yearsCycle.reduce(function (total, year, yearIndex) {
            if (yearIndex <= lastYear) {
                var heightOfMonthsInYear = year.reduce(function (sum, month, monthIndex) {
                    if (yearIndex < lastYear || (yearIndex === lastYear && monthIndex < lastMonth)) {
                        sum += month;
                    }
                    return sum;
                }, 0);
                total += heightOfMonthsInYear;
            }
            return total;
        }, 0);
    }
    /**
     * Returns number of weeks for given month
     */
    function weekCount(yearCycleIndex, month, startCycleYear) {
        var firstOfMonth = new Date(yearCycleIndex + startCycleYear, month, 1);
        var lastOfMonth = new Date(yearCycleIndex + startCycleYear, month + 1, 0);
        var days = firstOfMonth.getDay() + lastOfMonth.getDate();
        return Math.ceil(days / 7);
    }

    var YEARS_TO_BE_RENDERED = 200;
    var START_CYCLE_YEAR = 1900;
    var RENDER_BUFFER = 500;
    // height of month label and week days line
    var MONTH_LABEL_HEIGHT = 78;
    // height of week row
    var WEEK_HEIGHT = 50;
    /**
     * Implementation has been taken from Alex Inkin article, adopted and modified a bit
     * https://indepth.dev/posts/1091/writing-custom-virtual-scroll-strategy
     */
    var CalendarScrollStrategy = /** @class */ (function () {
        function CalendarScrollStrategy() {
            this._index$ = new rxjs.Subject();
            this.scrolledIndexChange = this._index$.pipe(operators.distinctUntilChanged());
            this._viewport = null;
            this._firstTimeRender = true;
            this.yearsCycle = getYearsCycle(MONTH_LABEL_HEIGHT, WEEK_HEIGHT, START_CYCLE_YEAR);
            // Total height of 28 years cycle
            this.yearsCycleHeight = reduceCycle(this.yearsCycle);
        }
        CalendarScrollStrategy.prototype.attach = function (viewport) {
            this._viewport = viewport;
            // Here is "7" is number of "cycles" in years range
            // We are rendering 200 years from 1900 to 2100
            // Year calendar repeat itself every 28 years
            // 200 / 28 = 7.14
            this._viewport.setTotalContentSize(this.yearsCycleHeight * 7);
        };
        CalendarScrollStrategy.prototype.detach = function () {
            this._index$.complete();
            this._viewport = null;
        };
        CalendarScrollStrategy.prototype.onContentScrolled = function () {
            if (this._viewport) {
                this._updateRenderedRange();
            }
        };
        CalendarScrollStrategy.prototype.onDataLengthChanged = function () { };
        CalendarScrollStrategy.prototype.onContentRendered = function () { };
        CalendarScrollStrategy.prototype.onRenderedOffsetChanged = function () { };
        /**
         * Initial Date for render can be set on initialization step to reduce calculations
         */
        CalendarScrollStrategy.prototype.setInitialDate = function (date) {
            this._initialDate = date;
        };
        /**
         * Does scroll to month with provided index
         */
        CalendarScrollStrategy.prototype.scrollToIndex = function (index, behavior) {
            if (this._viewport) {
                this._viewport.scrollToOffset(this._getOffsetForIndex(index), behavior);
            }
        };
        /**
         * Does the same thing as scrollToIndex(), but for date
         */
        CalendarScrollStrategy.prototype.scrollToDate = function (date, behavior) {
            if (this._viewport) {
                this._viewport.scrollToOffset(this._getOffsetForDate(date), behavior);
            }
        };
        /**
         * Update the viewport's rendered range.
         */
        CalendarScrollStrategy.prototype._updateRenderedRange = function () {
            if (!this._viewport) {
                return;
            }
            // This is for support setInitialDate() method.
            // Should be called only once at first render
            if (this._firstTimeRender) {
                if (this._initialDate) {
                    this.scrollToDate(this._initialDate);
                }
                this._firstTimeRender = false;
            }
            var currentScrollOffset = this._viewport.measureScrollOffset();
            var _a = this._viewport.getRenderedRange(), currentStart = _a.start, currentEnd = _a.end;
            var viewportSize = this._viewport.getViewportSize();
            var dataLength = this._viewport.getDataLength();
            var firstVisibleIndex = this._getIndexForOffset(currentScrollOffset);
            // Usually we are rendering a bit more months than available in view port
            // It works when user scrolls fast, so we have a bit time to render new months while will scroll over "buffer"
            // So this is why rendered top offset is different from current scroll offset
            var topScrollBuffer = currentScrollOffset - this._getOffsetForIndex(currentStart);
            var newStart = currentStart;
            var newEnd = currentEnd;
            if (topScrollBuffer < RENDER_BUFFER && currentStart !== 0) {
                // Here we have multiplication by 2 because we want to double our render buffer
                newStart = Math.max(0, this._getIndexForOffset(currentScrollOffset - RENDER_BUFFER * 2));
                newEnd = Math.min(dataLength, this._getIndexForOffset(currentScrollOffset + viewportSize + RENDER_BUFFER));
            }
            else {
                var bottomScrollBuffer = this._getOffsetForIndex(currentEnd) - currentScrollOffset - viewportSize;
                if (bottomScrollBuffer < RENDER_BUFFER && currentEnd !== dataLength) {
                    newStart = Math.max(0, this._getIndexForOffset(currentScrollOffset - RENDER_BUFFER));
                    newEnd = Math.min(dataLength, 
                    // Here we have multiplication by 2 because we want to double our render buffer
                    this._getIndexForOffset(currentScrollOffset + viewportSize + RENDER_BUFFER * 2));
                }
            }
            this._viewport.setRenderedRange({ start: newStart, end: newEnd });
            this._viewport.setRenderedContentOffset(this._getOffsetForIndex(newStart));
            this._index$.next(firstVisibleIndex);
        };
        CalendarScrollStrategy.prototype._getOffsetForIndex = function (index) {
            var month = index % 12;
            var year = (index - month) / 12;
            return this._computeHeight(year, month);
        };
        CalendarScrollStrategy.prototype._getIndexForOffset = function (offset) {
            // the remaining number of pixels that cannot make up a complete cycle
            var remainder = offset % this.yearsCycleHeight;
            var numberOfFullCycles = (offset - remainder) / this.yearsCycleHeight;
            var years = numberOfFullCycles * 28; // years from START_CYCLE_YEAR to current offset
            var heightAccumulator = 0;
            // Cycle through every year and month in 28 year cycle
            for (var year = 0; year < this.yearsCycle.length; year++) {
                for (var month = 0; month < this.yearsCycle[year].length; month++) {
                    heightAccumulator += this.yearsCycle[year][month];
                    if (heightAccumulator - this.yearsCycle[year][month] / 2 > remainder) {
                        return Math.max((years + year) * 12 + month, 0);
                    }
                }
            }
            return YEARS_TO_BE_RENDERED;
        };
        CalendarScrollStrategy.prototype._getOffsetForDate = function (date) {
            if (!date) {
                return 0;
            }
            var year = date.getFullYear();
            var month = date.getMonth();
            var index = (year - START_CYCLE_YEAR) * 12 + month;
            return this._getOffsetForIndex(index);
        };
        // Compute height for given year and month, but year starts from 0 to YEARS_TO_BE_RENDERED
        CalendarScrollStrategy.prototype._computeHeight = function (year, month) {
            var remainder = year % 28; // number of year in cycle of 28 repeated years
            var remainderHeight = reduceCycle(this.yearsCycle, remainder, month);
            var fullCycles = (year - remainder) / 28;
            var fullCyclesHeight = fullCycles * this.yearsCycleHeight;
            return fullCyclesHeight + remainderHeight;
        };
        return CalendarScrollStrategy;
    }());
    CalendarScrollStrategy.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CalendarScrollStrategy, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CalendarScrollStrategy.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CalendarScrollStrategy });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CalendarScrollStrategy, decorators: [{
                type: i0.Injectable
            }] });

    var FsCalendarDataSource = /** @class */ (function (_super) {
        __extends(FsCalendarDataSource, _super);
        function FsCalendarDataSource() {
            var _this = _super.call(this) || this;
            _this._cachedMonths = [];
            _this._fetchedPages = new Set();
            _this._dataStream = new rxjs.BehaviorSubject(_this._cachedMonths);
            _this._subscription = new rxjs.Subscription();
            _this._prepareMonthsList();
            _this._dataStream.next(_this._cachedMonths);
            return _this;
        }
        FsCalendarDataSource.prototype.connect = function (collectionViewer) {
            var _this = this;
            var sub = collectionViewer
                .viewChange
                .subscribe(function (range) {
                for (var i = range.start; i <= range.end; i++) {
                    _this._fetchPage(i);
                }
            });
            this._subscription.add(sub);
            return this._dataStream;
        };
        FsCalendarDataSource.prototype.disconnect = function () {
            this._subscription.unsubscribe();
        };
        FsCalendarDataSource.prototype._fetchPage = function (page) {
            if (this._fetchedPages.has(page)) {
                return;
            }
            this._fetchedPages.add(page);
            var yearOffset = Math.floor(page / 12);
            var monthOffset = page % 12;
            var month = new Date(yearOffset + START_CYCLE_YEAR, monthOffset, 1);
            this._cachedMonths.splice(page, 1, month);
            this._dataStream.next(this._cachedMonths);
        };
        FsCalendarDataSource.prototype._prepareMonthsList = function () {
            this._cachedMonths = Array
                .from({ length: YEARS_TO_BE_RENDERED * 12 }, // number of rendered years multiply by number of months in year
            function (_, i) {
                return new Date(Math.floor(i / 12) + START_CYCLE_YEAR, i % 12, 1);
            });
        };
        return FsCalendarDataSource;
    }(collections.DataSource));

    var MONTHS$1 = [
        { value: 0, name: 'January', abr: 'Jan' },
        { value: 1, name: 'February', abr: 'Feb' },
        { value: 2, name: 'March', abr: 'Mar' },
        { value: 3, name: 'April', abr: 'Apr' },
        { value: 4, name: 'May', abr: 'May' },
        { value: 5, name: 'June', abr: 'June' },
        { value: 6, name: 'July', abr: 'July' },
        { value: 7, name: 'August', abr: 'Aug' },
        { value: 8, name: 'September', abr: 'Sept' },
        { value: 9, name: 'October', abr: 'Oct' },
        { value: 10, name: 'November', abr: 'Nov' },
        { value: 11, name: 'December', abr: 'Dec' }
    ];

    function isMonthDisabled(date, disabledDays) {
        var startMonth = dateFns.startOfMonth(date);
        var endMonth = dateFns.endOfMonth(date);
        return isRangeDisabled(disabledDays, startMonth, endMonth);
    }

    var FsDatePickerMobileHeaderComponent = /** @class */ (function () {
        function FsDatePickerMobileHeaderComponent(_elRef) {
            this._elRef = _elRef;
            this.monthChange = new i0.EventEmitter();
            this.yearChange = new i0.EventEmitter();
            this.goNextMonth = new i0.EventEmitter();
            this.goPrevMonth = new i0.EventEmitter();
            this.viewModeChange = new i0.EventEmitter();
            this.now = new Date();
            this.monthNow = this.now.getMonth();
            this.yearNow = this.now.getFullYear();
            this.yearsList = [];
            this.monthList = [];
        }
        Object.defineProperty(FsDatePickerMobileHeaderComponent.prototype, "calendarMonth", {
            get: function () {
                var _a;
                return (_a = this.calendarDate) === null || _a === void 0 ? void 0 : _a.getMonth();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerMobileHeaderComponent.prototype, "calendarYear", {
            get: function () {
                var _a;
                return (_a = this.calendarDate) === null || _a === void 0 ? void 0 : _a.getFullYear();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerMobileHeaderComponent.prototype, "calendarDay", {
            get: function () {
                var _a;
                return (_a = this.calendarDate) === null || _a === void 0 ? void 0 : _a.getDate();
            },
            enumerable: false,
            configurable: true
        });
        FsDatePickerMobileHeaderComponent.prototype.ngOnChanges = function (changes) {
        };
        FsDatePickerMobileHeaderComponent.prototype.ngAfterViewInit = function () {
            this._createMonthsList();
            this._createYearsList();
        };
        FsDatePickerMobileHeaderComponent.prototype.selectMonth = function (month) {
            this.monthChange.emit(month);
            this.setViewMode('date');
        };
        FsDatePickerMobileHeaderComponent.prototype.selectYear = function (year) {
            this.yearChange.emit(year);
            this.setViewMode('date');
        };
        FsDatePickerMobileHeaderComponent.prototype.setViewMode = function (mode) {
            this.viewModeChange.emit(mode);
            if (mode === 'year') {
                this._scrollToSelectedYear();
            }
        };
        FsDatePickerMobileHeaderComponent.prototype.nextMonth = function () {
            this.goNextMonth.emit();
        };
        FsDatePickerMobileHeaderComponent.prototype.prevMonth = function () {
            this.goPrevMonth.emit();
        };
        FsDatePickerMobileHeaderComponent.prototype._createYearsList = function () {
            this.yearsList = [];
            for (var y = this.minYear; y < this.maxYear; y++) {
                var year = new Date().setFullYear(y);
                this.yearsList.push({ value: y, disabled: this._isYearDisabled(year) });
            }
        };
        FsDatePickerMobileHeaderComponent.prototype._createMonthsList = function () {
            var e_1, _b;
            var year = this.calendarMonth ? this.calendarYear : this.now.getFullYear();
            var checkIfMonthDisabled = function (monthNumber, disabledDays) {
                var month = new Date();
                month.setFullYear(year);
                month.setMonth(monthNumber);
                return isMonthDisabled(month, disabledDays);
            };
            this.monthList = [];
            try {
                for (var MONTHS_1 = __values(MONTHS$1), MONTHS_1_1 = MONTHS_1.next(); !MONTHS_1_1.done; MONTHS_1_1 = MONTHS_1.next()) {
                    var item = MONTHS_1_1.value;
                    var monthItem = Object.assign(Object.assign({}, item), { disabled: checkIfMonthDisabled(item.value, this.disabledDays) });
                    this.monthList.push(monthItem);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (MONTHS_1_1 && !MONTHS_1_1.done && (_b = MONTHS_1.return)) _b.call(MONTHS_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        FsDatePickerMobileHeaderComponent.prototype._isYearDisabled = function (date) {
            var startYear = dateFns.startOfYear(date);
            var endYear = dateFns.endOfYear(date);
            return isRangeDisabled(this.disabledDays, startYear, endYear);
        };
        FsDatePickerMobileHeaderComponent.prototype._scrollToSelectedYear = function () {
            var _this = this;
            setTimeout(function () {
                var years = _this._elRef.nativeElement.querySelector('.years');
                var selected = years.querySelector('.year.selected');
                if (selected) {
                    years.scrollTop = selected.offsetTop;
                }
            }, 50);
        };
        return FsDatePickerMobileHeaderComponent;
    }());
    FsDatePickerMobileHeaderComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerMobileHeaderComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FsDatePickerMobileHeaderComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDatePickerMobileHeaderComponent, selector: "fs-date-picker-mobile-header", inputs: { viewMode: "viewMode", minYear: "minYear", maxYear: "maxYear", disabledDays: "disabledDays", calendarDate: "calendarDate" }, outputs: { monthChange: "monthChange", yearChange: "yearChange", goNextMonth: "goNextMonth", goPrevMonth: "goPrevMonth", viewModeChange: "viewModeChange" }, usesOnChanges: true, ngImport: i0__namespace, template: "<div class=\"months\" *ngIf=\"viewMode == 'month'\">\n  <div\n    *ngFor=\"let month of monthList\"\n    (click)=\"selectMonth(month.value)\"\n    class=\"month\"\n    [ngClass]=\"{\n        now: monthNow == month.value,\n        selected: calendarMonth === month.value,\n        disabled: month.disabled\n      }\">\n    <div class=\"tile-content\">{{ month.abr }}</div>\n  </div>\n</div>\n\n<div class=\"years\" *ngIf=\"viewMode == 'year'\">\n  <ng-container *ngFor=\"let year of yearsList;\">\n    <div\n      class=\"year data-year-{{ year.value }}\"\n      (click)=\"selectYear(year.value)\"\n      [class.now]=\"yearNow == year.value\"\n      [class.selected]=\"calendarYear === year.value\"\n      [class.disabled]=\"year.disabled\">\n      <div class=\"tile-content\">{{ year.value }}</div>\n    </div>\n  </ng-container>\n  <div class=\"clear\"></div>\n</div>\n", styles: [".months{width:350px}.month-year{height:auto;padding:0 15px;justify-content:center}\n"], directives: [{ type: i1__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerMobileHeaderComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'fs-date-picker-mobile-header',
                        templateUrl: './header.component.html',
                        styleUrls: [
                            './header.component.scss',
                        ],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { viewMode: [{
                    type: i0.Input
                }], minYear: [{
                    type: i0.Input
                }], maxYear: [{
                    type: i0.Input
                }], disabledDays: [{
                    type: i0.Input
                }], calendarDate: [{
                    type: i0.Input
                }], monthChange: [{
                    type: i0.Output
                }], yearChange: [{
                    type: i0.Output
                }], goNextMonth: [{
                    type: i0.Output
                }], goPrevMonth: [{
                    type: i0.Output
                }], viewModeChange: [{
                    type: i0.Output
                }] } });

    var FsDatePickerMobileHeaderMonthRangeComponent = /** @class */ (function () {
        function FsDatePickerMobileHeaderMonthRangeComponent(_elRef) {
            this._elRef = _elRef;
        }
        return FsDatePickerMobileHeaderMonthRangeComponent;
    }());
    FsDatePickerMobileHeaderMonthRangeComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerMobileHeaderMonthRangeComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FsDatePickerMobileHeaderMonthRangeComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDatePickerMobileHeaderMonthRangeComponent, selector: "fs-date-picker-mobile-header-month-range", inputs: { rangeFrom: "rangeFrom", rangeTo: "rangeTo" }, ngImport: i0__namespace, template: "<ng-container *ngIf=\"rangeFrom || rangeTo else notSelected\">\n  <ng-container *ngIf=\"rangeFrom else notSelected\">\n    {{ rangeFrom | fsDateFormat: 'day-date' }}\n  </ng-container>\n  &nbsp;\n  <ng-container *ngIf=\"rangeTo\">\n    <mat-icon>arrow_forward</mat-icon>&nbsp;\n    {{ rangeTo | fsDateFormat: 'day-date' }}\n  </ng-container>\n</ng-container>\n\n\n<ng-template #notSelected>\n  Not Selected\n</ng-template>\n", styles: [":host{display:flex;justify-content:center;align-items:center}\n"], components: [{ type: i1__namespace$1.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }], directives: [{ type: i1__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "fsDateFormat": i3__namespace.FsDateFormatPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerMobileHeaderMonthRangeComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'fs-date-picker-mobile-header-month-range',
                        templateUrl: './header-month-range.component.html',
                        styleUrls: [
                            './header-month-range.component.scss',
                        ],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { rangeFrom: [{
                    type: i0.Input
                }], rangeTo: [{
                    type: i0.Input
                }] } });

    var FsDatePickerVirtualScrollCalendarComponent = /** @class */ (function () {
        function FsDatePickerVirtualScrollCalendarComponent(_el, _bottomSheetRef, _scrollStrategy) {
            this._el = _el;
            this._bottomSheetRef = _bottomSheetRef;
            this._scrollStrategy = _scrollStrategy;
            this.autoClose = true;
            this.dataSource = new FsCalendarDataSource();
            this._destroy$ = new rxjs.Subject();
        }
        Object.defineProperty(FsDatePickerVirtualScrollCalendarComponent.prototype, "dialogRef", {
            get: function () {
                return this._dialogRef;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerVirtualScrollCalendarComponent.prototype, "rangePickerRef", {
            get: function () {
                return this.datePickerModel.rangePickerRef;
            },
            enumerable: false,
            configurable: true
        });
        FsDatePickerVirtualScrollCalendarComponent.prototype.ngOnInit = function () {
            this._scrollStrategy.setInitialDate(this.datePickerModel.model || new Date());
            this._scrollToClosestMonth();
            if (this.parentTabGroup) {
                this._listenTabIndexChange();
            }
        };
        FsDatePickerVirtualScrollCalendarComponent.prototype.ngOnChanges = function (changes) {
            var _a, _b;
            if (((_a = changes.datePickerModel) === null || _a === void 0 ? void 0 : _a.currentValue)
                && ((_b = changes.datePickerModel) === null || _b === void 0 ? void 0 : _b.firstChange)
                && this.datePickerModel.view === 'monthrange') {
                this._initMonthRangeModels();
            }
        };
        FsDatePickerVirtualScrollCalendarComponent.prototype.ngOnDestroy = function () {
            this._destroy$.next();
            this._destroy$.complete();
        };
        FsDatePickerVirtualScrollCalendarComponent.prototype.dateChanged = function (date) {
            if (this.datePickerModel.view !== 'monthrange') {
                this.datePickerModel.model = date;
                this.close();
            }
            else {
                this.monthRangeChange(date);
            }
        };
        FsDatePickerVirtualScrollCalendarComponent.prototype.monthRangeChange = function (date) {
            var rangeRef = this.rangePickerRef;
            var startDate = rangeRef.startDate, endDate = rangeRef.endDate;
            if (!startDate && !endDate) {
                rangeRef.updateStartDate(date);
            }
            else if (startDate && !endDate) {
                if (dateFns.isBefore(date, startDate)) {
                    rangeRef.updateStartDate(date);
                    rangeRef.updateEndDate(null);
                }
                else {
                    rangeRef.updateEndDate(date);
                }
            }
            else if (startDate && endDate) {
                rangeRef.updateStartDate(date);
                rangeRef.updateEndDate(null);
            }
        };
        FsDatePickerVirtualScrollCalendarComponent.prototype.close = function () {
            if (this.autoClose) {
                this._bottomSheetRef.dismiss();
            }
        };
        FsDatePickerVirtualScrollCalendarComponent.prototype.scollIndexChange = function (activeIndex) {
            this._activeScrollIndex = activeIndex;
        };
        FsDatePickerVirtualScrollCalendarComponent.prototype._scrollToClosestMonth = function () {
            var _this = this;
            var touchstart$ = rxjs.fromEvent(this.virtualScroll.elementRef.nativeElement, 'touchstart');
            var touchend$ = rxjs.fromEvent(this.virtualScroll.elementRef.nativeElement, 'touchend');
            var scrollDebounceTime = 80;
            touchstart$
                .pipe(operators.switchMap(function () { return touchend$; }), operators.switchMap(function () { return rxjs.race(_this.virtualScroll.elementScrolled(), rxjs.timer(scrollDebounceTime)).pipe(operators.debounceTime(scrollDebounceTime * 2), operators.take(1), operators.takeUntil(touchstart$)); }), operators.takeUntil(this._destroy$))
                .subscribe(function () {
                _this.virtualScroll.scrollToIndex(_this._activeScrollIndex, 'smooth');
            });
        };
        FsDatePickerVirtualScrollCalendarComponent.prototype._initMonthRangeModels = function () {
            this.modelFrom$ = this.datePickerModel
                .rangePickerRef
                .startDate$
                .pipe(operators.shareReplay());
            this.modelTo$ = this.datePickerModel
                .rangePickerRef
                .endDate$
                .pipe(operators.shareReplay());
        };
        FsDatePickerVirtualScrollCalendarComponent.prototype._listenTabIndexChange = function () {
            var _this = this;
            this.parentTabGroup.selectedIndexChange
                .pipe(operators.filter(function (index) { return index === _this.parentTabIndex; }), operators.delay(0), operators.takeUntil(this._destroy$))
                .subscribe(function () {
                _this._scrollStrategy.scrollToDate(_this.datePickerModel.model || new Date());
            });
        };
        return FsDatePickerVirtualScrollCalendarComponent;
    }());
    FsDatePickerVirtualScrollCalendarComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerVirtualScrollCalendarComponent, deps: [{ token: i0__namespace.ElementRef }, { token: i1__namespace$2.MatBottomSheetRef }, { token: i4.VIRTUAL_SCROLL_STRATEGY }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FsDatePickerVirtualScrollCalendarComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDatePickerVirtualScrollCalendarComponent, selector: "fs-datepicker-mobile-scroll-calendar", inputs: { datePickerModel: "datePickerModel", autoClose: "autoClose", parentTabGroup: "parentTabGroup", parentTabIndex: "parentTabIndex" }, providers: [
            {
                provide: i4.VIRTUAL_SCROLL_STRATEGY,
                useClass: CalendarScrollStrategy,
            },
        ], viewQueries: [{ propertyName: "virtualScroll", first: true, predicate: i4.CdkVirtualScrollViewport, descendants: true, static: true }], usesOnChanges: true, ngImport: i0__namespace, template: "<div class=\"header\">\n  <ng-container *ngIf=\"datePickerModel.view !== 'monthrange' else monthRangeHeader\">\n    <fs-date-picker-mobile-header\n      [calendarDate]=\"datePickerModel.model$ | async\"\n      [minYear]=\"datePickerModel.minYear\"\n      [maxYear]=\"datePickerModel.maxYear\"\n      [viewMode]=\"datePickerModel.calendarMode$ | async\"\n      [disabledDays]=\"datePickerModel.disabledDays$ | async\">\n    </fs-date-picker-mobile-header>\n  </ng-container>\n\n  <ng-template #monthRangeHeader>\n    <fs-date-picker-mobile-header-month-range\n      [rangeFrom]=\"modelFrom$ | async\"\n      [rangeTo]=\"modelTo$ | async\">\n    </fs-date-picker-mobile-header-month-range>\n  </ng-template>\n</div>\n\n<cdk-virtual-scroll-viewport class=\"view-port\" (scrolledIndexChange)=\"scollIndexChange($event)\">\n  <div *cdkVirtualFor=\"let item of dataSource\">\n    <div class=\"month-header\">\n      {{ item | fsDateFormat: 'full-date-dayless' }}\n    </div>\n    <fs-date-picker-calendar\n      [date]=\"datePickerModel.model$ | async\"\n      [drawMonth]=\"item\"\n      [rangeFrom]=\"modelFrom$ | async\"\n      [rangeTo]=\"modelTo$ | async\"\n      [highlightStartDate]=\"modelFrom$ | async\"\n      [highlightEndDate]=\"modelTo$ | async\"\n      [dateMode]=\"datePickerModel.calendarMode$ | async\"\n      [disabledDays]=\"datePickerModel.disabledDays$ | async\"\n      [hideExtraDays]=\"true\"\n      [period]=\"datePickerModel.period\"\n      [seedDate]=\"datePickerModel.seedDate\"\n      [periodWeeks]=\"datePickerModel.periodWeeks\"\n      (change)=\"dateChanged($event)\">\n    </fs-date-picker-calendar>\n  </div>\n</cdk-virtual-scroll-viewport>\n", styles: [".view-port{height:380px;overflow-y:auto}.month-header{text-align:center;line-height:50px;font-size:110%;font-weight:500}cdk-virtual-scroll-viewport::-webkit-scrollbar{width:0}\n"], components: [{ type: FsDatePickerMobileHeaderComponent, selector: "fs-date-picker-mobile-header", inputs: ["viewMode", "minYear", "maxYear", "disabledDays", "calendarDate"], outputs: ["monthChange", "yearChange", "goNextMonth", "goPrevMonth", "viewModeChange"] }, { type: FsDatePickerMobileHeaderMonthRangeComponent, selector: "fs-date-picker-mobile-header-month-range", inputs: ["rangeFrom", "rangeTo"] }, { type: i4__namespace.CdkVirtualScrollViewport, selector: "cdk-virtual-scroll-viewport", inputs: ["orientation", "appendOnly"], outputs: ["scrolledIndexChange"] }, { type: FsDatePickerCalendarComponent, selector: "fs-date-picker-calendar", inputs: ["date", "period", "rangeFrom", "rangeTo", "highlightStartDate", "highlightEndDate", "dateMode", "disabledDays", "drawMonth", "seedDate", "periodWeeks", "hideExtraDays"], outputs: ["change", "rangeChange", "periodChange", "hoverDay"] }], directives: [{ type: i1__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.CdkVirtualForOf, selector: "[cdkVirtualFor][cdkVirtualForOf]", inputs: ["cdkVirtualForOf", "cdkVirtualForTrackBy", "cdkVirtualForTemplate", "cdkVirtualForTemplateCacheSize"] }], pipes: { "async": i1__namespace.AsyncPipe, "fsDateFormat": i3__namespace.FsDateFormatPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerVirtualScrollCalendarComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'fs-datepicker-mobile-scroll-calendar',
                        templateUrl: './virtual-scroll-calendar.component.html',
                        styleUrls: ['./virtual-scroll-calendar.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [
                            {
                                provide: i4.VIRTUAL_SCROLL_STRATEGY,
                                useClass: CalendarScrollStrategy,
                            },
                        ],
                    }]
            }], ctorParameters: function () {
            return [{ type: i0__namespace.ElementRef }, { type: i1__namespace$2.MatBottomSheetRef }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i4.VIRTUAL_SCROLL_STRATEGY]
                        }] }];
        }, propDecorators: { datePickerModel: [{
                    type: i0.Input
                }], autoClose: [{
                    type: i0.Input
                }], parentTabGroup: [{
                    type: i0.Input
                }], parentTabIndex: [{
                    type: i0.Input
                }], virtualScroll: [{
                    type: i0.ViewChild,
                    args: [i4.CdkVirtualScrollViewport, { static: true }]
                }] } });

    var FsMobileTimePickerComponent = /** @class */ (function () {
        function FsMobileTimePickerComponent(_bottomSheet) {
            this._bottomSheet = _bottomSheet;
            this.autoClose = true;
            this.showNotSelected = true;
        }
        FsMobileTimePickerComponent.prototype.dateChanged = function (date) {
            this.datePickerModel.model = date;
        };
        FsMobileTimePickerComponent.prototype.close = function () {
            if (this.autoClose) {
                this._bottomSheet.dismiss();
            }
        };
        return FsMobileTimePickerComponent;
    }());
    FsMobileTimePickerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsMobileTimePickerComponent, deps: [{ token: i1__namespace$2.MatBottomSheetRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FsMobileTimePickerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsMobileTimePickerComponent, selector: "fs-datepicker-mobile-timepicker", inputs: { datePickerModel: "datePickerModel", autoClose: "autoClose", showNotSelected: "showNotSelected" }, ngImport: i0__namespace, template: "<fs-date-picker-time\n  class=\"fs-date-picker-dialog\"\n  [date]=\"datePickerModel.model$ | async\"\n  [minutes]=\"datePickerModel.minutes\"\n  [disabledTimes]=\"datePickerModel.disabledTimes$ | async\"\n  [expanded]=\"datePickerModel.timeExpanded$ | async\"\n  [showNotSelected]=\"showNotSelected\"\n  (onChange)=\"dateChanged($event)\"\n></fs-date-picker-time>\n", styles: [":host ::ng-deep .month-year.time{display:none}\n"], components: [{ type: FsDatePickerTimeComponent, selector: "fs-date-picker-time", inputs: ["date", "disabledMinutes", "disabledHours", "disabledTimes", "expanded", "minutes", "showNotSelected"], outputs: ["onChange"] }], pipes: { "async": i1__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsMobileTimePickerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'fs-datepicker-mobile-timepicker',
                        templateUrl: './time-picker.component.html',
                        styleUrls: ['./time-picker.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.MatBottomSheetRef }]; }, propDecorators: { datePickerModel: [{
                    type: i0.Input
                }], autoClose: [{
                    type: i0.Input
                }], showNotSelected: [{
                    type: i0.Input
                }] } });

    var FDatePickerMobileDatetimePickerComponent = /** @class */ (function () {
        function FDatePickerMobileDatetimePickerComponent() {
            this.tabChange = new i0.EventEmitter();
        }
        FDatePickerMobileDatetimePickerComponent.prototype.selectedDateTimeTabChange = function (index) {
            this.tabChange.emit(index);
        };
        return FDatePickerMobileDatetimePickerComponent;
    }());
    FDatePickerMobileDatetimePickerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FDatePickerMobileDatetimePickerComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    FDatePickerMobileDatetimePickerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FDatePickerMobileDatetimePickerComponent, selector: "fs-datepicker-mobile-datetime-picker", inputs: { datePickerModel: "datePickerModel" }, outputs: { tabChange: "tabChange" }, ngImport: i0__namespace, template: "<mat-tab-group mat-stretch-tabs\n               dynamicHeight\n               (selectedIndexChange)=\"selectedDateTimeTabChange($event)\"\n               #tabGroup>\n  <mat-tab>\n    <ng-template mat-tab-label>\n      <ng-container *ngIf=\"datePickerModel.model$ | async as model; else noDate\">\n        {{ model | date: 'MMM d, yyyy'}}\n      </ng-container>\n      <ng-template #noDate>Date</ng-template>\n    </ng-template>\n\n    <fs-datepicker-mobile-scroll-calendar [datePickerModel]=\"datePickerModel\"\n                                          [autoClose]=\"false\"\n                                          [parentTabGroup]=\"tabGroup\"\n                                          [parentTabIndex]=\"0\">\n    </fs-datepicker-mobile-scroll-calendar>\n\n  </mat-tab>\n\n  <mat-tab>\n    <ng-template mat-tab-label>\n      <ng-container *ngIf=\"datePickerModel.model$ | async as model; else noTime\">\n        {{ model | date: 'h:mm'}}\n        {{ model | date: 'aaa' | lowercase}}\n      </ng-container>\n      <ng-template #noTime>Time</ng-template>\n    </ng-template>\n\n    <fs-datepicker-mobile-timepicker [datePickerModel]=\"datePickerModel\"\n                                     [autoClose]=\"false\"\n                                     [showNotSelected]=\"false\">\n    </fs-datepicker-mobile-timepicker>\n  </mat-tab>\n</mat-tab-group>\n", styles: [""], components: [{ type: i1__namespace$3.MatTabGroup, selector: "mat-tab-group", inputs: ["color", "disableRipple"], exportAs: ["matTabGroup"] }, { type: i1__namespace$3.MatTab, selector: "mat-tab", inputs: ["disabled", "label", "aria-label", "aria-labelledby"], exportAs: ["matTab"] }, { type: FsDatePickerVirtualScrollCalendarComponent, selector: "fs-datepicker-mobile-scroll-calendar", inputs: ["datePickerModel", "autoClose", "parentTabGroup", "parentTabIndex"] }, { type: FsMobileTimePickerComponent, selector: "fs-datepicker-mobile-timepicker", inputs: ["datePickerModel", "autoClose", "showNotSelected"] }], directives: [{ type: i1__namespace$3.MatTabLabel, selector: "[mat-tab-label], [matTabLabel]" }, { type: i1__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i1__namespace.AsyncPipe, "date": i1__namespace.DatePipe, "lowercase": i1__namespace.LowerCasePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FDatePickerMobileDatetimePickerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'fs-datepicker-mobile-datetime-picker',
                        templateUrl: './date-time-picker.component.html',
                        styleUrls: ['./date-time-picker.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { datePickerModel: [{
                    type: i0.Input
                }], tabChange: [{
                    type: i0.Output
                }] } });

    var FsMobileCalendarDialogComponent = /** @class */ (function () {
        function FsMobileCalendarDialogComponent(_data, _bottomSheetRef) {
            this._data = _data;
            this._bottomSheetRef = _bottomSheetRef;
            this.selectedDateTimeTab = 0;
            this._dialogRef = this._data.dateDialogRef;
        }
        Object.defineProperty(FsMobileCalendarDialogComponent.prototype, "datePickerModel", {
            get: function () {
                return this._dialogRef.pickerModel;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsMobileCalendarDialogComponent.prototype, "dialogRef", {
            get: function () {
                return this._dialogRef;
            },
            enumerable: false,
            configurable: true
        });
        FsMobileCalendarDialogComponent.prototype.toggleTimeExpand = function () {
            this.datePickerModel.timeExpanded = !this.datePickerModel.timeExpanded;
        };
        FsMobileCalendarDialogComponent.prototype.selectedDateTimeTabChange = function (index) {
            this.selectedDateTimeTab = index;
        };
        FsMobileCalendarDialogComponent.prototype.close = function () {
            this._bottomSheetRef.dismiss();
        };
        FsMobileCalendarDialogComponent.prototype.datetimeTabChanged = function (index) {
            this.selectedDateTimeTab = index;
        };
        return FsMobileCalendarDialogComponent;
    }());
    FsMobileCalendarDialogComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsMobileCalendarDialogComponent, deps: [{ token: i1$2.MAT_BOTTOM_SHEET_DATA }, { token: i1__namespace$2.MatBottomSheetRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FsMobileCalendarDialogComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsMobileCalendarDialogComponent, selector: "ng-component", ngImport: i0__namespace, template: "<div class=\"fs-date-picker-dialog\">\n  <div class=\"calendar-container\">\n    <ng-container [ngSwitch]=\"datePickerModel.view\">\n      <ng-template [ngSwitchCase]=\"'date'\">\n        <fs-datepicker-mobile-scroll-calendar [datePickerModel]=\"datePickerModel\">\n        </fs-datepicker-mobile-scroll-calendar>\n      </ng-template>\n\n      <ng-template [ngSwitchCase]=\"'week'\">\n        <fs-datepicker-mobile-scroll-calendar [datePickerModel]=\"datePickerModel\">\n        </fs-datepicker-mobile-scroll-calendar>\n      </ng-template>\n\n      <ng-template [ngSwitchCase]=\"'monthrange'\">\n        <fs-datepicker-mobile-scroll-calendar [datePickerModel]=\"datePickerModel\">\n        </fs-datepicker-mobile-scroll-calendar>\n      </ng-template>\n\n      <ng-template [ngSwitchCase]=\"'time'\">\n        <fs-datepicker-mobile-timepicker [datePickerModel]=\"datePickerModel\">\n        </fs-datepicker-mobile-timepicker>\n      </ng-template>\n\n      <ng-template [ngSwitchCase]=\"'datetime'\">\n        <fs-datepicker-mobile-datetime-picker [datePickerModel]=\"datePickerModel\"\n                                              (tabChange)=\"datetimeTabChanged($event)\">\n        </fs-datepicker-mobile-datetime-picker>\n      </ng-template>\n    </ng-container>\n  </div>\n</div>\n\n<mat-nav-list class=\"actions\">\n  <ng-container *ngIf=\"datePickerModel.minutes\n                    && (\n                      (datePickerModel.isDateTimeView && selectedDateTimeTab !== 0)\n                      || datePickerModel.isTimeView\n                    )\">\n    <mat-list-item (click)=\"toggleTimeExpand()\">\n      <button type=\"button\"\n              mat-button\n              class=\"button-more\">\n        <ng-container *ngIf=\"!(datePickerModel.timeExpanded$ | async); else lessMinutes\">\n          More Minutes\n        </ng-container>\n        <ng-template #lessMinutes>\n          Less Minutes\n        </ng-template>\n      </button>\n    </mat-list-item>\n\n  </ng-container>\n\n  <mat-list-item (click)=\"close()\">\n    <button mat-icon-button color=\"primary\">\n      Done\n    </button>\n  </mat-list-item>\n</mat-nav-list>\n", styles: ["fs-date-picker-calendar{display:block}:host ::ng-deep .actions .mat-list-item-content{justify-content:center}.example-viewport{height:328px}\n"], components: [{ type: FsDatePickerVirtualScrollCalendarComponent, selector: "fs-datepicker-mobile-scroll-calendar", inputs: ["datePickerModel", "autoClose", "parentTabGroup", "parentTabIndex"] }, { type: FsMobileTimePickerComponent, selector: "fs-datepicker-mobile-timepicker", inputs: ["datePickerModel", "autoClose", "showNotSelected"] }, { type: FDatePickerMobileDatetimePickerComponent, selector: "fs-datepicker-mobile-datetime-picker", inputs: ["datePickerModel"], outputs: ["tabChange"] }, { type: i5__namespace.MatNavList, selector: "mat-nav-list", inputs: ["disableRipple", "disabled"], exportAs: ["matNavList"] }, { type: i5__namespace.MatListItem, selector: "mat-list-item, a[mat-list-item], button[mat-list-item]", inputs: ["disableRipple", "disabled"], exportAs: ["matListItem"] }, { type: i4__namespace$1.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], directives: [{ type: i1__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i1__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i1__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i1__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsMobileCalendarDialogComponent, decorators: [{
                type: i0.Component,
                args: [{
                        templateUrl: './mobile-dialog.component.html',
                        styleUrls: ['./mobile-dialog.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1$2.MAT_BOTTOM_SHEET_DATA]
                        }] }, { type: i1__namespace$2.MatBottomSheetRef }];
        } });

    var PickerViewType;
    (function (PickerViewType) {
        PickerViewType["Date"] = "date";
        PickerViewType["DateTime"] = "datetime";
        PickerViewType["Time"] = "time";
        PickerViewType["Week"] = "week";
        PickerViewType["MonthRange"] = "monthrange";
    })(PickerViewType || (PickerViewType = {}));

    function getDisabledDays(minDate, maxDate, minYear, maxYear) {
        var result = [];
        if (minDate) {
            var from = dateFns.subYears(new Date(), minYear);
            var to = new Date(minDate);
            result.push([from, to]);
        }
        if (maxDate) {
            result.push([new Date(maxDate), dateFns.addYears(new Date(), maxYear)]);
        }
        return result;
    }

    function getDisabledTimes(model, ref) {
        if (!ref) {
            return;
        }
        var arr = [];
        if ((ref.view === 'time' && ref.startDate) ||
            (ref.view === 'datetime' && ref.startDate && model && dateFns.isSameDay(ref.startDate, model))) {
            var from = (ref.startDate.getMinutes()) + ((ref.startDate.getHours()) * 60);
            arr.push([0, from]);
        }
        return arr;
    }

    var FsDatePickerDialogModel = /** @class */ (function () {
        function FsDatePickerDialogModel(pickerOptions) {
            /**
             * year | month | date
             *
             * Current mode of calendar. For ranges consist values for both: start and end date
             */
            this.dateMode = null;
            this.minDate = null;
            this.maxDate = null;
            this.startOfDay = true;
            this.seedDate = null;
            this.periodWeeks = null;
            this.minutes = true;
            this._minYear = null;
            this._maxYear = null;
            this._model$ = new rxjs.BehaviorSubject(null);
            this._period$ = new rxjs.BehaviorSubject(null);
            this._now$ = new rxjs.BehaviorSubject(new Date());
            this._disabledDays$ = new rxjs.BehaviorSubject([]);
            this._disabledTimes$ = new rxjs.BehaviorSubject([]);
            this._calendarDate$ = new rxjs.BehaviorSubject(this.now);
            this._calendarMode$ = new rxjs.BehaviorSubject('date');
            this._timeExpanded$ = new rxjs.BehaviorSubject(false);
            /**
             * date | datetime | time | week
             * View is options selected on init. Can't be changed manually
             */
            this._view$ = new rxjs.BehaviorSubject('date');
            this._initCalendar(pickerOptions);
            this._updateDisabled();
        }
        Object.defineProperty(FsDatePickerDialogModel.prototype, "now", {
            get: function () {
                return this._now$.value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerDialogModel.prototype, "calendarDate", {
            get: function () {
                return this._calendarDate$.value;
            },
            set: function (value) {
                this._calendarDate$.next(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerDialogModel.prototype, "calendarDate$", {
            get: function () {
                return this._calendarDate$;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerDialogModel.prototype, "view$", {
            get: function () {
                return this._view$.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerDialogModel.prototype, "view", {
            get: function () {
                return this._view$.value;
            },
            set: function (view) {
                this._view$.next(view);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerDialogModel.prototype, "isDateView", {
            get: function () {
                return this.view === PickerViewType.Date;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerDialogModel.prototype, "isDateTimeView", {
            get: function () {
                return this.view === PickerViewType.DateTime;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerDialogModel.prototype, "isTimeView", {
            get: function () {
                return this.view === PickerViewType.Time;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerDialogModel.prototype, "isWeekView", {
            get: function () {
                return this.view === PickerViewType.Week;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerDialogModel.prototype, "isMonthRangeView", {
            get: function () {
                return this.view === PickerViewType.MonthRange;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerDialogModel.prototype, "calendarMode$", {
            get: function () {
                return this._calendarMode$;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerDialogModel.prototype, "calendarMode", {
            get: function () {
                return this._calendarMode$.value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerDialogModel.prototype, "model", {
            get: function () {
                return this._model$.value;
            },
            set: function (value) {
                if (dateFns.isValid(value)) {
                    if (this.isDateView && this.startOfDay) {
                        value = dateFns.startOfDay(value);
                    }
                    /**
                     * For cases when we have datetime view type and have opened "To" date picker.
                     * If "From" date is already selected it means that we have some Time range to be disabled.
                     * When user select "To" date without time (only clicks on date) we have to pull up time for selected date.
                     */
                    if (this.isDateTimeView
                        && this._pickerOptions.rangeType === 'to'
                        && !this.model
                        && value) {
                        if (dateFns.isBefore(value, this.rangePickerRef.startDate)) {
                            value = new Date(this.rangePickerRef.startDate);
                        }
                    }
                }
                else {
                    value = null;
                }
                this._model$.next(value);
                this._updateDisabledTimes();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerDialogModel.prototype, "model$", {
            get: function () {
                return this._model$;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerDialogModel.prototype, "period", {
            get: function () {
                return this._period$.value;
            },
            set: function (value) {
                this._period$.next(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerDialogModel.prototype, "period$", {
            get: function () {
                return this._period$;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerDialogModel.prototype, "disabledDays", {
            set: function (value) {
                this._disabledDays$.next(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerDialogModel.prototype, "disabledDays$", {
            get: function () {
                return this._disabledDays$;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerDialogModel.prototype, "disabledTimes", {
            set: function (value) {
                this._disabledTimes$.next(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerDialogModel.prototype, "disabledTimes$", {
            get: function () {
                return this._disabledTimes$;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerDialogModel.prototype, "minYear", {
            get: function () {
                return this._minYear;
            },
            set: function (minYear) {
                this._minYear = minYear || (new Date().getFullYear() - 100);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerDialogModel.prototype, "maxYear", {
            get: function () {
                return this._maxYear;
            },
            set: function (maxYear) {
                this._maxYear = maxYear || (new Date().getFullYear() + 100);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerDialogModel.prototype, "_calendarMode", {
            set: function (value) {
                this._calendarMode$.next(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerDialogModel.prototype, "timeExpanded$", {
            get: function () {
                return this._timeExpanded$.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerDialogModel.prototype, "timeExpanded", {
            get: function () {
                return this._timeExpanded$.value;
            },
            set: function (flag) {
                this._timeExpanded$.next(flag);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerDialogModel.prototype, "rangePickerRef", {
            get: function () {
                return this._pickerOptions.pickerRef;
            },
            enumerable: false,
            configurable: true
        });
        FsDatePickerDialogModel.prototype.setCalendarMonth = function (month) {
            this.calendarDate = dateFns.setMonth(this.calendarDate, month);
        };
        FsDatePickerDialogModel.prototype.setCalendarYear = function (year) {
            this.calendarDate = dateFns.setYear(this.calendarDate, year);
            this._updateDisabled();
        };
        FsDatePickerDialogModel.prototype.nextMonth = function () {
            this.calendarDate = dateFns.addMonths(this.calendarDate, 1);
        };
        FsDatePickerDialogModel.prototype.prevMonth = function () {
            this.calendarDate = dateFns.subMonths(this.calendarDate, 1);
        };
        FsDatePickerDialogModel.prototype.setCalendarMode = function (mode) {
            this._calendarMode = mode;
        };
        FsDatePickerDialogModel.prototype._initCalendar = function (options) {
            var _a;
            this._pickerOptions = Object.assign({}, options);
            this.view = options.view;
            switch (this.view) {
                case PickerViewType.Week:
                    {
                        this.period = options.modelValue;
                        this.calendarDate = ((_a = options.modelValue) === null || _a === void 0 ? void 0 : _a.from) || new Date();
                    }
                    break;
                case PickerViewType.MonthRange:
                    {
                        this.calendarDate = options.modelValue || new Date();
                    }
                    break;
                default: {
                    this.model = options.modelValue;
                    this.calendarDate = options.modelValue || new Date();
                }
            }
            this._calendarMode = options.view;
            this.minYear = options.minYear;
            this.maxYear = options.maxYear;
            this.minDate = options.minDate;
            this.maxDate = options.maxDate;
            this.startOfDay = options.startOfDay;
            this.minutes = options.minutes === undefined
                ? true
                : options.minutes;
            if (!dateFns.isDate(options.seedDate) || !dateFns.isValid(options.seedDate)) {
                this.seedDate = new Date((new Date().getFullYear()), 0, 1);
            }
            else {
                this.seedDate = options.seedDate;
            }
            this.periodWeeks = options.periodWeeks;
            this._updateDisabledDays();
        };
        FsDatePickerDialogModel.prototype._updateDisabled = function () {
            this._updateDisabledDays();
            this._updateDisabledTimes();
        };
        FsDatePickerDialogModel.prototype._updateDisabledDays = function () {
            if (this._pickerOptions.rangeType) {
                if (this._pickerOptions.rangeType === 'to') {
                    this.disabledDays = getDisabledDays(this.minDate, this.maxDate, this.minYear, this.maxYear);
                }
            }
            else {
                this.disabledDays = getDisabledDays(this.minDate, this.maxDate, this.minYear, this.maxYear);
            }
        };
        FsDatePickerDialogModel.prototype._updateDisabledTimes = function () {
            var pickerView = this.view;
            if (pickerView !== PickerViewType.DateTime && pickerView !== PickerViewType.Time) {
                return;
            }
            if (this._pickerOptions.rangeType) {
                if (this._pickerOptions.rangeType === 'to') {
                    this.disabledTimes = getDisabledTimes(this.model, this._pickerOptions.pickerRef);
                }
            }
            else {
                this.disabledTimes = getDisabledTimes(this.model, this._pickerOptions.pickerRef);
            }
        };
        return FsDatePickerDialogModel;
    }());

    var FsDatePickerOverlayRef = /** @class */ (function () {
        function FsDatePickerOverlayRef() {
            this._activeOverlayRef$ = new rxjs.BehaviorSubject(null);
        }
        Object.defineProperty(FsDatePickerOverlayRef.prototype, "destroy$", {
            get: function () {
                return this._activeOverlayRef$
                    .pipe(operators.filter(function (ref) { return !!ref; }), operators.switchMap(function (ref) {
                    if (ref instanceof i1$4.OverlayRef) {
                        return rxjs.merge(ref.detachments(), ref.backdropClick());
                    }
                    else {
                        return rxjs.merge(ref.afterDismissed(), ref.backdropClick());
                    }
                }));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerOverlayRef.prototype, "activeOverlayRef", {
            get: function () {
                return this._activeOverlayRef$.getValue();
            },
            enumerable: false,
            configurable: true
        });
        FsDatePickerOverlayRef.prototype.setActiveOverlay = function (ref) {
            this._activeOverlayRef$.next(ref);
        };
        FsDatePickerOverlayRef.prototype.close = function () {
            var _a, _b, _c;
            if (this.activeOverlayRef instanceof i1$4.OverlayRef) {
                (_a = this.activeOverlayRef) === null || _a === void 0 ? void 0 : _a.detach();
                (_b = this.activeOverlayRef) === null || _b === void 0 ? void 0 : _b.dispose();
            }
            if (this.activeOverlayRef instanceof i1$2.MatBottomSheetRef) {
                (_c = this.activeOverlayRef) === null || _c === void 0 ? void 0 : _c.dismiss();
            }
            this.setActiveOverlay(null);
        };
        return FsDatePickerOverlayRef;
    }());

    var FsDatePickerDialogRef = /** @class */ (function () {
        function FsDatePickerDialogRef(_pickerOptions) {
            this._pickerOptions = _pickerOptions;
            this._overlayRef = new FsDatePickerOverlayRef();
            this._close$ = new rxjs.Subject();
            /**
             * Visual components. Can be changed by summary widget but only if _view allowed to do this.
             */
            this._componentsDefault = {
                calendarStart: false,
                calendarEnd: false,
                timeStart: false,
                timeEnd: false
            };
            this._components = null;
            this._init();
        }
        Object.defineProperty(FsDatePickerDialogRef.prototype, "pickerModel", {
            get: function () {
                return this._dialogModel;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerDialogRef.prototype, "options", {
            get: function () {
                return this._pickerOptions;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerDialogRef.prototype, "value$", {
            get: function () {
                return this._value$;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerDialogRef.prototype, "pickerOverlayRef", {
            get: function () {
                return this._overlayRef;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerDialogRef.prototype, "close$", {
            get: function () {
                return this._close$.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerDialogRef.prototype, "components", {
            get: function () {
                return this._components;
            },
            enumerable: false,
            configurable: true
        });
        FsDatePickerDialogRef.prototype.updateValue = function (value) {
            this._dialogModel.model = value;
        };
        FsDatePickerDialogRef.prototype.close = function () {
            this.pickerOverlayRef.close();
            this._close$.next();
            this._close$.complete();
        };
        FsDatePickerDialogRef.prototype._init = function () {
            this._initComponents();
            this._initModel();
        };
        FsDatePickerDialogRef.prototype._initModel = function () {
            this._dialogModel = new FsDatePickerDialogModel(this._pickerOptions);
            this._initValue();
        };
        FsDatePickerDialogRef.prototype._initValue = function () {
            if (this.options.view === 'week') {
                this._value$ = this._dialogModel.period$
                    .pipe(operators.skip(1));
            }
            else {
                this._value$ = this._dialogModel.model$
                    .pipe(operators.skip(1));
            }
        };
        FsDatePickerDialogRef.prototype._initComponents = function () {
            var value = Object.assign(Object.assign({}, this._componentsDefault), this._pickerOptions.components || {});
            var tempData = Object.assign({}, value);
            var allowable = [];
            if (['week', 'date', 'datetime', 'monthrange'].indexOf(this._pickerOptions.view) !== -1) {
                allowable.push('calendarStart');
                allowable.push('calendarEnd');
            }
            if (['time', 'datetime'].indexOf(this._pickerOptions.view) !== -1) {
                allowable.push('timeStart');
                allowable.push('timeEnd');
            }
            lodashEs.forEach(tempData, function (item, index) {
                tempData[index] = allowable.indexOf(index) !== -1 ? item : false;
            });
            // Updating components only if all value object is valid
            if (lodashEs.isEqual(value, tempData)) {
                this._components = value;
            }
        };
        return FsDatePickerDialogRef;
    }());

    var MONTHS = [
        { value: 0, name: 'January', abr: 'Jan' },
        { value: 1, name: 'February', abr: 'Feb' },
        { value: 2, name: 'March', abr: 'Mar' },
        { value: 3, name: 'April', abr: 'Apr' },
        { value: 4, name: 'May', abr: 'May' },
        { value: 5, name: 'June', abr: 'June' },
        { value: 6, name: 'July', abr: 'July' },
        { value: 7, name: 'August', abr: 'Aug' },
        { value: 8, name: 'September', abr: 'Sept' },
        { value: 9, name: 'October', abr: 'Oct' },
        { value: 10, name: 'November', abr: 'Nov' },
        { value: 11, name: 'December', abr: 'Dec' }
    ];

    var FsDateScrollPickerDialogComponent = /** @class */ (function () {
        function FsDateScrollPickerDialogComponent(element, _cdRef, _renderer, _document) {
            this.element = element;
            this._cdRef = _cdRef;
            this._renderer = _renderer;
            this._document = _document;
            this.changed = new i0.EventEmitter();
            this.years = [];
            this.months = [];
            this.maxDay = 0;
        }
        FsDateScrollPickerDialogComponent.prototype.ngOnInit = function () {
            var modelValue = this.model;
            this._generateYearsArray();
            this._generateMonthArray();
            this._generateDaysArray();
            if (modelValue && dateFns.isValid(modelValue)) {
                this._setDate(modelValue);
            }
            else {
                var date = new Date();
                if (!this.showDay) {
                    date.setDate(1);
                }
                if (!this.showMonth) {
                    date.setMonth(1);
                }
                if (!this.showYear) {
                    date.setFullYear(0);
                }
                this._setDate(date);
            }
            this._pullToRefreshDisable();
        };
        FsDateScrollPickerDialogComponent.prototype.ngOnDestroy = function () {
            this._pullToRefreshDefault();
        };
        FsDateScrollPickerDialogComponent.prototype._setDate = function (date) {
            if (date) {
                this.day = date.getDate();
                this.year = date.getFullYear();
                this.month = date.getMonth();
            }
        };
        FsDateScrollPickerDialogComponent.prototype._getMonth = function (month) {
            return this.months.find(function (item) {
                return month === item.value;
            });
        };
        FsDateScrollPickerDialogComponent.prototype.change = function () {
            if (!this.year) {
                this.year = this.showYear ? this.years[0] : 0;
            }
            if (!this.month) {
                this.month = this.months[0].value;
            }
            if (!this.day) {
                this.day = 1;
            }
            var daysInMonth = dateFns.getDaysInMonth(new Date(this.year, this.month));
            if (this.day > daysInMonth) {
                this.day = daysInMonth;
            }
            var date = new Date(this.year, this.month, this.day);
            this.changed.emit(date);
            this._cdRef.markForCheck();
        };
        FsDateScrollPickerDialogComponent.prototype.changeMonth = function () {
            this._generateDaysArray();
            this.change();
        };
        FsDateScrollPickerDialogComponent.prototype.changeYear = function () {
            this._generateDaysArray();
            if (this.maxDate) {
                this._generateMonthArray();
            }
            this.change();
        };
        FsDateScrollPickerDialogComponent.prototype._generateDaysArray = function () {
            this.maxDay = 0;
            var maxDate = this.maxDate;
            var maxDay = maxDate && maxDate.getDate();
            var maxMonth = maxDate && maxDate.getMonth();
            var maxYear = maxDate && maxDate.getFullYear();
            if (this.month) {
                if (maxDay && maxMonth == this.month.value && maxYear === this.year) {
                    this.maxDay = maxDay;
                }
                else {
                    var daysInMonth = dateFns.getDaysInMonth(new Date(this.year, this.month));
                    this.maxDay = daysInMonth;
                }
            }
            if (!this.maxDay) {
                this.maxDay = 31;
            }
        };
        FsDateScrollPickerDialogComponent.prototype._generateMonthArray = function () {
            this.months = MONTHS;
        };
        FsDateScrollPickerDialogComponent.prototype._generateYearsArray = function () {
            var minYear = this.minYear;
            var maxYear = this.maxYear;
            if (!maxYear) {
                var today = new Date();
                maxYear = today.getFullYear();
            }
            for (minYear; minYear <= maxYear; minYear++) {
                this.years.push({ name: minYear, value: minYear });
            }
        };
        FsDateScrollPickerDialogComponent.prototype._pullToRefreshDisable = function () {
            this._renderer.addClass(this._document.body, 'fs-date-picker-prevent-pull-to-refresh');
        };
        FsDateScrollPickerDialogComponent.prototype._pullToRefreshDefault = function () {
            this._renderer.removeClass(this._document.body, 'fs-date-picker-prevent-pull-to-refresh');
        };
        return FsDateScrollPickerDialogComponent;
    }());
    FsDateScrollPickerDialogComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateScrollPickerDialogComponent, deps: [{ token: i0__namespace.ElementRef }, { token: i0__namespace.ChangeDetectorRef }, { token: i0__namespace.Renderer2 }, { token: i1.DOCUMENT }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FsDateScrollPickerDialogComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDateScrollPickerDialogComponent, selector: "fs-date-scroll-picker", inputs: { model: "model", showMonth: "showMonth", showDay: "showDay", showYear: "showYear", minYear: "minYear", maxYear: "maxYear", maxDate: "maxDate" }, outputs: { changed: "changed" }, ngImport: i0__namespace, template: "<div class=\"scroll-pickers\">\n  <fs-scroll-picker\n    *ngIf=\"showMonth\"\n    class=\"month\"\n    [values]=\"months\"\n    name=\"month\"\n    [(ngModel)]=\"month\"\n    (ngModelChange)=\"changeMonth()\">\n  </fs-scroll-picker>\n\n  <fs-scroll-picker\n      *ngIf=\"showDay\"\n      class=\"day\"\n      [valuesMin]=\"1\"\n      [valuesMax]=\"maxDay\"\n      name=\"day\"\n      [(ngModel)]=\"day\"\n      (ngModelChange)=\"change()\">\n  </fs-scroll-picker>\n\n  <fs-scroll-picker\n      *ngIf=\"showYear\"\n      class=\"year\"\n      [values]=\"years\"\n      name=\"year\"\n      [(ngModel)]=\"year\"\n      (ngModelChange)=\"changeYear()\">\n  </fs-scroll-picker>\n</div>", styles: [".scroll-pickers{display:flex;flex-direction:row;justify-content:center;background:#fff}.scroll-pickers fs-scroll-picker.day{width:80px}.scroll-pickers fs-scroll-picker.month{width:150px}.scroll-pickers fs-scroll-picker.year{width:100px}\n"], components: [{ type: i1__namespace$4.ScrollPickerComponent, selector: "fs-scroll-picker", inputs: ["values", "valuesMin", "valuesMax", "width"] }], directives: [{ type: i1__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateScrollPickerDialogComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'fs-date-scroll-picker',
                        templateUrl: './date-scroll-picker.component.html',
                        styleUrls: ['./date-scroll-picker.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () {
            return [{ type: i0__namespace.ElementRef }, { type: i0__namespace.ChangeDetectorRef }, { type: i0__namespace.Renderer2 }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1.DOCUMENT]
                        }] }];
        }, propDecorators: { model: [{
                    type: i0.Input
                }], showMonth: [{
                    type: i0.Input
                }], showDay: [{
                    type: i0.Input
                }], showYear: [{
                    type: i0.Input
                }], minYear: [{
                    type: i0.Input
                }], maxYear: [{
                    type: i0.Input
                }], maxDate: [{
                    type: i0.Input
                }], changed: [{
                    type: i0.Output
                }] } });

    var FsDateScrollPickerDesktopComponent = /** @class */ (function () {
        function FsDateScrollPickerDesktopComponent(_dialogRef) {
            this._dialogRef = _dialogRef;
        }
        Object.defineProperty(FsDateScrollPickerDesktopComponent.prototype, "dialogRef", {
            get: function () {
                return this._dialogRef;
            },
            enumerable: false,
            configurable: true
        });
        FsDateScrollPickerDesktopComponent.prototype.change = function (date) {
            this._date = date;
        };
        FsDateScrollPickerDesktopComponent.prototype.close = function (save) {
            if (save === void 0) { save = false; }
            if (save) {
                this._dialogRef.updateValue(this._date);
            }
            this._dialogRef.close();
        };
        return FsDateScrollPickerDesktopComponent;
    }());
    FsDateScrollPickerDesktopComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateScrollPickerDesktopComponent, deps: [{ token: FsDatePickerDialogRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FsDateScrollPickerDesktopComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDateScrollPickerDesktopComponent, selector: "ng-component", ngImport: i0__namespace, template: "<div class=\"fs-date-picker-dialog fs-date-picker-dialog-shadow fs-date-picker-range\" tabindex=\"0\">\n  <div class=\"wrap\">\n    <fs-date-scroll-picker [model]=\"dialogRef.pickerModel.model\"\n                           [minYear]=\"dialogRef.options.minYear\"\n                           [maxDate]=\"dialogRef.options.maxDate\"\n                           [maxYear]=\"dialogRef.options.maxYear\"\n                           [showDay]=\"dialogRef.options.showDay\"\n                           [showMonth]=\"dialogRef.options.showMonth\"\n                           [showYear]=\"dialogRef.options.showYear\"\n                           (changed)=\"change($event)\">\n    </fs-date-scroll-picker>\n\n    <div class=\"buttons\">\n      <button type=\"button\" mat-button color=\"primary\" (click)=\"close(true)\">Select</button>\n      <button type=\"button\" mat-button (click)=\"close(false)\">Cancel</button>\n    </div>\n  </div>\n</div>\n", styles: [""], components: [{ type: FsDateScrollPickerDialogComponent, selector: "fs-date-scroll-picker", inputs: ["model", "showMonth", "showDay", "showYear", "minYear", "maxYear", "maxDate"], outputs: ["changed"] }, { type: i4__namespace$1.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateScrollPickerDesktopComponent, decorators: [{
                type: i0.Component,
                args: [{
                        templateUrl: './date-scroll-picker-desktop.component.html',
                        styleUrls: ['./date-scroll-picker-desktop.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: FsDatePickerDialogRef }]; } });

    var FsDateScrollPickerMobileDialogComponent = /** @class */ (function () {
        function FsDateScrollPickerMobileDialogComponent(_data, _bottomSheetRef) {
            this._data = _data;
            this._bottomSheetRef = _bottomSheetRef;
            this._dialogRef = _data.dateDialogRef;
        }
        Object.defineProperty(FsDateScrollPickerMobileDialogComponent.prototype, "dialogRef", {
            get: function () {
                return this._dialogRef;
            },
            enumerable: false,
            configurable: true
        });
        FsDateScrollPickerMobileDialogComponent.prototype.change = function (date) {
            this._date = date;
        };
        FsDateScrollPickerMobileDialogComponent.prototype.close = function (save) {
            if (save === void 0) { save = false; }
            if (save) {
                this._dialogRef.updateValue(this._date);
            }
            this._bottomSheetRef.dismiss();
        };
        return FsDateScrollPickerMobileDialogComponent;
    }());
    FsDateScrollPickerMobileDialogComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateScrollPickerMobileDialogComponent, deps: [{ token: i1$2.MAT_BOTTOM_SHEET_DATA }, { token: i1__namespace$2.MatBottomSheetRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FsDateScrollPickerMobileDialogComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDateScrollPickerMobileDialogComponent, selector: "ng-component", ngImport: i0__namespace, template: "<div class=\"fs-date-picker-dialog fs-date-picker-range\" tabindex=\"0\">\n  <div class=\"wrap\">\n    <fs-date-scroll-picker [model]=\"dialogRef.pickerModel.model\"\n                           [minYear]=\"dialogRef.options.minYear\"\n                           [maxDate]=\"dialogRef.options.maxDate\"\n                           [maxYear]=\"dialogRef.options.maxYear\"\n                           [showDay]=\"dialogRef.options.showDay\"\n                           [showMonth]=\"dialogRef.options.showMonth\"\n                           [showYear]=\"dialogRef.options.showYear\"\n                           (changed)=\"change($event)\">\n    </fs-date-scroll-picker>\n\n    <mat-nav-list class=\"actions\">\n      <mat-list-item (click)=\"close(true)\">\n        <button mat-icon-button color=\"primary\">\n          Select\n        </button>\n      </mat-list-item>\n\n      <mat-list-item (click)=\"close(false)\">\n        <button mat-icon-button>\n          Cancel\n        </button>\n      </mat-list-item>\n    </mat-nav-list>\n  </div>\n</div>\n", styles: [":host ::ng-deep .actions .mat-list-item-content{justify-content:center}\n"], components: [{ type: FsDateScrollPickerDialogComponent, selector: "fs-date-scroll-picker", inputs: ["model", "showMonth", "showDay", "showYear", "minYear", "maxYear", "maxDate"], outputs: ["changed"] }, { type: i5__namespace.MatNavList, selector: "mat-nav-list", inputs: ["disableRipple", "disabled"], exportAs: ["matNavList"] }, { type: i5__namespace.MatListItem, selector: "mat-list-item, a[mat-list-item], button[mat-list-item]", inputs: ["disableRipple", "disabled"], exportAs: ["matListItem"] }, { type: i4__namespace$1.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateScrollPickerMobileDialogComponent, decorators: [{
                type: i0.Component,
                args: [{
                        templateUrl: './date-scroll-picker-mobile-dialog.component.html',
                        styleUrls: ['./date-scroll-picker-mobile-dialog.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1$2.MAT_BOTTOM_SHEET_DATA]
                        }] }, { type: i1__namespace$2.MatBottomSheetRef }];
        } });

    var FsDatePickerHeaderMonthRangeComponent = /** @class */ (function () {
        function FsDatePickerHeaderMonthRangeComponent() {
            this.goNextMonth = new i0.EventEmitter();
            this.goPrevMonth = new i0.EventEmitter();
        }
        Object.defineProperty(FsDatePickerHeaderMonthRangeComponent.prototype, "calendarMonth", {
            get: function () {
                var _a;
                return (_a = this.calendarDate) === null || _a === void 0 ? void 0 : _a.getMonth();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerHeaderMonthRangeComponent.prototype, "calendarYear", {
            get: function () {
                var _a;
                return (_a = this.calendarDate) === null || _a === void 0 ? void 0 : _a.getFullYear();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerHeaderMonthRangeComponent.prototype, "calendarDay", {
            get: function () {
                var _a;
                return (_a = this.calendarDate) === null || _a === void 0 ? void 0 : _a.getDate();
            },
            enumerable: false,
            configurable: true
        });
        FsDatePickerHeaderMonthRangeComponent.prototype.nextMonth = function () {
            this.goNextMonth.emit();
        };
        FsDatePickerHeaderMonthRangeComponent.prototype.prevMonth = function () {
            this.goPrevMonth.emit();
        };
        return FsDatePickerHeaderMonthRangeComponent;
    }());
    FsDatePickerHeaderMonthRangeComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerHeaderMonthRangeComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    FsDatePickerHeaderMonthRangeComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDatePickerHeaderMonthRangeComponent, selector: "fs-date-picker-header-month-range", inputs: { calendarDate: "calendarDate", nextCalendarDate: "nextCalendarDate" }, outputs: { goNextMonth: "goNextMonth", goPrevMonth: "goPrevMonth" }, ngImport: i0__namespace, template: "<div class=\"current-month-header month-year\">\n  <div class=\"actions\">\n    <a (click)=\"prevMonth()\">\n      <mat-icon>navigate_before</mat-icon>\n    </a>\n  </div>\n  <span class=\"month-name\">\n    {{ calendarDate | fsDateFormat: 'full-date-dayless' }}\n  </span>\n</div>\n\n\n\n<div class=\"next-month-header month-year\">\n  <span class=\"month-name\">\n    {{ nextCalendarDate | fsDateFormat: 'full-date-dayless' }}\n  </span>\n  <div class=\"actions\">\n    <a (click)=\"nextMonth()\">\n      <mat-icon>navigate_next</mat-icon>\n    </a>\n  </div>\n</div>\n", styles: [":host{display:grid;grid-template-columns:1fr 1fr;grid-column-gap:40px}.month-year{padding:0;position:relative;justify-content:center}.current-month-header .actions{left:5px;position:absolute}.next-month-header .actions{right:5px;position:absolute}\n"], components: [{ type: i1__namespace$1.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }], pipes: { "fsDateFormat": i3__namespace.FsDateFormatPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerHeaderMonthRangeComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'fs-date-picker-header-month-range',
                        templateUrl: './header-month-range.component.html',
                        styleUrls: [
                            './header-month-range.component.scss',
                        ],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { calendarDate: [{
                    type: i0.Input
                }], nextCalendarDate: [{
                    type: i0.Input
                }], goNextMonth: [{
                    type: i0.Output
                }], goPrevMonth: [{
                    type: i0.Output
                }] } });

    var FsMonthRangePickerComponent = /** @class */ (function () {
        function FsMonthRangePickerComponent() {
        }
        FsMonthRangePickerComponent.prototype.ngOnChanges = function (changes) {
            var _a, _b;
            if (((_a = changes.datePickerModel) === null || _a === void 0 ? void 0 : _a.currentValue)
                && ((_b = changes.datePickerModel) === null || _b === void 0 ? void 0 : _b.firstChange)
                && this.datePickerModel.view === 'monthrange') {
                this._initMonthRangeModels();
            }
        };
        FsMonthRangePickerComponent.prototype.viewModeChanged = function (mode) {
            this.datePickerModel.setCalendarMode(mode);
        };
        FsMonthRangePickerComponent.prototype.monthChanged = function (month) {
            this.datePickerModel.setCalendarMonth(month);
        };
        FsMonthRangePickerComponent.prototype.yearChanged = function (year) {
            this.datePickerModel.setCalendarYear(year);
        };
        FsMonthRangePickerComponent.prototype.nextMonth = function () {
            this.datePickerModel.nextMonth();
        };
        FsMonthRangePickerComponent.prototype.prevMonth = function () {
            this.datePickerModel.prevMonth();
        };
        FsMonthRangePickerComponent.prototype.dateChanged = function (date) {
            var rangeRef = this.datePickerModel.rangePickerRef;
            var startDate = rangeRef.startDate, endDate = rangeRef.endDate;
            if (!startDate && !endDate) {
                rangeRef.updateStartDate(date);
            }
            else if (startDate && !endDate) {
                if (dateFns.isBefore(date, startDate)) {
                    rangeRef.updateStartDate(date);
                    rangeRef.updateEndDate(null);
                }
                else {
                    rangeRef.updateEndDate(date);
                }
            }
            else if (startDate && endDate) {
                rangeRef.updateStartDate(date);
                rangeRef.updateEndDate(null);
            }
        };
        FsMonthRangePickerComponent.prototype.periodChanged = function (date) {
            this.datePickerModel.period = date;
            this.close();
        };
        FsMonthRangePickerComponent.prototype.setDateMode = function (mode) {
            this.datePickerModel.dateMode = mode;
        };
        FsMonthRangePickerComponent.prototype.close = function () {
            this.dialogRef.close();
        };
        FsMonthRangePickerComponent.prototype._initMonthRangeModels = function () {
            this.leftCalendarDate$ = this.datePickerModel.calendarDate$;
            this.rightCalendarDate$ = this.datePickerModel.calendarDate$
                .pipe(operators.map(function (value) { return value && dateFns.addMonths(value, 1) || null; }));
            this.modelFrom$ = this.datePickerModel
                .rangePickerRef
                .startDate$
                .pipe(operators.shareReplay());
            this.modelTo$ = this.datePickerModel
                .rangePickerRef
                .endDate$
                .pipe(operators.shareReplay());
        };
        return FsMonthRangePickerComponent;
    }());
    FsMonthRangePickerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsMonthRangePickerComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    FsMonthRangePickerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsMonthRangePickerComponent, selector: "fs-datepicker-month-range-picker", inputs: { dialogRef: "dialogRef", datePickerModel: "datePickerModel" }, usesOnChanges: true, ngImport: i0__namespace, template: "<div class=\"calendar-container\">\n  <div class=\"date-time\">\n    <div class=\"calendar-view\">\n      <fs-date-picker-header-month-range\n        [calendarDate]=\"leftCalendarDate$ | async\"\n        [nextCalendarDate]=\"rightCalendarDate$ | async\"\n        (goNextMonth)=\"nextMonth()\"\n        (goPrevMonth)=\"prevMonth()\"\n      >\n      </fs-date-picker-header-month-range>\n\n      <div class=\"month-range-container\">\n        <fs-date-picker-calendar\n          [rangeFrom]=\"modelFrom$ | async\"\n          [rangeTo]=\"modelTo$ | async\"\n          [drawMonth]=\"leftCalendarDate$ | async\"\n          [dateMode]=\"datePickerModel.calendarMode$ | async\"\n          [highlightStartDate]=\"modelFrom$ | async\"\n          [highlightEndDate]=\"modelTo$ | async\"\n          [disabledDays]=\"datePickerModel.disabledDays$ | async\"\n          [hideExtraDays]=\"true\"\n          (change)=\"dateChanged($event)\">\n        </fs-date-picker-calendar>\n\n        <fs-date-picker-calendar\n          [rangeFrom]=\"modelFrom$ | async\"\n          [rangeTo]=\"modelTo$ | async\"\n          [highlightStartDate]=\"modelFrom$ | async\"\n          [highlightEndDate]=\"modelTo$ | async\"\n          [drawMonth]=\"rightCalendarDate$ | async\"\n          [dateMode]=\"datePickerModel.calendarMode$ | async\"\n          [disabledDays]=\"datePickerModel.disabledDays$ | async\"\n          [hideExtraDays]=\"true\"\n          (change)=\"dateChanged($event)\">\n        </fs-date-picker-calendar>\n      </div>\n    </div>\n\n    <ng-container\n      *ngIf=\"datePickerModel.dateMode !== 'year' && datePickerModel.dateMode !== 'month'\">\n      <fs-date-picker-time\n        *ngIf=\"datePickerModel.view === 'datetime' || datePickerModel.view === 'time'\"\n        [date]=\"datePickerModel.model$ | async\"\n        [minutes]=\"datePickerModel.minutes\"\n        [disabledTimes]=\"datePickerModel.disabledTimes$ | async\"\n        (onChange)=\"dateChanged($event)\"\n      ></fs-date-picker-time>\n    </ng-container>\n  </div>\n\n  <div class=\"buttons\">\n    <button class=\"button-done\" type=\"button\" mat-button color=\"primary\" (click)=\"close()\">Done</button>\n  </div>\n</div>\n", styles: [".month-range-container{display:grid;grid-template-columns:1fr 1fr;grid-column-gap:40px;align-items:start;min-height:265px}fs-date-picker-calendar{display:flex}\n"], components: [{ type: FsDatePickerHeaderMonthRangeComponent, selector: "fs-date-picker-header-month-range", inputs: ["calendarDate", "nextCalendarDate"], outputs: ["goNextMonth", "goPrevMonth"] }, { type: FsDatePickerCalendarComponent, selector: "fs-date-picker-calendar", inputs: ["date", "period", "rangeFrom", "rangeTo", "highlightStartDate", "highlightEndDate", "dateMode", "disabledDays", "drawMonth", "seedDate", "periodWeeks", "hideExtraDays"], outputs: ["change", "rangeChange", "periodChange", "hoverDay"] }, { type: FsDatePickerTimeComponent, selector: "fs-date-picker-time", inputs: ["date", "disabledMinutes", "disabledHours", "disabledTimes", "expanded", "minutes", "showNotSelected"], outputs: ["onChange"] }, { type: i4__namespace$1.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], directives: [{ type: i1__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i1__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsMonthRangePickerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'fs-datepicker-month-range-picker',
                        templateUrl: './month-range-picker.component.html',
                        styleUrls: ['./month-range-picker.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return []; }, propDecorators: { dialogRef: [{
                    type: i0.Input
                }], datePickerModel: [{
                    type: i0.Input
                }] } });

    var FsDatePickerHeaderComponent = /** @class */ (function () {
        function FsDatePickerHeaderComponent(_elRef) {
            this._elRef = _elRef;
            this.monthChange = new i0.EventEmitter();
            this.yearChange = new i0.EventEmitter();
            this.goNextMonth = new i0.EventEmitter();
            this.goPrevMonth = new i0.EventEmitter();
            this.viewModeChange = new i0.EventEmitter();
            this.now = new Date();
            this.monthNow = this.now.getMonth();
            this.yearNow = this.now.getFullYear();
            this.yearsList = [];
            this.monthList = [];
        }
        Object.defineProperty(FsDatePickerHeaderComponent.prototype, "calendarMonth", {
            get: function () {
                var _a;
                return (_a = this.calendarDate) === null || _a === void 0 ? void 0 : _a.getMonth();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerHeaderComponent.prototype, "calendarYear", {
            get: function () {
                var _a;
                return (_a = this.calendarDate) === null || _a === void 0 ? void 0 : _a.getFullYear();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerHeaderComponent.prototype, "calendarDay", {
            get: function () {
                var _a;
                return (_a = this.calendarDate) === null || _a === void 0 ? void 0 : _a.getDate();
            },
            enumerable: false,
            configurable: true
        });
        FsDatePickerHeaderComponent.prototype.ngOnChanges = function (changes) {
        };
        FsDatePickerHeaderComponent.prototype.ngAfterViewInit = function () {
            this._createMonthsList();
            this._createYearsList();
        };
        FsDatePickerHeaderComponent.prototype.selectMonth = function (month) {
            this.monthChange.emit(month);
            this.setViewMode('date');
        };
        FsDatePickerHeaderComponent.prototype.selectYear = function (year) {
            this.yearChange.emit(year);
            this.setViewMode('date');
        };
        FsDatePickerHeaderComponent.prototype.setViewMode = function (mode) {
            this.viewModeChange.emit(mode);
            this._scrollToSelectedYear();
            this._scrollToSelectedMonth();
        };
        FsDatePickerHeaderComponent.prototype.nextMonth = function () {
            this.goNextMonth.emit();
        };
        FsDatePickerHeaderComponent.prototype.prevMonth = function () {
            this.goPrevMonth.emit();
        };
        FsDatePickerHeaderComponent.prototype._createYearsList = function () {
            this.yearsList = [];
            for (var y = this.minYear; y < this.maxYear; y++) {
                var year = new Date().setFullYear(y);
                this.yearsList.push({ value: y, disabled: this._isYearDisabled(year) });
            }
        };
        FsDatePickerHeaderComponent.prototype._createMonthsList = function () {
            var e_1, _b;
            var year = this.calendarMonth ? this.calendarYear : this.now.getFullYear();
            var checkIfMonthDisabled = function (monthNumber, disabledDays) {
                var month = new Date();
                month.setFullYear(year);
                month.setMonth(monthNumber);
                return isMonthDisabled(month, disabledDays);
            };
            this.monthList = [];
            try {
                for (var MONTHS_1 = __values(MONTHS$1), MONTHS_1_1 = MONTHS_1.next(); !MONTHS_1_1.done; MONTHS_1_1 = MONTHS_1.next()) {
                    var item = MONTHS_1_1.value;
                    var monthItem = Object.assign(Object.assign({}, item), { disabled: checkIfMonthDisabled(item.value, this.disabledDays) });
                    this.monthList.push(monthItem);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (MONTHS_1_1 && !MONTHS_1_1.done && (_b = MONTHS_1.return)) _b.call(MONTHS_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        FsDatePickerHeaderComponent.prototype._isYearDisabled = function (date) {
            var startYear = dateFns.startOfYear(date);
            var endYear = dateFns.endOfYear(date);
            return isRangeDisabled(this.disabledDays, startYear, endYear);
        };
        FsDatePickerHeaderComponent.prototype._scrollToSelectedYear = function () {
            var _this = this;
            setTimeout(function () {
                var years = _this._elRef.nativeElement.querySelector('.years');
                var selected = years.querySelector('.year.selected');
                if (selected) {
                    selected.scrollIntoView({ behavior: 'auto', block: 'center' });
                }
            });
        };
        FsDatePickerHeaderComponent.prototype._scrollToSelectedMonth = function () {
            var _this = this;
            setTimeout(function () {
                var years = _this._elRef.nativeElement.querySelector('.months');
                var selected = years.querySelector('.month.selected');
                if (selected) {
                    selected.scrollIntoView({ behavior: 'auto', block: 'center' });
                }
            });
        };
        return FsDatePickerHeaderComponent;
    }());
    FsDatePickerHeaderComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerHeaderComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FsDatePickerHeaderComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDatePickerHeaderComponent, selector: "fs-date-picker-header", inputs: { viewMode: "viewMode", minYear: "minYear", maxYear: "maxYear", disabledDays: "disabledDays", calendarDate: "calendarDate" }, outputs: { monthChange: "monthChange", yearChange: "yearChange", goNextMonth: "goNextMonth", goPrevMonth: "goPrevMonth", viewModeChange: "viewModeChange" }, usesOnChanges: true, ngImport: i0__namespace, template: "<div class=\"months-years\" *ngIf=\"viewMode == 'month' || viewMode == 'year'\">\n  <div class=\"months\">\n    <div\n      *ngFor=\"let month of monthList\"\n      (click)=\"selectMonth(month.value)\"\n      class=\"month\"\n      [ngClass]=\"{\n          now: monthNow == month.value,\n          selected: calendarMonth === month.value,\n          disabled: month.disabled\n        }\">\n      <div class=\"tile-content\">{{ month.abr }}</div>\n    </div>\n  </div>\n\n  <div class=\"years\">\n    <ng-container *ngFor=\"let year of yearsList;\">\n      <div\n        class=\"year data-year-{{ year.value }}\"\n        (click)=\"selectYear(year.value)\"\n        [class.now]=\"yearNow == year.value\"\n        [class.selected]=\"calendarYear === year.value\"\n        [class.disabled]=\"year.disabled\">\n        <div class=\"tile-content\">{{ year.value }}</div>\n      </div>\n    </ng-container>\n    <div class=\"clear\"></div>\n  </div>\n</div>\n\n<div *ngIf=\"viewMode == 'week' || viewMode == 'date' || viewMode == 'datetime' || viewMode == 'monthrange'\" class=\"calendar\">\n  <div class=\"month-year\">\n    <a class=\"month-year-name\" (click)=\"setViewMode('month')\">\n      {{ calendarDate | fsDateFormat: 'full-date-dayless-yearless' }}\n\n      <span *ngIf=\"calendarDay\" class=\"day-name\">\n        {{ calendarDay }},\n      </span>\n\n      {{ calendarYear }}\n      <mat-icon class=\"action\">arrow_drop_down</mat-icon>\n    </a>\n\n    <div class=\"gap\"></div>\n\n    <div class=\"action\">\n      <a (click)=\"prevMonth()\" class=\"action\">\n        <mat-icon>navigate_before</mat-icon>\n      </a>\n      <a (click)=\"nextMonth()\" class=\"action\">\n        <mat-icon>navigate_next</mat-icon>\n      </a>\n    </div>\n  </div>\n\n</div>\n", styles: [".months{width:350px}.month-year-name{color:inherit;border-radius:3px;display:flex;align-items:center;padding:5px 5px 5px 10px}.month-year-name:hover{background-color:#eaeaea;border-radius:3px}.day-name{padding:0 4px}.actions a{padding:6px;color:#757575}a.action{color:#757575}.months-years{display:flex;height:100%;min-width:350px}.months-years .years{overflow:auto;width:100%}.months-years .years .year{text-align:center;height:50px;line-height:50px;outline:none;cursor:pointer;box-sizing:border-box}.months-years .months{width:100%;height:100%;overflow:auto}.months-years .months .tile-content{width:50px;height:50px}.months-years .months .month{text-align:center;display:flex;justify-content:center;flex-direction:column;cursor:pointer;outline:none;border-bottom:0;border-right:0;box-sizing:border-box}\n"], components: [{ type: i1__namespace$1.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }], directives: [{ type: i1__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "fsDateFormat": i3__namespace.FsDateFormatPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerHeaderComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'fs-date-picker-header',
                        templateUrl: './header.component.html',
                        styleUrls: [
                            './header.component.scss',
                        ],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { viewMode: [{
                    type: i0.Input
                }], minYear: [{
                    type: i0.Input
                }], maxYear: [{
                    type: i0.Input
                }], disabledDays: [{
                    type: i0.Input
                }], calendarDate: [{
                    type: i0.Input
                }], monthChange: [{
                    type: i0.Output
                }], yearChange: [{
                    type: i0.Output
                }], goNextMonth: [{
                    type: i0.Output
                }], goPrevMonth: [{
                    type: i0.Output
                }], viewModeChange: [{
                    type: i0.Output
                }] } });

    var FsDesktopDatePickerComponent = /** @class */ (function () {
        function FsDesktopDatePickerComponent() {
            this.timePickerExpanded = false;
        }
        FsDesktopDatePickerComponent.prototype.viewModeChanged = function (mode) {
            this.datePickerModel.setCalendarMode(mode);
        };
        FsDesktopDatePickerComponent.prototype.monthChanged = function (month) {
            this.datePickerModel.setCalendarMonth(month);
        };
        FsDesktopDatePickerComponent.prototype.yearChanged = function (year) {
            this.datePickerModel.setCalendarYear(year);
        };
        FsDesktopDatePickerComponent.prototype.nextMonth = function () {
            this.datePickerModel.nextMonth();
        };
        FsDesktopDatePickerComponent.prototype.prevMonth = function () {
            this.datePickerModel.prevMonth();
        };
        FsDesktopDatePickerComponent.prototype.dateChanged = function (date) {
            this.datePickerModel.model = date;
            if (!this.datePickerModel.isDateTimeView && !this.datePickerModel.isTimeView) {
                this.close();
            }
        };
        FsDesktopDatePickerComponent.prototype.periodChanged = function (date) {
            this.datePickerModel.period = date;
            this.close();
        };
        FsDesktopDatePickerComponent.prototype.toggleTimeExpand = function () {
            this.timePickerExpanded = !this.timePickerExpanded;
        };
        FsDesktopDatePickerComponent.prototype.setDateMode = function (mode) {
            this.datePickerModel.dateMode = mode;
        };
        FsDesktopDatePickerComponent.prototype.close = function () {
            this.dialogRef.close();
        };
        return FsDesktopDatePickerComponent;
    }());
    FsDesktopDatePickerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDesktopDatePickerComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    FsDesktopDatePickerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDesktopDatePickerComponent, selector: "fs-datepicker-desktop-datepicker", inputs: { dialogRef: "dialogRef", datePickerModel: "datePickerModel" }, ngImport: i0__namespace, template: "<div class=\"calendar-container\">\n  <div class=\"date-time\">\n    <div class=\"calendar-view\">\n      <fs-date-picker-header\n        [calendarDate]=\"datePickerModel.calendarDate$ | async\"\n        [minYear]=\"datePickerModel.minYear\"\n        [maxYear]=\"datePickerModel.maxYear\"\n        [viewMode]=\"datePickerModel.calendarMode$ | async\"\n        [disabledDays]=\"datePickerModel.disabledDays$ | async\"\n        (viewModeChange)=\"viewModeChanged($event)\"\n        (monthChange)=\"monthChanged($event)\"\n        (yearChange)=\"yearChanged($event)\"\n        (goNextMonth)=\"nextMonth()\"\n        (goPrevMonth)=\"prevMonth()\"\n      >\n      </fs-date-picker-header>\n\n      <ng-container *ngIf=\"dialogRef.components.calendarStart\">\n        <fs-date-picker-calendar\n          [date]=\"datePickerModel.model$ | async\"\n          [drawMonth]=\"datePickerModel.calendarDate$ | async\"\n          [dateMode]=\"datePickerModel.calendarMode$ | async\"\n          [disabledDays]=\"datePickerModel.disabledDays$ | async\"\n          [period]=\"datePickerModel.period\"\n          [seedDate]=\"datePickerModel.seedDate\"\n          [periodWeeks]=\"datePickerModel.periodWeeks\"\n          (change)=\"dateChanged($event)\"\n          (periodChange)=\"periodChanged($event)\">\n        </fs-date-picker-calendar>\n      </ng-container>\n    </div>\n\n    <ng-container\n      *ngIf=\"datePickerModel.dateMode !== 'year' && datePickerModel.dateMode !== 'month'\">\n      <fs-date-picker-time\n        *ngIf=\"datePickerModel.view === 'datetime' || datePickerModel.view === 'time'\"\n        [date]=\"datePickerModel.model$ | async\"\n        [minutes]=\"datePickerModel.minutes\"\n        [disabledTimes]=\"datePickerModel.disabledTimes$ | async\"\n        [expanded]=\"timePickerExpanded\"\n        (onChange)=\"dateChanged($event)\"\n      ></fs-date-picker-time>\n    </ng-container>\n  </div>\n\n  <div class=\"buttons\">\n    <button class=\"button-done\" type=\"button\" mat-button color=\"primary\" (click)=\"close()\">Done</button>\n    <button type=\"button\"\n            mat-button\n            class=\"button-more\"\n            *ngIf=\"datePickerModel.minutes\n                   && (datePickerModel.view === 'datetime' || datePickerModel.view === 'time')\n                   && !(datePickerModel.view === 'datetime' && datePickerModel.dateMode === 'date')\"\n            (click)=\"toggleTimeExpand()\">\n      <ng-container *ngIf=\"!timePickerExpanded; else lessMinutes\">\n        More Minutes\n      </ng-container>\n      <ng-template #lessMinutes>\n        Less Minutes\n      </ng-template>\n    </button>\n  </div>\n</div>\n", styles: [".date-time{display:flex}\n"], components: [{ type: FsDatePickerHeaderComponent, selector: "fs-date-picker-header", inputs: ["viewMode", "minYear", "maxYear", "disabledDays", "calendarDate"], outputs: ["monthChange", "yearChange", "goNextMonth", "goPrevMonth", "viewModeChange"] }, { type: FsDatePickerCalendarComponent, selector: "fs-date-picker-calendar", inputs: ["date", "period", "rangeFrom", "rangeTo", "highlightStartDate", "highlightEndDate", "dateMode", "disabledDays", "drawMonth", "seedDate", "periodWeeks", "hideExtraDays"], outputs: ["change", "rangeChange", "periodChange", "hoverDay"] }, { type: FsDatePickerTimeComponent, selector: "fs-date-picker-time", inputs: ["date", "disabledMinutes", "disabledHours", "disabledTimes", "expanded", "minutes", "showNotSelected"], outputs: ["onChange"] }, { type: i4__namespace$1.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], directives: [{ type: i1__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i1__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDesktopDatePickerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'fs-datepicker-desktop-datepicker',
                        templateUrl: './date-picker.component.html',
                        styleUrls: ['./date-picker.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return []; }, propDecorators: { dialogRef: [{
                    type: i0.Input
                }], datePickerModel: [{
                    type: i0.Input
                }] } });

    var FsDesktopCalendarDialogComponent = /** @class */ (function () {
        function FsDesktopCalendarDialogComponent(_dialogRef) {
            this._dialogRef = _dialogRef;
        }
        Object.defineProperty(FsDesktopCalendarDialogComponent.prototype, "datePickerModel", {
            get: function () {
                return this._dialogRef.pickerModel;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDesktopCalendarDialogComponent.prototype, "dialogRef", {
            get: function () {
                return this._dialogRef;
            },
            enumerable: false,
            configurable: true
        });
        return FsDesktopCalendarDialogComponent;
    }());
    FsDesktopCalendarDialogComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDesktopCalendarDialogComponent, deps: [{ token: FsDatePickerDialogRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FsDesktopCalendarDialogComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDesktopCalendarDialogComponent, selector: "ng-component", ngImport: i0__namespace, template: "<div\n  class=\"fs-date-picker-dialog fs-date-picker-dialog-shadow opened {{ 'dialog-view-' + datePickerModel.view }}\"\n  tabindex=\"0\"\n  [ngClass]=\"{\n      'has-view-date': datePickerModel.view === 'date' || datePickerModel.view === 'datetime',\n      'has-view-time': datePickerModel.view === 'time' || datePickerModel.view === 'datetime',\n      'date-mode-date-time': (datePickerModel.calendarMode$ | async) === 'datetime',\n      'date-mode-date': (datePickerModel.calendarMode$ | async) === 'date',\n      'date-mode-time': (datePickerModel.calendarMode$ | async) === 'time',\n      'date-mode-month': (datePickerModel.calendarMode$ | async) === 'month',\n      'date-mode-year': (datePickerModel.calendarMode$ | async) === 'year',\n      'date-mode-week': (datePickerModel.calendarMode$ | async) === 'week'\n    }\">\n\n  <ng-container *ngIf=\"datePickerModel.view === 'monthrange' else defaultPicker\">\n    <fs-datepicker-month-range-picker [dialogRef]=\"dialogRef\" [datePickerModel]=\"datePickerModel\">\n    </fs-datepicker-month-range-picker>\n  </ng-container>\n\n  <ng-template #defaultPicker>\n    <fs-datepicker-desktop-datepicker [dialogRef]=\"dialogRef\" [datePickerModel]=\"datePickerModel\">\n    </fs-datepicker-desktop-datepicker>\n  </ng-template>\n</div>\n", styles: [":host ::ng-deep .dialog-view-datetime fs-date-picker-time{margin-left:20px}:host ::ng-deep fs-date-picker-calendar{display:none}:host ::ng-deep .date-mode-time .month-year.time{display:none}:host ::ng-deep .date-mode-date fs-date-picker-calendar,:host ::ng-deep .date-mode-date-time fs-date-picker-calendar,:host ::ng-deep .date-mode-week fs-date-picker-calendar{display:flex;flex:1}\n"], components: [{ type: FsMonthRangePickerComponent, selector: "fs-datepicker-month-range-picker", inputs: ["dialogRef", "datePickerModel"] }, { type: FsDesktopDatePickerComponent, selector: "fs-datepicker-desktop-datepicker", inputs: ["dialogRef", "datePickerModel"] }], directives: [{ type: i1__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i1__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDesktopCalendarDialogComponent, decorators: [{
                type: i0.Component,
                args: [{
                        templateUrl: './desktop-dialog.component.html',
                        styleUrls: ['./desktop-dialog.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: FsDatePickerDialogRef }]; } });

    var MOBILE_BREAKPOINT = '(max-width: 737px)';
    var FsDatePickerDialogFactory = /** @class */ (function () {
        function FsDatePickerDialogFactory(_overlay, _breakpointObserver, _bottomSheet, _document) {
            this._overlay = _overlay;
            this._breakpointObserver = _breakpointObserver;
            this._bottomSheet = _bottomSheet;
            this._document = _document;
            this._resolutionChanged = false;
        }
        Object.defineProperty(FsDatePickerDialogFactory.prototype, "_ESCKeyPressed$", {
            get: function () {
                return rxjs.fromEvent(this._document, 'keydown')
                    .pipe(operators.filter(function (event) {
                    return event.code === 'Escape';
                }));
            },
            enumerable: false,
            configurable: true
        });
        FsDatePickerDialogFactory.prototype.openDatePicker = function (el, injector, options) {
            this._targetElRef = el;
            var dateDialogRef = new FsDatePickerDialogRef(options);
            this._openDatePicker(injector, 'date', dateDialogRef);
            return dateDialogRef;
        };
        FsDatePickerDialogFactory.prototype.openDateScrollPicker = function (el, injector, options) {
            this._targetElRef = el;
            var dateDialogRef = new FsDatePickerDialogRef(options);
            this._openDatePicker(injector, 'scroll', dateDialogRef);
            return dateDialogRef;
        };
        FsDatePickerDialogFactory.prototype._openDatePicker = function (injector, type, dialogRef) {
            var _this = this;
            var layoutChanges = this._breakpointObserver
                .observe([
                MOBILE_BREAKPOINT,
            ])
                .pipe(operators.map(function (result) {
                return result.breakpoints[MOBILE_BREAKPOINT];
            }));
            layoutChanges
                .pipe(operators.map(function (mobile) {
                return _this._openDatePickerComponent(mobile, injector, type, dialogRef);
            }), operators.tap(function (ref) {
                dialogRef.pickerOverlayRef.setActiveOverlay(ref);
            }), operators.take(1), operators.switchMap(function () {
                return layoutChanges
                    .pipe(operators.skip(1));
            }), operators.debounceTime(100), operators.distinctUntilChanged(), operators.tap(function () {
                _this._resolutionChanged = true;
            }), operators.tap(function () {
                dialogRef.pickerOverlayRef.close();
            }), operators.map(function (mobile) {
                return _this._openDatePickerComponent(mobile, injector, type, dialogRef);
            }), operators.tap(function (ref) {
                dialogRef.pickerOverlayRef.setActiveOverlay(ref);
            }), operators.tap(function () {
                _this._resolutionChanged = false;
            }), operators.finalize(function () {
                dialogRef.close();
            }), operators.takeUntil(dialogRef.pickerOverlayRef.destroy$
                .pipe(operators.filter(function () { return !_this._resolutionChanged; }))), operators.takeUntil(dialogRef.close$), operators.takeUntil(this._ESCKeyPressed$))
                .subscribe();
        };
        FsDatePickerDialogFactory.prototype._openDatePickerComponent = function (mobile, injector, type, dialogRef) {
            if (mobile) {
                if (type === 'date') {
                    return this._openDatePickerMobile(dialogRef);
                }
                else {
                    return this._openDateScrollPickerMobile(dialogRef);
                }
            }
            else {
                if (type === 'date') {
                    return this._openDatePickerDesktop(injector, dialogRef);
                }
                else {
                    return this._openDateScrollPickerDesktop(injector, dialogRef);
                }
            }
        };
        FsDatePickerDialogFactory.prototype._createOverlay = function (el, config) {
            if (config === void 0) { config = {}; }
            config = Object.assign(Object.assign({}, config), { positionStrategy: this._createPopupPositionStrategy(el), scrollStrategy: this._overlay.scrollStrategies.reposition(), hasBackdrop: true, backdropClass: [], panelClass: 'fs-datepicker-overlay-pane' });
            var overlayConfig = new i1$4.OverlayConfig(config);
            return this._overlay.create(overlayConfig);
        };
        FsDatePickerDialogFactory.prototype._createInjector = function (parentInjector, previewRef) {
            var injectionTokens = new WeakMap([
                [FsDatePickerDialogRef, previewRef],
            ]);
            return new portal.PortalInjector(parentInjector, injectionTokens);
        };
        FsDatePickerDialogFactory.prototype._createPopupPositionStrategy = function (el) {
            return this._createBasePopupPositionStrategy(el)
                .withPositions([
                {
                    originX: 'start',
                    originY: 'bottom',
                    overlayX: 'start',
                    overlayY: 'top',
                    offsetY: 10,
                    offsetX: -29
                },
                {
                    originX: 'end',
                    originY: 'top',
                    overlayX: 'start',
                    overlayY: 'bottom',
                },
                {
                    originX: 'end',
                    originY: 'top',
                    overlayX: 'start',
                    overlayY: 'center',
                },
                {
                    originX: 'end',
                    originY: 'bottom',
                    overlayX: 'start',
                    overlayY: 'bottom',
                },
                {
                    originX: 'start',
                    originY: 'bottom',
                    overlayX: 'end',
                    overlayY: 'top',
                    offsetX: -29,
                },
                {
                    originX: 'start',
                    originY: 'bottom',
                    overlayX: 'end',
                    overlayY: 'center',
                    offsetX: -29,
                },
            ]);
        };
        FsDatePickerDialogFactory.prototype._createBasePopupPositionStrategy = function (el) {
            return this._overlay.position()
                .flexibleConnectedTo(el)
                .withGrowAfterOpen(false)
                .withFlexibleDimensions(false)
                .withPush(false);
        };
        FsDatePickerDialogFactory.prototype._openDatePickerDesktop = function (parentInjector, previewRef) {
            var overlayRef = this._createOverlay(this._targetElRef, {
                positionStrategy: this._createBasePopupPositionStrategy(this._targetElRef),
            });
            var injector = this._createInjector(parentInjector, previewRef);
            var containerPortal = new portal.ComponentPortal(FsDesktopCalendarDialogComponent, undefined, injector);
            overlayRef.attach(containerPortal);
            return overlayRef;
        };
        FsDatePickerDialogFactory.prototype._openDatePickerMobile = function (dialogRef) {
            return this._bottomSheet.open(FsMobileCalendarDialogComponent, {
                data: {
                    dateDialogRef: dialogRef,
                },
                restoreFocus: false,
            });
        };
        FsDatePickerDialogFactory.prototype._openDateScrollPickerDesktop = function (parentInjector, previewRef) {
            var overlayRef = this._createOverlay(this._targetElRef, { scrollStrategy: this._overlay.scrollStrategies.block() });
            var injector = this._createInjector(parentInjector, previewRef);
            var containerPortal = new portal.ComponentPortal(FsDateScrollPickerDesktopComponent, undefined, injector);
            overlayRef.attach(containerPortal);
            return overlayRef;
        };
        FsDatePickerDialogFactory.prototype._openDateScrollPickerMobile = function (dialogRef) {
            return this._bottomSheet.open(FsDateScrollPickerMobileDialogComponent, {
                data: {
                    dateDialogRef: dialogRef,
                }
            });
        };
        return FsDatePickerDialogFactory;
    }());
    FsDatePickerDialogFactory.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerDialogFactory, deps: [{ token: i1__namespace$5.Overlay }, { token: i2__namespace$1.BreakpointObserver }, { token: i1__namespace$2.MatBottomSheet }, { token: i1.DOCUMENT }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    FsDatePickerDialogFactory.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerDialogFactory });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerDialogFactory, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: i1__namespace$5.Overlay }, { type: i2__namespace$1.BreakpointObserver }, { type: i1__namespace$2.MatBottomSheet }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1.DOCUMENT]
                        }] }];
        } });

    var FsDatePickerDesktopDialogContainerModule = /** @class */ (function () {
        function FsDatePickerDesktopDialogContainerModule() {
        }
        return FsDatePickerDesktopDialogContainerModule;
    }());
    FsDatePickerDesktopDialogContainerModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerDesktopDialogContainerModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    FsDatePickerDesktopDialogContainerModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerDesktopDialogContainerModule, declarations: [FsDesktopCalendarDialogComponent,
            FsDatePickerHeaderComponent,
            FsDesktopDatePickerComponent,
            FsMonthRangePickerComponent,
            FsDatePickerHeaderMonthRangeComponent], imports: [i1.CommonModule,
            i4$1.MatButtonModule,
            i1$1.MatIconModule,
            FsDatePickerCalendarModule,
            i3.FsDateModule,
            i4.ScrollingModule], exports: [FsDesktopCalendarDialogComponent] });
    FsDatePickerDesktopDialogContainerModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerDesktopDialogContainerModule, imports: [[
                i1.CommonModule,
                i4$1.MatButtonModule,
                i1$1.MatIconModule,
                FsDatePickerCalendarModule,
                i3.FsDateModule,
                i4.ScrollingModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerDesktopDialogContainerModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1.CommonModule,
                            i4$1.MatButtonModule,
                            i1$1.MatIconModule,
                            FsDatePickerCalendarModule,
                            i3.FsDateModule,
                            i4.ScrollingModule,
                        ],
                        declarations: [
                            FsDesktopCalendarDialogComponent,
                            FsDatePickerHeaderComponent,
                            FsDesktopDatePickerComponent,
                            FsMonthRangePickerComponent,
                            FsDatePickerHeaderMonthRangeComponent,
                        ],
                        exports: [
                            FsDesktopCalendarDialogComponent,
                        ],
                    }]
            }] });

    var FsDatePickerScrollPickerDialogContainerModule = /** @class */ (function () {
        function FsDatePickerScrollPickerDialogContainerModule() {
        }
        return FsDatePickerScrollPickerDialogContainerModule;
    }());
    FsDatePickerScrollPickerDialogContainerModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerScrollPickerDialogContainerModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    FsDatePickerScrollPickerDialogContainerModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerScrollPickerDialogContainerModule, declarations: [FsDateScrollPickerDesktopComponent,
            FsDateScrollPickerMobileDialogComponent,
            FsDateScrollPickerDialogComponent], imports: [i1.CommonModule,
            i2.FormsModule,
            i4$1.MatButtonModule,
            i1$5.FsScrollPickerModule,
            i5.MatListModule], exports: [FsDateScrollPickerDesktopComponent,
            FsDateScrollPickerMobileDialogComponent] });
    FsDatePickerScrollPickerDialogContainerModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerScrollPickerDialogContainerModule, imports: [[
                i1.CommonModule,
                i2.FormsModule,
                i4$1.MatButtonModule,
                i1$5.FsScrollPickerModule,
                i5.MatListModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerScrollPickerDialogContainerModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1.CommonModule,
                            i2.FormsModule,
                            i4$1.MatButtonModule,
                            i1$5.FsScrollPickerModule,
                            i5.MatListModule,
                        ],
                        declarations: [
                            FsDateScrollPickerDesktopComponent,
                            FsDateScrollPickerMobileDialogComponent,
                            FsDateScrollPickerDialogComponent,
                        ],
                        exports: [
                            FsDateScrollPickerDesktopComponent,
                            FsDateScrollPickerMobileDialogComponent,
                        ],
                    }]
            }] });

    var FsDatePickerMobileDialogContainerModule = /** @class */ (function () {
        function FsDatePickerMobileDialogContainerModule() {
        }
        return FsDatePickerMobileDialogContainerModule;
    }());
    FsDatePickerMobileDialogContainerModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerMobileDialogContainerModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    FsDatePickerMobileDialogContainerModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerMobileDialogContainerModule, declarations: [FsMobileCalendarDialogComponent,
            FsDatePickerMobileHeaderComponent,
            FsMobileTimePickerComponent,
            FDatePickerMobileDatetimePickerComponent,
            FsDatePickerMobileHeaderMonthRangeComponent,
            FsDatePickerVirtualScrollCalendarComponent], imports: [i1.CommonModule,
            i1$3.MatTabsModule,
            i4$1.MatButtonModule,
            i1$1.MatIconModule,
            FsDatePickerCalendarModule,
            i3.FsDateModule,
            i4.ScrollingModule,
            i5.MatListModule], exports: [FsMobileCalendarDialogComponent] });
    FsDatePickerMobileDialogContainerModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerMobileDialogContainerModule, imports: [[
                i1.CommonModule,
                i1$3.MatTabsModule,
                i4$1.MatButtonModule,
                i1$1.MatIconModule,
                FsDatePickerCalendarModule,
                i3.FsDateModule,
                i4.ScrollingModule,
                i5.MatListModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerMobileDialogContainerModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1.CommonModule,
                            i1$3.MatTabsModule,
                            i4$1.MatButtonModule,
                            i1$1.MatIconModule,
                            FsDatePickerCalendarModule,
                            i3.FsDateModule,
                            i4.ScrollingModule,
                            i5.MatListModule,
                        ],
                        declarations: [
                            FsMobileCalendarDialogComponent,
                            FsDatePickerMobileHeaderComponent,
                            FsMobileTimePickerComponent,
                            FDatePickerMobileDatetimePickerComponent,
                            FsDatePickerMobileHeaderMonthRangeComponent,
                            FsDatePickerVirtualScrollCalendarComponent,
                        ],
                        exports: [
                            FsMobileCalendarDialogComponent,
                        ],
                    }]
            }] });

    var FsDatePickerDialogModule = /** @class */ (function () {
        function FsDatePickerDialogModule() {
        }
        FsDatePickerDialogModule.forRoot = function () {
            return {
                ngModule: FsDatePickerDialogModule,
                providers: [
                    FsDatePickerDialogFactory,
                ]
            };
        };
        return FsDatePickerDialogModule;
    }());
    FsDatePickerDialogModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerDialogModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    FsDatePickerDialogModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerDialogModule, imports: [FsDatePickerDesktopDialogContainerModule,
            FsDatePickerScrollPickerDialogContainerModule,
            FsDatePickerMobileDialogContainerModule] });
    FsDatePickerDialogModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerDialogModule, imports: [[
                FsDatePickerDesktopDialogContainerModule,
                FsDatePickerScrollPickerDialogContainerModule,
                FsDatePickerMobileDialogContainerModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerDialogModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            FsDatePickerDesktopDialogContainerModule,
                            FsDatePickerScrollPickerDialogContainerModule,
                            FsDatePickerMobileDialogContainerModule,
                        ],
                    }]
            }] });

    function parseDate(value) {
        var parsedDate = new Date(Date.parse(value));
        if (dateFns.isValid(parsedDate)) {
            return parsedDate;
        }
        parsedDate = parseMessyDate__namespace(value);
        if (dateFns.isValid(parsedDate)) {
            return parsedDate;
        }
        return null;
    }

    var FsDatePickerBaseComponent = /** @class */ (function () {
        function FsDatePickerBaseComponent(renderer, elementRef, _cdRef) {
            var _this = this;
            this._cdRef = _cdRef;
            this.change$ = new i0.EventEmitter();
            this.selected$ = new i0.EventEmitter();
            this.blured$ = new i0.EventEmitter();
            this.disabled = false;
            this.readonly = false;
            this.opened = false;
            this.dialog = null;
            this._destroy$ = new rxjs.Subject();
            this._onChange = function (value) { };
            this._onTouch = function () { };
            this._validatorOnChange = function () { };
            this._clear = true;
            this._lastValueValid = false;
            /** The form control validator for whether the input parses. */
            this._parseValidator = function () {
                return _this._lastValueValid
                    ? null
                    : { fsDatepickerParse: 'Invalid Date' };
            };
            this._validator = i2.Validators.compose([this._parseValidator]);
            this.renderer = renderer;
            this.elementRef = elementRef;
        }
        Object.defineProperty(FsDatePickerBaseComponent.prototype, "clear", {
            get: function () {
                return this._clear;
            },
            set: function (value) {
                this._clear = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerBaseComponent.prototype, "timezone", {
            get: function () {
                return this._timezone;
            },
            set: function (value) {
                this._timezone = value;
                this.writeValue(this._originValue);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerBaseComponent.prototype, "readonlyState", {
            set: function (isReadonly) {
                this.readonly = !!isReadonly || isReadonly === '';
            },
            enumerable: false,
            configurable: true
        });
        FsDatePickerBaseComponent.prototype.registerOnChange = function (fn) { this._onChange = fn; };
        FsDatePickerBaseComponent.prototype.registerOnTouched = function (fn) { this._onTouch = fn; };
        FsDatePickerBaseComponent.prototype.registerOnValidatorChange = function (fn) { this._validatorOnChange = fn; };
        FsDatePickerBaseComponent.prototype.ngOnInit = function () {
            var _this = this;
            rxjs.fromEvent(this.el, 'focus')
                .pipe(operators.takeUntil(this._destroy$))
                .subscribe(function () {
                _this.open();
                _this.el.focus();
            });
            rxjs.fromEvent(this.el, 'keydown')
                .pipe(operators.tap(function () { return _this.close(); }), operators.filter(function (event) { return ['Tab', 'Enter', 'Escape'].includes(event.key); }), operators.takeUntil(this._destroy$))
                .subscribe(function (event) {
                if (event.key === 'Enter') {
                    _this.inputChange(_this.el.value);
                }
                _this.close();
                _this.el.blur();
            });
        };
        Object.defineProperty(FsDatePickerBaseComponent.prototype, "el", {
            get: function () {
                return this.elementRef.nativeElement;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsDatePickerBaseComponent.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (value) {
                if (value && this.timezone) {
                    value = dateFnsTz.zonedTimeToUtc(value, this.timezone);
                }
                this._value = value;
                this._lastValueValid = !value || dateFns.isValid(value);
                this._onChange(this.value);
                this.updateInput(this.value);
                this.change$.emit(this.value);
            },
            enumerable: false,
            configurable: true
        });
        FsDatePickerBaseComponent.prototype.writeValue = function (obj) { };
        Object.defineProperty(FsDatePickerBaseComponent.prototype, "dateDialogRef", {
            get: function () {
                return this._dateDialogRef;
            },
            enumerable: false,
            configurable: true
        });
        FsDatePickerBaseComponent.prototype.cleared = function (event) {
            event.stopPropagation();
            event.preventDefault();
            this.value = null;
            this.clearInput();
            this.selected$.next(null);
        };
        FsDatePickerBaseComponent.prototype.ngOnDestroy = function () {
            if (this.dateDialogRef) {
                this.dateDialogRef.close();
            }
            this._destroy$.next();
            this._destroy$.complete();
        };
        FsDatePickerBaseComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
            this._cdRef.markForCheck();
        };
        FsDatePickerBaseComponent.prototype.validate = function (c) {
            return this._validator ? this._validator(c) : null;
        };
        FsDatePickerBaseComponent.prototype.open = function () {
            var _this = this;
            this.renderer.addClass(document.body, 'fs-date-picker-open');
            this.opened = true;
            this._dateDialogRef.value$
                .pipe(operators.takeUntil(this._dateDialogRef.close$), operators.takeUntil(this._destroy$))
                .subscribe(function (value) {
                _this.value = value;
                _this.selected$.emit(value);
            });
            this._dateDialogRef.close$
                .pipe(operators.take(1), operators.takeUntil(this._destroy$))
                .subscribe(function () {
                _this._dateDialogRef = null;
                _this.renderer.removeClass(document.body, 'fs-date-picker-open');
                _this._cdRef.markForCheck();
            });
        };
        FsDatePickerBaseComponent.prototype.clearInput = function () {
            this.elementRef.nativeElement.value = null;
        };
        FsDatePickerBaseComponent.prototype.triggerClick = function () {
            this.el.focus();
            this.el.select();
            this.open();
        };
        FsDatePickerBaseComponent.prototype.updateValue = function (date) {
            this._value = date;
            this._onChange(this.value);
            this._onTouch();
            this.change$.emit(this.value);
        };
        FsDatePickerBaseComponent.prototype.setReadonly = function () {
            var _this = this;
            setTimeout(function () {
                _this.elementRef.nativeElement.setAttribute('readonly', true);
            });
        };
        FsDatePickerBaseComponent.prototype.close = function () {
            if (this._dateDialogRef) {
                this._dateDialogRef.close();
            }
        };
        FsDatePickerBaseComponent.prototype.validateDate = function (date) {
            this._lastValueValid = !date || dateFns.isValid(date);
        };
        FsDatePickerBaseComponent.prototype._inputKeyup = function (event, value) {
            if (event.key === 'Enter') {
                this.inputChange(value);
            }
        };
        FsDatePickerBaseComponent.prototype._inputChange = function (value, target) {
            var _a;
            if (((_a = this.ngModelOptions) === null || _a === void 0 ? void 0 : _a.updateOn) !== 'blur') {
                this.inputChange(value);
            }
        };
        FsDatePickerBaseComponent.prototype._inputBlur = function (value) {
            var _a;
            if (((_a = this.ngModelOptions) === null || _a === void 0 ? void 0 : _a.updateOn) === 'blur') {
                this.inputChange(value);
            }
            this.updateInput(this.value);
            this.blured$.emit(this.value);
        };
        FsDatePickerBaseComponent.prototype.inputChange = function (value) {
            if (!!value) {
                var lastValueWasValid = this._lastValueValid;
                var date = parseDate(value);
                this.validateDate(date);
                if (!dateFns.isEqual(date, this._value)) {
                    this.updateValue(date);
                }
                else if (lastValueWasValid !== this._lastValueValid) {
                    this._validatorOnChange();
                }
            }
            else {
                this.updateValue(null);
            }
        };
        return FsDatePickerBaseComponent;
    }());
    FsDatePickerBaseComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerBaseComponent, deps: [{ token: i0__namespace.Renderer2 }, { token: i0__namespace.ElementRef }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    FsDatePickerBaseComponent.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsDatePickerBaseComponent, inputs: { ngModelOptions: "ngModelOptions", clear: "clear", timezone: "timezone", readonlyState: ["readonly", "readonlyState"] }, outputs: { change$: "change", selected$: "selected", blured$: "blured" }, host: { listeners: { "keyup": "_inputKeyup($event,$event.target.value)", "input": "_inputChange($event.target.value,$event.target)", "blur": "_inputBlur($event.target.value)" }, properties: { "class.fs-input-disabled": "this.disabled", "attr.readonly": "this.readonly", "class.fs-input-readonly": "this.readonly" } }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerBaseComponent, decorators: [{
                type: i0.Directive
            }], ctorParameters: function () { return [{ type: i0__namespace.Renderer2 }, { type: i0__namespace.ElementRef }, { type: i0__namespace.ChangeDetectorRef }]; }, propDecorators: { ngModelOptions: [{
                    type: i0.Input
                }], clear: [{
                    type: i0.Input
                }], timezone: [{
                    type: i0.Input
                }], change$: [{
                    type: i0.Output,
                    args: ['change']
                }], selected$: [{
                    type: i0.Output,
                    args: ['selected']
                }], blured$: [{
                    type: i0.Output,
                    args: ['blured']
                }], disabled: [{
                    type: i0.HostBinding,
                    args: ['class.fs-input-disabled']
                }, {
                    type: i0.HostBinding,
                    args: ['attr.readonly']
                }], readonlyState: [{
                    type: i0.Input,
                    args: ['readonly']
                }], readonly: [{
                    type: i0.HostBinding,
                    args: ['class.fs-input-readonly']
                }, {
                    type: i0.HostBinding,
                    args: ['attr.readonly']
                }], _inputKeyup: [{
                    type: i0.HostListener,
                    args: ['keyup', ['$event', '$event.target.value']]
                }], _inputChange: [{
                    type: i0.HostListener,
                    args: ['input', ['$event.target.value', '$event.target']]
                }], _inputBlur: [{
                    type: i0.HostListener,
                    args: ['blur', ['$event.target.value']]
                }] } });

    function createDateFromValue(value, timezone) {
        if (value && !dateFns.isDate(value)) {
            value = new Date(value);
            if (!dateFns.isValid(value)) {
                value = null;
            }
        }
        if (value && dateFns.isDate(value) && !dateFns.isValid(value)) {
            value = null;
        }
        if (value && timezone) {
            return dateFnsTz.utcToZonedTime(value, timezone);
        }
        return value;
    }

    var ScrollPickerViewType;
    (function (ScrollPickerViewType) {
        ScrollPickerViewType["Date"] = "date";
        ScrollPickerViewType["Month"] = "month";
        ScrollPickerViewType["Year"] = "year";
        ScrollPickerViewType["MonthDay"] = "monthday";
        ScrollPickerViewType["MonthYear"] = "monthyear";
    })(ScrollPickerViewType || (ScrollPickerViewType = {}));

    function formatDateTime(value, dateFormat, customDateFormat, timezone) {
        if (dateFormat === void 0) { dateFormat = PickerViewType.Date; }
        if (customDateFormat === void 0) { customDateFormat = ''; }
        if (lodashEs.isNumber(value)) {
            value = new Date(value);
        }
        else if (typeof value === 'string') {
            value = new Date(value);
            if (!dateFns.isValid(value)) {
                value = Date.parse(value);
            }
        }
        if (value && dateFns.isValid(value)) {
            var formats = [];
            if (customDateFormat) {
                return i3.format(value, customDateFormat, { timezone: timezone });
            }
            else {
                if ([
                    PickerViewType.Date,
                    PickerViewType.MonthRange,
                    PickerViewType.DateTime,
                ].indexOf(dateFormat) != -1) {
                    formats.push('MMM d, yyyy');
                }
                if ([PickerViewType.Time, PickerViewType.DateTime].indexOf(dateFormat) != -1) {
                    formats.push('h:mm aa');
                }
                if (dateFormat === ScrollPickerViewType.MonthDay) {
                    formats.push('MMMM d');
                }
                else if (dateFormat === ScrollPickerViewType.MonthYear) {
                    formats.push('MMMM yyyy');
                }
                else if (dateFormat === ScrollPickerViewType.Year) {
                    formats.push('yyyy');
                }
                else if (dateFormat === ScrollPickerViewType.Month) {
                    formats.push('MMMM');
                }
            }
            return dateFns.format(value, formats.join(' '));
        }
        return '';
    }

    var FsDatePickerTriggerComponent = /** @class */ (function () {
        function FsDatePickerTriggerComponent(matFormField, el) {
            this.matFormField = matFormField;
            this.el = el;
            this.click = new i0.EventEmitter();
        }
        Object.defineProperty(FsDatePickerTriggerComponent.prototype, "isTimeView", {
            get: function () {
                return this.view === PickerViewType.Time;
            },
            enumerable: false,
            configurable: true
        });
        FsDatePickerTriggerComponent.prototype.ngAfterViewInit = function () {
            var _a;
            var matElementRef = this.matFormField._elementRef.nativeElement;
            var infixEl = matElementRef.querySelector('.mat-form-field-infix');
            (_a = matElementRef
                .querySelector('.mat-form-field-flex')) === null || _a === void 0 ? void 0 : _a.insertBefore(this.el.nativeElement.firstChild, infixEl);
        };
        FsDatePickerTriggerComponent.prototype.triggerClick = function (event) {
            event.preventDefault();
            event.stopPropagation();
            this.click.emit();
        };
        return FsDatePickerTriggerComponent;
    }());
    FsDatePickerTriggerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerTriggerComponent, deps: [{ token: i1__namespace$6.MatFormField, optional: true }, { token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FsDatePickerTriggerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDatePickerTriggerComponent, selector: "fs-datepicker-trigger", inputs: { disabled: "disabled", view: "view" }, outputs: { click: "click" }, ngImport: i0__namespace, template: "<div class=\"mat-form-field-preffix fs-date-picker-trigger\" [ngClass]=\"{ disabled: disabled }\">\n  <mat-icon (click)=\"triggerClick($event)\">\n    <ng-container *ngIf=\"isTimeView; else calendarIcon\">\n      schedule\n    </ng-container>\n    <ng-template #calendarIcon>\n      calendar_today\n    </ng-template>\n  </mat-icon>\n</div>\n", styles: [".fs-date-picker-trigger{margin-right:5px;margin-bottom:2px;align-self:flex-end;-webkit-user-select:none;user-select:none}.fs-date-picker-trigger mat-icon{cursor:pointer}.disabled{color:#00000061;pointer-events:none}\n"], components: [{ type: i1__namespace$1.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }], directives: [{ type: i1__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerTriggerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'fs-datepicker-trigger',
                        templateUrl: 'date-picker-trigger.component.html',
                        styleUrls: ['date-picker-trigger.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace$6.MatFormField, decorators: [{
                            type: i0.Optional
                        }] }, { type: i0__namespace.ElementRef }];
        }, propDecorators: { disabled: [{
                    type: i0.Input
                }], view: [{
                    type: i0.Input
                }], click: [{
                    type: i0.Output
                }] } });

    var FsDatePickerComponent = /** @class */ (function (_super) {
        __extends(FsDatePickerComponent, _super);
        function FsDatePickerComponent(elementRef, renderer, injector, _cdRef, fsDatepickerFactory) {
            var _this = _super.call(this, renderer, elementRef, _cdRef) || this;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            _this.injector = injector;
            _this._cdRef = _cdRef;
            _this.fsDatepickerFactory = fsDatepickerFactory;
            _this.minYear = null;
            _this.maxYear = null;
            _this.minDate = null;
            _this.maxDate = null;
            _this.startOfDay = true;
            _this.view = PickerViewType.Date;
            _this.minutes = true;
            _this.change$ = new i0.EventEmitter();
            return _this;
        }
        FsDatePickerComponent.prototype.writeValue = function (value) {
            this._originValue = value;
            this._value = createDateFromValue(value, this.timezone);
            this.validateDate(this.value);
            this.updateInput(this.value);
            this._cdRef.markForCheck();
        };
        FsDatePickerComponent.prototype.updateInput = function (value) {
            if (!this.minutes && value) {
                value.setMinutes(0);
            }
            this.elementRef.nativeElement.value = formatDateTime(value, this.view, this.format, this.timezone);
        };
        FsDatePickerComponent.prototype.open = function () {
            if (this.disabled || this.readonly || this._dateDialogRef) {
                return;
            }
            var modelValue = dateFns.isValid(this.value) ? this.value : null;
            this._dateDialogRef = this.fsDatepickerFactory.openDatePicker(this.elementRef, this.injector, {
                modelValue: modelValue,
                view: this.view,
                minutes: this.minutes,
                minYear: this.minYear,
                maxYear: this.maxYear,
                minDate: this.minDate,
                maxDate: this.maxDate,
                startOfDay: this.startOfDay,
                components: this._getDefaultComponents(),
            });
            _super.prototype.open.call(this);
        };
        FsDatePickerComponent.prototype.updateValue = function (value) {
            if (this.view === PickerViewType.Time && dateFns.isValid(this._value) && dateFns.isValid(value)) {
                this._value.setHours(value.getHours());
                this._value.setMinutes(value.getMinutes());
                this._value.setSeconds(value.getSeconds());
                value = new Date(this._value);
            }
            _super.prototype.updateValue.call(this, value);
        };
        FsDatePickerComponent.prototype._getDefaultComponents = function () {
            if (this.view === 'time') {
                return { timeStart: true };
            }
            else {
                return { calendarStart: true };
            }
        };
        return FsDatePickerComponent;
    }(FsDatePickerBaseComponent));
    FsDatePickerComponent.template = "\n    <fs-clear [show]=\"value && !disabled && !readonly && clear\" (clear)=\"cleared($event)\"></fs-clear>\n    <fs-datepicker-trigger (click)=\"triggerClick()\" [disabled]=\"disabled || readonly\" [view]=\"view\"></fs-datepicker-trigger>\n  ";
    FsDatePickerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerComponent, deps: [{ token: i0.ElementRef }, { token: i0__namespace.Renderer2 }, { token: i0__namespace.Injector }, { token: i0__namespace.ChangeDetectorRef }, { token: FsDatePickerDialogFactory }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FsDatePickerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDatePickerComponent, selector: "[fsDatePicker]", inputs: { minYear: "minYear", maxYear: "maxYear", minDate: "minDate", maxDate: "maxDate", startOfDay: "startOfDay", view: "view", format: "format", minutes: "minutes" }, outputs: { change$: "change" }, providers: [
            {
                provide: i2.NG_VALUE_ACCESSOR,
                useExisting: i0.forwardRef(function () { return FsDatePickerComponent; }),
                multi: true,
            },
            {
                provide: i2.NG_VALIDATORS,
                useExisting: i0.forwardRef(function () { return FsDatePickerComponent; }),
                multi: true,
            }
        ], usesInheritance: true, ngImport: i0__namespace, template: "\n    <fs-clear [show]=\"value && !disabled && !readonly && clear\" (clear)=\"cleared($event)\"></fs-clear>\n    <fs-datepicker-trigger (click)=\"triggerClick()\" [disabled]=\"disabled || readonly\" [view]=\"view\"></fs-datepicker-trigger>\n  ", isInline: true, components: [{ type: i1__namespace$7.FsClearElementComponent, selector: "fs-clear", inputs: ["show"], outputs: ["clear"] }, { type: FsDatePickerTriggerComponent, selector: "fs-datepicker-trigger", inputs: ["disabled", "view"], outputs: ["click"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: '[fsDatePicker]',
                        template: FsDatePickerComponent.template,
                        providers: [
                            {
                                provide: i2.NG_VALUE_ACCESSOR,
                                useExisting: i0.forwardRef(function () { return FsDatePickerComponent; }),
                                multi: true,
                            },
                            {
                                provide: i2.NG_VALIDATORS,
                                useExisting: i0.forwardRef(function () { return FsDatePickerComponent; }),
                                multi: true,
                            }
                        ],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () {
            return [{ type: i0__namespace.ElementRef, decorators: [{
                            type: i0.Inject,
                            args: [i0.ElementRef]
                        }] }, { type: i0__namespace.Renderer2 }, { type: i0__namespace.Injector }, { type: i0__namespace.ChangeDetectorRef }, { type: FsDatePickerDialogFactory }];
        }, propDecorators: { minYear: [{
                    type: i0.Input
                }], maxYear: [{
                    type: i0.Input
                }], minDate: [{
                    type: i0.Input
                }], maxDate: [{
                    type: i0.Input
                }], startOfDay: [{
                    type: i0.Input
                }], view: [{
                    type: i0.Input
                }], format: [{
                    type: i0.Input
                }], minutes: [{
                    type: i0.Input
                }], change$: [{
                    type: i0.Output,
                    args: ['change']
                }] } });

    var DateRangeSeparatorComponent = /** @class */ (function () {
        function DateRangeSeparatorComponent() {
        }
        return DateRangeSeparatorComponent;
    }());
    DateRangeSeparatorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DateRangeSeparatorComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    DateRangeSeparatorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DateRangeSeparatorComponent, selector: "fs-date-range-separator", ngImport: i0__namespace, template: 'to', isInline: true, styles: [":host{display:inline-block;padding:0 10px}\n"], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DateRangeSeparatorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'fs-date-range-separator',
                        template: 'to',
                        styleUrls: ['./date-range-separator.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }] });

    function isSameDate(startDate, endDate) {
        return dateFns.lightFormat(startDate, 'yyyy-MM-dd') === dateFns.lightFormat(endDate, 'yyyy-MM-dd');
    }

    var RangePickerComponent = /** @class */ (function () {
        function RangePickerComponent(_elRef, _injector, _datepickerFactory, _type, _cdRef, _ngControl) {
            var _this = this;
            this._elRef = _elRef;
            this._injector = _injector;
            this._datepickerFactory = _datepickerFactory;
            this._type = _type;
            this._cdRef = _cdRef;
            this._ngControl = _ngControl;
            this.view = PickerViewType.Date;
            this.minYear = null;
            this.maxYear = null;
            this.minDate = null;
            this.maxDate = null;
            this.clear = true;
            this.disabled = false;
            this.readonly = false;
            this.onTouch = function () { };
            this._destroy$ = new rxjs.Subject();
            this._lastValueValid = false;
            /** The form control validator for whether the input parses. */
            this._parseValidator = function () {
                return _this._lastValueValid
                    ? null
                    : { fsDatepickerParse: 'Invalid Date' };
            };
            this._ngControl.valueAccessor = this;
            this._elRef.nativeElement.setAttribute('autocomplete', 'off');
        }
        Object.defineProperty(RangePickerComponent.prototype, "readonlyState", {
            set: function (isReadonly) {
                this.readonly = !!isReadonly || isReadonly === '';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RangePickerComponent.prototype, "timezone", {
            get: function () {
                return this._timezone;
            },
            set: function (value) {
                this._timezone = value;
                this._tzChanged(this._originValue);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RangePickerComponent.prototype, "name", {
            get: function () {
                return this._name;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RangePickerComponent.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (value) {
                if (this._value !== value) {
                    this._value = value;
                    this.onChange(value);
                    this.onTouch(value);
                }
            },
            enumerable: false,
            configurable: true
        });
        RangePickerComponent.prototype.ngOnInit = function () {
            var control = this._ngControl.control;
            var validators = control.validator
                ? [control.validator, this._parseValidator]
                : this._parseValidator;
            control.setValidators(validators);
            control.updateValueAndValidity();
        };
        Object.defineProperty(RangePickerComponent.prototype, "dateDialogRef", {
            get: function () {
                return this._dateDialogRef;
            },
            enumerable: false,
            configurable: true
        });
        RangePickerComponent.prototype.writeValue = function (value) {
            value = this._processInputDate(value);
            this._originValue = value;
            this.validateDate(value);
            var _d = __read(this._checkValuesEquality(value, this.value), 1), valuesAreDates = _d[0];
            if ((valuesAreDates) || (!valuesAreDates && this.value !== value)) {
                this._value = value;
                this.updateInput(this._value);
                this._cdRef.markForCheck();
            }
        };
        RangePickerComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
        };
        RangePickerComponent.prototype.open = function () {
            var _this = this;
            if (this._dateDialogRef || this.disabled || this.readonly) {
                return;
            }
            //this._disableInput();
            this._dateDialogRef = this._datepickerFactory.openDatePicker(this._elRef, this._injector, {
                view: this.view,
                minYear: this.minYear,
                maxYear: this.maxYear,
                minDate: this._getPickerStartDate() || this.minDate,
                maxDate: this.maxDate,
                components: this._getDefaultComponents(),
                modelValue: this.value,
                pickerRef: this._pickerRef,
                rangeType: this._type
            });
            this._elRef.nativeElement.focus();
            this._listenDialogValueChanges();
            this._dateDialogRef.close$
                .pipe(operators.take(1), operators.takeUntil(this._destroy$))
                .subscribe(function () {
                _this._dateDialogRef = null;
                _this._enableInput();
                _this._cdRef.markForCheck();
            });
        };
        /**
         * Set value which was selected in dialog
         * @param value
         */
        RangePickerComponent.prototype.updateValueFromDialog = function (value) {
            this.updateValue(value);
            // this.writeValue(value);
        };
        RangePickerComponent.prototype.updateValue = function (value) {
            if (this.view === PickerViewType.Time && dateFns.isValid(this._value) && dateFns.isValid(value)) {
                this._value.setHours(value.getHours());
                this._value.setMinutes(value.getMinutes());
                this._value.setSeconds(value.getSeconds());
                value = new Date(this._value);
            }
            this._value = value;
            this.updateInput(this._value);
            if (value && this.timezone) {
                value = dateFnsTz.zonedTimeToUtc(value, this.timezone);
            }
            this.onChange(value);
            this.onTouch(value);
        };
        RangePickerComponent.prototype.updateInput = function (value) {
            this._elRef.nativeElement.value = formatDateTime(value, this.view, this.format, this.timezone);
        };
        RangePickerComponent.prototype._inputKeyup = function (event, value) {
            if (event.key === 'Enter') {
                this.inputChange(value);
            }
        };
        RangePickerComponent.prototype._inputChange = function (value, target) {
            var _a;
            if (((_a = this.ngModelOptions) === null || _a === void 0 ? void 0 : _a.updateOn) !== 'blur') {
                this.inputChange(value);
            }
        };
        RangePickerComponent.prototype.inputChange = function (value) {
            var lastValueWasValid = this._lastValueValid;
            var date = parseDate(value);
            this._lastValueValid = !date || dateFns.isValid(date);
            if (!dateFns.isEqual(date, this._value)) {
                this.updateValue(date);
            }
            else if (lastValueWasValid !== this._lastValueValid) {
                this._ngControl.control.updateValueAndValidity();
            }
        };
        RangePickerComponent.prototype._inputBlur = function (value) {
            var _a;
            if (((_a = this.ngModelOptions) === null || _a === void 0 ? void 0 : _a.updateOn) === 'blur') {
                this.inputChange(value);
            }
            this.updateInput(this.value);
        };
        RangePickerComponent.prototype.registerOnChange = function (fn) { this.onChange = fn; };
        RangePickerComponent.prototype.registerOnTouched = function (fn) { this.onTouch = fn; };
        RangePickerComponent.prototype.triggerClick = function () {
            this._elRef.nativeElement.focus();
            this._elRef.nativeElement.select();
            this.open();
        };
        RangePickerComponent.prototype._processInputDate = function (date) {
            if (!date) {
                return null;
            }
            return createDateFromValue(date, this.timezone);
        };
        RangePickerComponent.prototype._getDefaultComponents = function () {
            if (this.view === 'time') {
                return { timeStart: true };
            }
            else {
                return { calendarStart: true, calendarEnd: true };
            }
        };
        RangePickerComponent.prototype._enableInput = function () {
            this.disabled = false;
        };
        RangePickerComponent.prototype._disableInput = function () {
            this.disabled = true;
        };
        RangePickerComponent.prototype._tzChanged = function (originDate) {
            this._value = createDateFromValue(originDate, this.timezone);
            this.updateInput(this._value);
            this._cdRef.markForCheck();
        };
        RangePickerComponent.prototype._listenDialogValueChanges = function () {
            var _this = this;
            this._dateDialogRef.value$
                .pipe(operators.takeUntil(this._dateDialogRef.close$), operators.takeUntil(this._destroy$))
                .subscribe(function (value) {
                _this.updateValueFromDialog(value);
            });
        };
        RangePickerComponent.prototype._checkValuesEquality = function (newValue, prevValue) {
            var valuesAreDates = dateFns.isDate(newValue) && dateFns.isDate(prevValue) && dateFns.isValid(newValue) && dateFns.isValid(prevValue);
            var valuesDatesEquals = valuesAreDates
                && isSameDate(newValue, prevValue);
            return [valuesAreDates, valuesDatesEquals];
        };
        /**
         * We need picker start date to be able to limit "Date To" picker
         */
        RangePickerComponent.prototype._getPickerStartDate = function () {
            if (this.view !== PickerViewType.MonthRange
                && dateFns.isDate(this._pickerRef.startDate)
                && dateFns.isValid(this._pickerRef.startDate)) {
                return dateFns.subDays(this._pickerRef.startDate, 1);
            }
            return false;
        };
        RangePickerComponent.prototype.validateDate = function (date) {
            this._lastValueValid = !date || dateFns.isValid(date);
        };
        RangePickerComponent.prototype._pickerRefUpdates$ = function (target) {
            var _this = this;
            return target
                .pipe(operators.skip(1), operators.pairwise(), operators.filter(function (changes) {
                var _a, _b, _c;
                var prevValue = (_a = changes[0]) === null || _a === void 0 ? void 0 : _a.getTime();
                var newValue = (_b = changes[1]) === null || _b === void 0 ? void 0 : _b.getTime();
                return prevValue !== newValue
                    && ((_c = _this.value) === null || _c === void 0 ? void 0 : _c.getTime()) !== newValue;
            }), operators.map(function (changes) { return changes[1]; }));
        };
        return RangePickerComponent;
    }());
    RangePickerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: RangePickerComponent, deps: "invalid", target: i0__namespace.ɵɵFactoryTarget.Directive });
    RangePickerComponent.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: RangePickerComponent, inputs: { view: "view", minYear: "minYear", maxYear: "maxYear", minDate: "minDate", maxDate: "maxDate", clear: "clear", format: "format", readonlyState: ["readonly", "readonlyState"], ngModelOptions: "ngModelOptions", timezone: "timezone" }, host: { listeners: { "focus": "open()", "keyup": "_inputKeyup($event,$event.target.value)", "input": "_inputChange($event.target.value,$event.target)", "blur": "_inputBlur($event.target.value)" }, properties: { "class.fs-input-disabled": "this.disabled", "attr.readonly": "this.readonly", "class.fs-input-readonly": "this.readonly" } }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: RangePickerComponent, decorators: [{
                type: i0.Directive
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }, { type: i0__namespace.Injector }, { type: FsDatePickerDialogFactory }, { type: undefined }, { type: i0__namespace.ChangeDetectorRef }, { type: i2__namespace.NgControl }]; }, propDecorators: { view: [{
                    type: i0.Input
                }], minYear: [{
                    type: i0.Input
                }], maxYear: [{
                    type: i0.Input
                }], minDate: [{
                    type: i0.Input
                }], maxDate: [{
                    type: i0.Input
                }], clear: [{
                    type: i0.Input
                }], format: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.HostBinding,
                    args: ['class.fs-input-disabled']
                }, {
                    type: i0.HostBinding,
                    args: ['attr.readonly']
                }], readonlyState: [{
                    type: i0.Input,
                    args: ['readonly']
                }], ngModelOptions: [{
                    type: i0.Input
                }], timezone: [{
                    type: i0.Input
                }], readonly: [{
                    type: i0.HostBinding,
                    args: ['class.fs-input-readonly']
                }, {
                    type: i0.HostBinding,
                    args: ['attr.readonly']
                }], open: [{
                    type: i0.HostListener,
                    args: ['focus']
                }], _inputKeyup: [{
                    type: i0.HostListener,
                    args: ['keyup', ['$event', '$event.target.value']]
                }], _inputChange: [{
                    type: i0.HostListener,
                    args: ['input', ['$event.target.value', '$event.target']]
                }], _inputBlur: [{
                    type: i0.HostListener,
                    args: ['blur', ['$event.target.value']]
                }] } });

    function cloneDate(fromDate) {
        if (!dateFns.isDate(fromDate)) {
            return null;
        }
        return new Date(fromDate.getTime());
    }

    function isDateAfter(target, from, view) {
        var startDate, endDate;
        if (view === PickerViewType.Time) {
            if (from) {
                startDate = cloneDate(from);
            }
            if (target) {
                endDate = cloneDate(target);
            }
        }
        else {
            startDate = from;
            endDate = target;
        }
        if (!startDate || !endDate) {
            return true;
        }
        if (view === PickerViewType.Date && dateFns.isValid(startDate) && dateFns.isValid(endDate) && isSameDate(startDate, endDate)) {
            return true;
        }
        if ((view === PickerViewType.DateTime || view === PickerViewType.Time) && dateFns.isEqual(startDate, endDate)) {
            return true;
        }
        return dateFns.isAfter(endDate, startDate);
    }

    var RangePickerRef = /** @class */ (function () {
        function RangePickerRef(view) {
            this.view = view;
            this._startDatePickerExists = false;
            this._endDatePickerExists = false;
            this._startDate$ = new rxjs.BehaviorSubject(null);
            this._endDate$ = new rxjs.BehaviorSubject(null);
            this._startDate = null;
            this._endDate = null;
        }
        Object.defineProperty(RangePickerRef.prototype, "startDate", {
            get: function () {
                return this._startDate;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RangePickerRef.prototype, "endDate", {
            get: function () {
                return this._endDate;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RangePickerRef.prototype, "startDate$", {
            get: function () {
                return this._startDate$.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RangePickerRef.prototype, "endDate$", {
            get: function () {
                return this._endDate$.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RangePickerRef.prototype, "startDatePickerExists", {
            get: function () {
                return this._startDatePickerExists;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RangePickerRef.prototype, "endDatePickerExists", {
            get: function () {
                return this._endDatePickerExists;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RangePickerRef.prototype, "isRangeValid", {
            get: function () {
                return isDateAfter(this._endDate, this._startDate, this.view);
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Update start date and change end date if needed
         * @param value
         */
        RangePickerRef.prototype.updateStartDate = function (value) {
            this._startDatePickerExists = true;
            if (!!value
                && (this.view === PickerViewType.Date || this.view === PickerViewType.MonthRange)) {
                value = dateFns.startOfDay(value);
            }
            this._startDate = value && new Date(value) || null;
            this._startDate$.next(this._startDate);
        };
        /**
         * Update end date
         * @param value
         */
        RangePickerRef.prototype.updateEndDate = function (value) {
            if (!!value
                && (this.view === PickerViewType.Date || this.view === PickerViewType.MonthRange)) {
                value = dateFns.endOfDay(value);
            }
            this._endDate = value && new Date(value) || null;
            this._endDatePickerExists = true;
            this._endDate$.next(this._endDate);
        };
        RangePickerRef.prototype.sameAsStartDate = function (value) {
            if (!!value
                && (this.view === PickerViewType.Date || this.view === PickerViewType.MonthRange)) {
                value = dateFns.startOfDay(value);
            }
            return this._startDate === value;
        };
        RangePickerRef.prototype.sameAsEndDate = function (value) {
            if (!!value
                && (this.view === PickerViewType.Date || this.view === PickerViewType.MonthRange)) {
                value = dateFns.endOfDay(value);
            }
            return this._endDate === value;
        };
        /**
         * Mark start date picker as destroyed
         */
        RangePickerRef.prototype.destroyStartDatePicker = function () {
            this._startDatePickerExists = false;
        };
        /**
         * Mark end date picker as destroyed
         */
        RangePickerRef.prototype.destroyEndDatePicker = function () {
            this._endDatePickerExists = false;
        };
        /**
         * destroy everything related with picker
         */
        RangePickerRef.prototype.destroy = function () { };
        return RangePickerRef;
    }());

    var FsRangePickerStoreService = /** @class */ (function () {
        function FsRangePickerStoreService() {
            this._store = new Map();
        }
        FsRangePickerStoreService.prototype.registerPickerFrom = function (name, value, view) {
            this._createIfNotExistsPicker(name, view);
            var pickerRef = this._store.get(name);
            // pickerRef.updateStartDate(value);
            return pickerRef;
        };
        FsRangePickerStoreService.prototype.destroyStartDatePicker = function (name) {
            var pickerRef = this._store.get(name);
            if (pickerRef) {
                pickerRef.destroyStartDatePicker();
                this._destroyRefIfRelatedDestroyed(name, pickerRef);
            }
        };
        FsRangePickerStoreService.prototype.destroyEndDatePicker = function (name) {
            var pickerRef = this._store.get(name);
            if (pickerRef) {
                pickerRef.destroyEndDatePicker();
                this._destroyRefIfRelatedDestroyed(name, pickerRef);
            }
        };
        FsRangePickerStoreService.prototype.registerPickerTo = function (name, value, view) {
            this._createIfNotExistsPicker(name, view);
            var pickerRef = this._store.get(name);
            // pickerRef.updateEndDate(value);
            return pickerRef;
        };
        FsRangePickerStoreService.prototype._createIfNotExistsPicker = function (name, view) {
            if (!this._store.has(name)) {
                this._store.set(name, new RangePickerRef(view));
            }
        };
        FsRangePickerStoreService.prototype._destroyRefIfRelatedDestroyed = function (name, ref) {
            if (!ref.startDatePickerExists && !ref.endDatePickerExists) {
                ref.destroy();
                this._store.delete(name);
            }
        };
        return FsRangePickerStoreService;
    }());
    FsRangePickerStoreService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsRangePickerStoreService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    FsRangePickerStoreService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsRangePickerStoreService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsRangePickerStoreService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return []; } });

    var RangePickerFromComponent = /** @class */ (function (_super) {
        __extends(RangePickerFromComponent, _super);
        function RangePickerFromComponent(_elRef, _injector, _datepickerFactory, _cdRef, _ngControl, _rangePickerStore) {
            var _this = _super.call(this, _elRef, _injector, _datepickerFactory, 'from', _cdRef, _ngControl) || this;
            _this._elRef = _elRef;
            _this._injector = _injector;
            _this._datepickerFactory = _datepickerFactory;
            _this._cdRef = _cdRef;
            _this._ngControl = _ngControl;
            _this._rangePickerStore = _rangePickerStore;
            return _this;
        }
        RangePickerFromComponent.prototype.ngOnInit = function () {
            this.registerPicker();
            _super.prototype.ngOnInit.call(this);
        };
        RangePickerFromComponent.prototype.ngOnDestroy = function () {
            this._rangePickerStore.destroyStartDatePicker(this.name);
            this._destroy$.next();
            this._destroy$.complete();
        };
        RangePickerFromComponent.prototype.registerPicker = function () {
            this._pickerRef = this._rangePickerStore.registerPickerFrom(this.name, this.value, this.view);
        };
        RangePickerFromComponent.prototype.writeValue = function (value) {
            // Hot fix while angular has ongoing issue
            // https://github.com/angular/angular/issues/29218
            if (!this.onChange) {
                return;
            }
            _super.prototype.writeValue.call(this, value);
            var _b = __read(this._checkValuesEquality(this.value, this._pickerRef.startDate), 1), valuesAreDates = _b[0];
            if ((valuesAreDates && !this._pickerRef.sameAsStartDate(this.value)) || (!valuesAreDates)) {
                this._pickerRef.updateStartDate(this.value);
            }
        };
        RangePickerFromComponent.prototype.cleared = function (event) {
            event.stopPropagation();
            event.preventDefault();
            this.writeValue(null);
            this.onChange(this.value);
            this.onTouch(this.value);
        };
        /**
         * Set value which was selected in dialog
         * @param value
         */
        RangePickerFromComponent.prototype.updateValueFromDialog = function (value) {
            this.updateValue(value);
            _super.prototype.updateValueFromDialog.call(this, value);
        };
        RangePickerFromComponent.prototype.updateValue = function (value) {
            if (this.view === PickerViewType.Date) {
                value = dateFns.startOfDay(value);
            }
            this._pickerRef.updateStartDate(value);
            _super.prototype.updateValue.call(this, value);
        };
        RangePickerFromComponent.prototype._tzChanged = function (originDate) {
            var _a;
            _super.prototype._tzChanged.call(this, originDate);
            (_a = this._pickerRef) === null || _a === void 0 ? void 0 : _a.updateStartDate(this.value);
        };
        RangePickerFromComponent.prototype._processInputDate = function (date) {
            date = _super.prototype._processInputDate.call(this, date);
            if (this.view === PickerViewType.Date && date) {
                date = dateFns.startOfDay(date);
            }
            return date;
        };
        return RangePickerFromComponent;
    }(RangePickerComponent));
    RangePickerFromComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: RangePickerFromComponent, deps: [{ token: i0__namespace.ElementRef }, { token: i0__namespace.Injector }, { token: FsDatePickerDialogFactory }, { token: i0__namespace.ChangeDetectorRef }, { token: i2__namespace.NgControl, optional: true, self: true }, { token: FsRangePickerStoreService }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    RangePickerFromComponent.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: RangePickerFromComponent, usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: RangePickerFromComponent, decorators: [{
                type: i0.Directive
            }], ctorParameters: function () {
            return [{ type: i0__namespace.ElementRef }, { type: i0__namespace.Injector }, { type: FsDatePickerDialogFactory }, { type: i0__namespace.ChangeDetectorRef }, { type: i2__namespace.NgControl, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Self
                        }] }, { type: FsRangePickerStoreService }];
        } });

    var DateTimeRangePickerFromComponent = /** @class */ (function (_super) {
        __extends(DateTimeRangePickerFromComponent, _super);
        function DateTimeRangePickerFromComponent() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.view = PickerViewType.DateTime;
            return _this;
        }
        Object.defineProperty(DateTimeRangePickerFromComponent.prototype, "fsDateTimeRangeFrom", {
            set: function (value) {
                this._name = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeRangePickerFromComponent.prototype, "fsDateTimeRangeFromPicker", {
            set: function (value) {
                this._name = value;
            },
            enumerable: false,
            configurable: true
        });
        DateTimeRangePickerFromComponent.prototype.updateValue = function (value) {
            this._pickerRef.updateStartDate(value);
            _super.prototype.updateValue.call(this, value);
        };
        return DateTimeRangePickerFromComponent;
    }(RangePickerFromComponent));
    DateTimeRangePickerFromComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DateTimeRangePickerFromComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    DateTimeRangePickerFromComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DateTimeRangePickerFromComponent, selector: "[fsDateTimeRangeFrom],[fsDateTimeRangeFromPicker]", inputs: { fsDateTimeRangeFrom: "fsDateTimeRangeFrom", fsDateTimeRangeFromPicker: "fsDateTimeRangeFromPicker", view: "view" }, usesInheritance: true, ngImport: i0__namespace, template: "\n    <fs-clear [show]=\"value && !disabled && !readonly && clear\" (clear)=\"cleared($event)\"></fs-clear>\n    <fs-datepicker-trigger (click)=\"triggerClick()\" [disabled]=\"disabled || readonly\" [view]=\"view\"></fs-datepicker-trigger>\n  ", isInline: true, components: [{ type: i1__namespace$7.FsClearElementComponent, selector: "fs-clear", inputs: ["show"], outputs: ["clear"] }, { type: FsDatePickerTriggerComponent, selector: "fs-datepicker-trigger", inputs: ["disabled", "view"], outputs: ["click"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DateTimeRangePickerFromComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: '[fsDateTimeRangeFrom],[fsDateTimeRangeFromPicker]',
                        template: FsDatePickerComponent.template,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { fsDateTimeRangeFrom: [{
                    type: i0.Input
                }], fsDateTimeRangeFromPicker: [{
                    type: i0.Input
                }], view: [{
                    type: i0.Input
                }] } });

    var RangePickerToComponent = /** @class */ (function (_super) {
        __extends(RangePickerToComponent, _super);
        function RangePickerToComponent(_elRef, _injector, _datepickerFactory, _cdRef, _ngControl, _rangePickerStore) {
            var _this = _super.call(this, _elRef, _injector, _datepickerFactory, 'to', _cdRef, _ngControl) || this;
            _this._elRef = _elRef;
            _this._injector = _injector;
            _this._datepickerFactory = _datepickerFactory;
            _this._cdRef = _cdRef;
            _this._ngControl = _ngControl;
            _this._rangePickerStore = _rangePickerStore;
            /** The form control validator for whether the input parses. */
            _this._parseValidator = function () {
                return _this._pickerRef.isRangeValid
                    ? null
                    : { fsDatepickerRange: 'Invalid Range' };
            };
            return _this;
        }
        RangePickerToComponent.prototype.ngOnInit = function () {
            this.registerPicker();
            this._subscribeToPickerRefUpdates();
            _super.prototype.ngOnInit.call(this);
        };
        RangePickerToComponent.prototype.ngOnDestroy = function () {
            this._rangePickerStore.destroyEndDatePicker(this.name);
            this._destroy$.next();
            this._destroy$.complete();
        };
        RangePickerToComponent.prototype.registerPicker = function () {
            this._pickerRef = this._rangePickerStore.registerPickerTo(this.name, this.value, this.view);
        };
        RangePickerToComponent.prototype.writeValue = function (value) {
            // Hot fix while angular has ongoing issue
            // https://github.com/angular/angular/issues/29218
            if (!this.onChange) {
                return;
            }
            _super.prototype.writeValue.call(this, value);
            var _b = __read(this._checkValuesEquality(this.value, this._pickerRef.endDate), 1), valuesAreDates = _b[0];
            if ((valuesAreDates && !this._pickerRef.sameAsEndDate(this.value)) || !valuesAreDates) {
                this._pickerRef.updateEndDate(this.value);
            }
        };
        RangePickerToComponent.prototype.cleared = function (event) {
            if (event) {
                event.stopPropagation();
                event.preventDefault();
            }
            this.writeValue(null);
            this.onChange(this.value);
            this.onTouch(this.value);
        };
        /**
         * Set value which was selected in dialog
         * @param value
         */
        RangePickerToComponent.prototype.updateValueFromDialog = function (value) {
            this.updateValue(value);
            _super.prototype.updateValueFromDialog.call(this, this._pickerRef.endDate);
        };
        RangePickerToComponent.prototype.updateValue = function (value) {
            if (this.view === PickerViewType.Date) {
                value = dateFns.endOfDay(value);
            }
            this._pickerRef.updateEndDate(value);
            _super.prototype.updateValue.call(this, value);
        };
        RangePickerToComponent.prototype._tzChanged = function (originDate) {
            var _a;
            _super.prototype._tzChanged.call(this, originDate);
            (_a = this._pickerRef) === null || _a === void 0 ? void 0 : _a.updateEndDate(this.value);
        };
        RangePickerToComponent.prototype._processInputDate = function (date) {
            date = _super.prototype._processInputDate.call(this, date);
            if (this.view === PickerViewType.Date && date) {
                date = dateFns.endOfDay(date);
            }
            return date;
        };
        RangePickerToComponent.prototype._subscribeToPickerRefUpdates = function () {
            var _this = this;
            this._pickerRefUpdates$(this._pickerRef.startDate$)
                .pipe(operators.takeUntil(this._destroy$))
                .subscribe(function (value) {
                if (!_this._pickerRef.isRangeValid) {
                    _this.cleared();
                }
                if (_this.value) {
                    _this._ngControl.control.markAsDirty();
                    _this._ngControl.control.updateValueAndValidity();
                }
                _this._cdRef.markForCheck();
            });
        };
        return RangePickerToComponent;
    }(RangePickerComponent));
    RangePickerToComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: RangePickerToComponent, deps: [{ token: i0__namespace.ElementRef }, { token: i0__namespace.Injector }, { token: FsDatePickerDialogFactory }, { token: i0__namespace.ChangeDetectorRef }, { token: i2__namespace.NgControl, optional: true, self: true }, { token: FsRangePickerStoreService }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    RangePickerToComponent.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: RangePickerToComponent, usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: RangePickerToComponent, decorators: [{
                type: i0.Directive
            }], ctorParameters: function () {
            return [{ type: i0__namespace.ElementRef }, { type: i0__namespace.Injector }, { type: FsDatePickerDialogFactory }, { type: i0__namespace.ChangeDetectorRef }, { type: i2__namespace.NgControl, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Self
                        }] }, { type: FsRangePickerStoreService }];
        } });

    var DateTimeRangePickerToComponent = /** @class */ (function (_super) {
        __extends(DateTimeRangePickerToComponent, _super);
        function DateTimeRangePickerToComponent() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.view = PickerViewType.DateTime;
            return _this;
        }
        Object.defineProperty(DateTimeRangePickerToComponent.prototype, "fsDateTimeRangeTo", {
            set: function (value) {
                this._name = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeRangePickerToComponent.prototype, "fsDateTimeRangeToPicker", {
            set: function (value) {
                this._name = value;
            },
            enumerable: false,
            configurable: true
        });
        return DateTimeRangePickerToComponent;
    }(RangePickerToComponent));
    DateTimeRangePickerToComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DateTimeRangePickerToComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    DateTimeRangePickerToComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DateTimeRangePickerToComponent, selector: "[fsDateTimeRangeTo],[fsDateTimeRangeToPicker]", inputs: { fsDateTimeRangeTo: "fsDateTimeRangeTo", fsDateTimeRangeToPicker: "fsDateTimeRangeToPicker", view: "view" }, usesInheritance: true, ngImport: i0__namespace, template: "\n    <fs-clear [show]=\"value && !disabled && !readonly && clear\" (clear)=\"cleared($event)\"></fs-clear>\n    <fs-datepicker-trigger (click)=\"triggerClick()\" [disabled]=\"disabled || readonly\" [view]=\"view\"></fs-datepicker-trigger>\n  ", isInline: true, components: [{ type: i1__namespace$7.FsClearElementComponent, selector: "fs-clear", inputs: ["show"], outputs: ["clear"] }, { type: FsDatePickerTriggerComponent, selector: "fs-datepicker-trigger", inputs: ["disabled", "view"], outputs: ["click"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DateTimeRangePickerToComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: '[fsDateTimeRangeTo],[fsDateTimeRangeToPicker]',
                        template: FsDatePickerComponent.template,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { fsDateTimeRangeTo: [{
                    type: i0.Input
                }], fsDateTimeRangeToPicker: [{
                    type: i0.Input
                }], view: [{
                    type: i0.Input
                }] } });

    var TimeRangePickerFromComponent = /** @class */ (function (_super) {
        __extends(TimeRangePickerFromComponent, _super);
        function TimeRangePickerFromComponent() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.view = PickerViewType.Time;
            return _this;
        }
        Object.defineProperty(TimeRangePickerFromComponent.prototype, "fsTimeRangeFrom", {
            set: function (value) {
                this._name = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TimeRangePickerFromComponent.prototype, "fsTimeRangeFromPicker", {
            set: function (value) {
                this._name = value;
            },
            enumerable: false,
            configurable: true
        });
        TimeRangePickerFromComponent.prototype.updateValue = function (value) {
            this._pickerRef.updateStartDate(value);
            _super.prototype.updateValue.call(this, value);
        };
        return TimeRangePickerFromComponent;
    }(RangePickerFromComponent));
    TimeRangePickerFromComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TimeRangePickerFromComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    TimeRangePickerFromComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TimeRangePickerFromComponent, selector: "[fsTimeRangeFrom],[fsTimeRangeFromPicker]", inputs: { fsTimeRangeFrom: "fsTimeRangeFrom", fsTimeRangeFromPicker: "fsTimeRangeFromPicker", view: "view" }, usesInheritance: true, ngImport: i0__namespace, template: "\n    <fs-clear [show]=\"value && !disabled && !readonly && clear\" (clear)=\"cleared($event)\"></fs-clear>\n    <fs-datepicker-trigger (click)=\"triggerClick()\" [disabled]=\"disabled || readonly\" [view]=\"view\"></fs-datepicker-trigger>\n  ", isInline: true, components: [{ type: i1__namespace$7.FsClearElementComponent, selector: "fs-clear", inputs: ["show"], outputs: ["clear"] }, { type: FsDatePickerTriggerComponent, selector: "fs-datepicker-trigger", inputs: ["disabled", "view"], outputs: ["click"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TimeRangePickerFromComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: '[fsTimeRangeFrom],[fsTimeRangeFromPicker]',
                        template: FsDatePickerComponent.template,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { fsTimeRangeFrom: [{
                    type: i0.Input
                }], fsTimeRangeFromPicker: [{
                    type: i0.Input
                }], view: [{
                    type: i0.Input
                }] } });

    var TimeRangePickerToComponent = /** @class */ (function (_super) {
        __extends(TimeRangePickerToComponent, _super);
        function TimeRangePickerToComponent() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.view = PickerViewType.Time;
            return _this;
        }
        Object.defineProperty(TimeRangePickerToComponent.prototype, "fsTimeRangeTo", {
            set: function (value) {
                this._name = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TimeRangePickerToComponent.prototype, "fsTimeRangeToPicker", {
            set: function (value) {
                this._name = value;
            },
            enumerable: false,
            configurable: true
        });
        return TimeRangePickerToComponent;
    }(RangePickerToComponent));
    TimeRangePickerToComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TimeRangePickerToComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    TimeRangePickerToComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TimeRangePickerToComponent, selector: "[fsTimeRangeTo],[fsTimeRangeToPicker]", inputs: { fsTimeRangeTo: "fsTimeRangeTo", fsTimeRangeToPicker: "fsTimeRangeToPicker", view: "view" }, usesInheritance: true, ngImport: i0__namespace, template: "\n    <fs-clear [show]=\"value && !disabled && !readonly && clear\" (clear)=\"cleared($event)\"></fs-clear>\n    <fs-datepicker-trigger (click)=\"triggerClick()\" [disabled]=\"disabled || readonly\" [view]=\"view\"></fs-datepicker-trigger>\n  ", isInline: true, components: [{ type: i1__namespace$7.FsClearElementComponent, selector: "fs-clear", inputs: ["show"], outputs: ["clear"] }, { type: FsDatePickerTriggerComponent, selector: "fs-datepicker-trigger", inputs: ["disabled", "view"], outputs: ["click"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TimeRangePickerToComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: '[fsTimeRangeTo],[fsTimeRangeToPicker]',
                        template: FsDatePickerComponent.template,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { fsTimeRangeTo: [{
                    type: i0.Input
                }], fsTimeRangeToPicker: [{
                    type: i0.Input
                }], view: [{
                    type: i0.Input
                }] } });

    var DateRangePickerFromComponent = /** @class */ (function (_super) {
        __extends(DateRangePickerFromComponent, _super);
        function DateRangePickerFromComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(DateRangePickerFromComponent.prototype, "fsDateRangeFrom", {
            set: function (value) {
                this._name = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateRangePickerFromComponent.prototype, "fsDateRangeFromPicker", {
            set: function (value) {
                this._name = value;
            },
            enumerable: false,
            configurable: true
        });
        return DateRangePickerFromComponent;
    }(RangePickerFromComponent));
    DateRangePickerFromComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DateRangePickerFromComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    DateRangePickerFromComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DateRangePickerFromComponent, selector: "[fsDateRangeFrom],[fsDateRangeFromPicker]", inputs: { fsDateRangeFrom: "fsDateRangeFrom", fsDateRangeFromPicker: "fsDateRangeFromPicker" }, usesInheritance: true, ngImport: i0__namespace, template: "\n    <fs-clear [show]=\"value && !disabled && !readonly && clear\" (clear)=\"cleared($event)\"></fs-clear>\n    <fs-datepicker-trigger (click)=\"triggerClick()\" [disabled]=\"disabled || readonly\" [view]=\"view\"></fs-datepicker-trigger>\n  ", isInline: true, components: [{ type: i1__namespace$7.FsClearElementComponent, selector: "fs-clear", inputs: ["show"], outputs: ["clear"] }, { type: FsDatePickerTriggerComponent, selector: "fs-datepicker-trigger", inputs: ["disabled", "view"], outputs: ["click"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DateRangePickerFromComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: '[fsDateRangeFrom],[fsDateRangeFromPicker]',
                        template: FsDatePickerComponent.template,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { fsDateRangeFrom: [{
                    type: i0.Input
                }], fsDateRangeFromPicker: [{
                    type: i0.Input
                }] } });

    var DateRangePickerToComponent = /** @class */ (function (_super) {
        __extends(DateRangePickerToComponent, _super);
        function DateRangePickerToComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(DateRangePickerToComponent.prototype, "fsDateRangeTo", {
            set: function (value) {
                this._name = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateRangePickerToComponent.prototype, "fsDateRangeToPicker", {
            set: function (value) {
                this._name = value;
            },
            enumerable: false,
            configurable: true
        });
        return DateRangePickerToComponent;
    }(RangePickerToComponent));
    DateRangePickerToComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DateRangePickerToComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    DateRangePickerToComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DateRangePickerToComponent, selector: "[fsDateRangeTo],[fsDateRangeToPicker]", inputs: { fsDateRangeTo: "fsDateRangeTo", fsDateRangeToPicker: "fsDateRangeToPicker" }, usesInheritance: true, ngImport: i0__namespace, template: "\n    <fs-clear [show]=\"value && !disabled && !readonly && clear\" (clear)=\"cleared($event)\"></fs-clear>\n    <fs-datepicker-trigger (click)=\"triggerClick()\" [disabled]=\"disabled || readonly\" [view]=\"view\"></fs-datepicker-trigger>\n  ", isInline: true, components: [{ type: i1__namespace$7.FsClearElementComponent, selector: "fs-clear", inputs: ["show"], outputs: ["clear"] }, { type: FsDatePickerTriggerComponent, selector: "fs-datepicker-trigger", inputs: ["disabled", "view"], outputs: ["click"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DateRangePickerToComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: '[fsDateRangeTo],[fsDateRangeToPicker]',
                        template: FsDatePickerComponent.template,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { fsDateRangeTo: [{
                    type: i0.Input
                }], fsDateRangeToPicker: [{
                    type: i0.Input
                }] } });

    var FsDateScrollPickerComponent = /** @class */ (function (_super) {
        __extends(FsDateScrollPickerComponent, _super);
        function FsDateScrollPickerComponent(renderer, injector, elementRef, _datepickerFactory, _cdRef) {
            var _this = _super.call(this, renderer, elementRef, _cdRef) || this;
            _this.renderer = renderer;
            _this.injector = injector;
            _this.elementRef = elementRef;
            _this._datepickerFactory = _datepickerFactory;
            _this._cdRef = _cdRef;
            _this.minYear = (new Date()).getFullYear() - 50;
            _this.maxYear = (new Date()).getFullYear() + 50;
            _this.showMonth = true;
            _this.showYear = true;
            _this.showDay = true;
            _this.view = ScrollPickerViewType.Date;
            return _this;
        }
        FsDateScrollPickerComponent.prototype.writeValue = function (value) {
            this._originValue = value;
            this._value = createDateFromValue(value, this.timezone);
            this.validateDate(this.value);
            this.updateInput(value);
            this._cdRef.markForCheck();
        };
        FsDateScrollPickerComponent.prototype.updateInput = function (value) {
            var format = ScrollPickerViewType.Date;
            if (this.showYear && this.showMonth && !this.showDay) {
                format = ScrollPickerViewType.MonthYear;
            }
            else if (!this.showYear && this.showMonth && this.showDay) {
                format = ScrollPickerViewType.MonthDay;
            }
            else if (!this.showYear && this.showMonth && !this.showDay) {
                format = ScrollPickerViewType.Month;
            }
            else if (this.showYear && !this.showMonth && !this.showDay) {
                format = ScrollPickerViewType.Year;
            }
            this.elementRef.nativeElement.value = formatDateTime(value, format);
        };
        FsDateScrollPickerComponent.prototype.open = function () {
            if (this._dateDialogRef || this.disabled || this.readonly) {
                return;
            }
            this._dateDialogRef = this._datepickerFactory.openDateScrollPicker(this.elementRef, this.injector, {
                modelValue: this.value,
                minYear: this.minYear,
                maxYear: this.maxYear,
                maxDate: this.maxDate,
                showMonth: this.showMonth,
                showDay: this.showDay,
                showYear: this.showYear,
                view: this.view,
            });
            _super.prototype.open.call(this);
        };
        return FsDateScrollPickerComponent;
    }(FsDatePickerBaseComponent));
    FsDateScrollPickerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateScrollPickerComponent, deps: [{ token: i0__namespace.Renderer2 }, { token: i0__namespace.Injector }, { token: i0.ElementRef }, { token: FsDatePickerDialogFactory }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FsDateScrollPickerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDateScrollPickerComponent, selector: "[fsDateScrollPicker]", inputs: { minYear: "minYear", maxYear: "maxYear", maxDate: "maxDate", showMonth: "showMonth", showYear: "showYear", showDay: "showDay" }, providers: [{
                provide: i2.NG_VALUE_ACCESSOR,
                useExisting: i0.forwardRef(function () { return FsDateScrollPickerComponent; }),
                multi: true
            }], usesInheritance: true, ngImport: i0__namespace, template: "\n    <fs-clear [show]=\"value && !disabled && !readonly && clear\" (clear)=\"cleared($event)\"></fs-clear>\n    <fs-datepicker-trigger (click)=\"triggerClick()\" [disabled]=\"disabled || readonly\" [view]=\"view\"></fs-datepicker-trigger>\n  ", isInline: true, components: [{ type: i1__namespace$7.FsClearElementComponent, selector: "fs-clear", inputs: ["show"], outputs: ["clear"] }, { type: FsDatePickerTriggerComponent, selector: "fs-datepicker-trigger", inputs: ["disabled", "view"], outputs: ["click"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateScrollPickerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: '[fsDateScrollPicker]',
                        template: FsDatePickerComponent.template,
                        providers: [{
                                provide: i2.NG_VALUE_ACCESSOR,
                                useExisting: i0.forwardRef(function () { return FsDateScrollPickerComponent; }),
                                multi: true
                            }],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () {
            return [{ type: i0__namespace.Renderer2 }, { type: i0__namespace.Injector }, { type: i0__namespace.ElementRef, decorators: [{
                            type: i0.Inject,
                            args: [i0.ElementRef]
                        }] }, { type: FsDatePickerDialogFactory }, { type: i0__namespace.ChangeDetectorRef }];
        }, propDecorators: { minYear: [{
                    type: i0.Input
                }], maxYear: [{
                    type: i0.Input
                }], maxDate: [{
                    type: i0.Input
                }], showMonth: [{
                    type: i0.Input
                }], showYear: [{
                    type: i0.Input
                }], showDay: [{
                    type: i0.Input
                }] } });

    var FsDatePickerBirthdayComponent = /** @class */ (function (_super) {
        __extends(FsDatePickerBirthdayComponent, _super);
        function FsDatePickerBirthdayComponent(renderer, injector, elementRef, _datepickerFactory, _cdRef) {
            var _this = _super.call(this, renderer, injector, elementRef, _datepickerFactory, _cdRef) || this;
            _this.minYear = (new Date()).getFullYear() - 120;
            _this.maxYear = (new Date()).getFullYear();
            return _this;
        }
        return FsDatePickerBirthdayComponent;
    }(FsDateScrollPickerComponent));
    FsDatePickerBirthdayComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerBirthdayComponent, deps: [{ token: i0__namespace.Renderer2 }, { token: i0__namespace.Injector }, { token: i0__namespace.ElementRef }, { token: FsDatePickerDialogFactory }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FsDatePickerBirthdayComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDatePickerBirthdayComponent, selector: "[fsDatePickerBirthday]", inputs: { minYear: "minYear", maxYear: "maxYear" }, providers: [{
                provide: i2.NG_VALUE_ACCESSOR,
                useExisting: i0.forwardRef(function () { return FsDatePickerBirthdayComponent; }),
                multi: true
            }], usesInheritance: true, ngImport: i0__namespace, template: "\n    <fs-clear [show]=\"value && !disabled && !readonly && clear\" (clear)=\"cleared($event)\"></fs-clear>\n    <fs-datepicker-trigger (click)=\"triggerClick()\" [disabled]=\"disabled || readonly\" [view]=\"view\"></fs-datepicker-trigger>\n  ", isInline: true, components: [{ type: i1__namespace$7.FsClearElementComponent, selector: "fs-clear", inputs: ["show"], outputs: ["clear"] }, { type: FsDatePickerTriggerComponent, selector: "fs-datepicker-trigger", inputs: ["disabled", "view"], outputs: ["click"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerBirthdayComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: '[fsDatePickerBirthday]',
                        template: FsDatePickerComponent.template,
                        providers: [{
                                provide: i2.NG_VALUE_ACCESSOR,
                                useExisting: i0.forwardRef(function () { return FsDatePickerBirthdayComponent; }),
                                multi: true
                            }],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Renderer2 }, { type: i0__namespace.Injector }, { type: i0__namespace.ElementRef }, { type: FsDatePickerDialogFactory }, { type: i0__namespace.ChangeDetectorRef }]; }, propDecorators: { minYear: [{
                    type: i0.Input
                }], maxYear: [{
                    type: i0.Input
                }] } });

    var FsDateWeekPickerComponent = /** @class */ (function (_super) {
        __extends(FsDateWeekPickerComponent, _super);
        function FsDateWeekPickerComponent(renderer, injector, elementRef, _cdRef, fsDatepickerFactory) {
            var _this = _super.call(this, renderer, elementRef, _cdRef) || this;
            _this.renderer = renderer;
            _this.injector = injector;
            _this.elementRef = elementRef;
            _this._cdRef = _cdRef;
            _this.fsDatepickerFactory = fsDatepickerFactory;
            _this.minYear = null;
            _this.maxYear = null;
            _this.minDate = null;
            _this.maxDate = null;
            _this.seedDate = null;
            _this.periodWeeks = 1;
            _this.view = PickerViewType.Week;
            _this.change$ = new i0.EventEmitter();
            return _this;
        }
        FsDateWeekPickerComponent.prototype.inputClick = function () {
            if (!this.disabled && !this.readonly) {
                this.open();
            }
        };
        FsDateWeekPickerComponent.prototype.ngAfterViewInit = function () {
            this.setReadonly();
        };
        FsDateWeekPickerComponent.prototype.writeValue = function (value) {
            this._value = value;
            this.validateDate(this.value);
            this.updateInput(value);
            this._cdRef.markForCheck();
        };
        FsDateWeekPickerComponent.prototype.updateInput = function (value) {
            if (value && dateFns.isDate(value.from) && dateFns.isDate(value.to)) {
                if (value.from.getFullYear() == value.to.getFullYear()) {
                    var from = dateFns.format(value.from, 'MMM d');
                    var to = dateFns.format(value.to, 'MMM d yyyy');
                    this.elementRef.nativeElement.value = "#" + value.period + ": " + from + " - " + to;
                }
                else {
                    var from = dateFns.format(value.from, 'MMM d yyyy');
                    var to = dateFns.format(value.to, 'MMM d yyyy');
                    this.elementRef.nativeElement.value = "#" + value.period + ": " + from + " - " + to;
                }
            }
            else {
                this.elementRef.nativeElement.value = '';
            }
        };
        FsDateWeekPickerComponent.prototype.open = function () {
            if (this._dateDialogRef) {
                return;
            }
            this._dateDialogRef = this.fsDatepickerFactory.openDatePicker(this.elementRef, this.injector, {
                modelValue: this.value,
                view: this.view,
                minYear: this.minYear,
                maxYear: this.maxYear,
                minDate: this.minDate,
                maxDate: this.maxDate,
                components: this._getDefaultComponents(),
                seedDate: this.seedDate,
                periodWeeks: this.periodWeeks,
            });
            _super.prototype.open.call(this);
        };
        FsDateWeekPickerComponent.prototype._getDefaultComponents = function () {
            if (this.view === 'time') {
                return { timeStart: true };
            }
            else {
                return { calendarStart: true };
            }
        };
        return FsDateWeekPickerComponent;
    }(FsDatePickerBaseComponent));
    FsDateWeekPickerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateWeekPickerComponent, deps: [{ token: i0__namespace.Renderer2 }, { token: i0__namespace.Injector }, { token: i0.ElementRef }, { token: i0__namespace.ChangeDetectorRef }, { token: FsDatePickerDialogFactory }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FsDateWeekPickerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDateWeekPickerComponent, selector: "[fsDateWeekPicker]", inputs: { minYear: "minYear", maxYear: "maxYear", minDate: "minDate", maxDate: "maxDate", seedDate: "seedDate", periodWeeks: "periodWeeks", view: "view" }, outputs: { change$: "change" }, host: { listeners: { "click": "inputClick()", "focus": "inputClick()" } }, providers: [{
                provide: i2.NG_VALUE_ACCESSOR,
                useExisting: i0.forwardRef(function () { return FsDateWeekPickerComponent; }),
                multi: true
            }], usesInheritance: true, ngImport: i0__namespace, template: "\n    <fs-clear [show]=\"value && !disabled && !readonly && clear\" (clear)=\"cleared($event)\"></fs-clear>\n    <fs-datepicker-trigger (click)=\"triggerClick()\" [disabled]=\"disabled || readonly\" [view]=\"view\"></fs-datepicker-trigger>\n  ", isInline: true, components: [{ type: i1__namespace$7.FsClearElementComponent, selector: "fs-clear", inputs: ["show"], outputs: ["clear"] }, { type: FsDatePickerTriggerComponent, selector: "fs-datepicker-trigger", inputs: ["disabled", "view"], outputs: ["click"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateWeekPickerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: '[fsDateWeekPicker]',
                        template: FsDatePickerComponent.template,
                        providers: [{
                                provide: i2.NG_VALUE_ACCESSOR,
                                useExisting: i0.forwardRef(function () { return FsDateWeekPickerComponent; }),
                                multi: true
                            }],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () {
            return [{ type: i0__namespace.Renderer2 }, { type: i0__namespace.Injector }, { type: i0__namespace.ElementRef, decorators: [{
                            type: i0.Inject,
                            args: [i0.ElementRef]
                        }] }, { type: i0__namespace.ChangeDetectorRef }, { type: FsDatePickerDialogFactory }];
        }, propDecorators: { minYear: [{
                    type: i0.Input
                }], maxYear: [{
                    type: i0.Input
                }], minDate: [{
                    type: i0.Input
                }], maxDate: [{
                    type: i0.Input
                }], seedDate: [{
                    type: i0.Input
                }], periodWeeks: [{
                    type: i0.Input
                }], view: [{
                    type: i0.Input
                }], change$: [{
                    type: i0.Output,
                    args: ['change']
                }], inputClick: [{
                    type: i0.HostListener,
                    args: ['click']
                }, {
                    type: i0.HostListener,
                    args: ['focus']
                }] } });

    var FsDateTimePickerComponent = /** @class */ (function (_super) {
        __extends(FsDateTimePickerComponent, _super);
        function FsDateTimePickerComponent() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.view = PickerViewType.DateTime;
            return _this;
        }
        return FsDateTimePickerComponent;
    }(FsDatePickerComponent));
    FsDateTimePickerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateTimePickerComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    FsDateTimePickerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDateTimePickerComponent, selector: "[fsDateTimePicker]", inputs: { view: "view" }, providers: [
            {
                provide: i2.NG_VALUE_ACCESSOR,
                useExisting: i0.forwardRef(function () { return FsDateTimePickerComponent; }),
                multi: true,
            },
            {
                provide: i2.NG_VALIDATORS,
                useExisting: i0.forwardRef(function () { return FsDateTimePickerComponent; }),
                multi: true,
            },
        ], usesInheritance: true, ngImport: i0__namespace, template: "\n    <fs-clear [show]=\"value && !disabled && !readonly && clear\" (clear)=\"cleared($event)\"></fs-clear>\n    <fs-datepicker-trigger (click)=\"triggerClick()\" [disabled]=\"disabled || readonly\" [view]=\"view\"></fs-datepicker-trigger>\n  ", isInline: true, components: [{ type: i1__namespace$7.FsClearElementComponent, selector: "fs-clear", inputs: ["show"], outputs: ["clear"] }, { type: FsDatePickerTriggerComponent, selector: "fs-datepicker-trigger", inputs: ["disabled", "view"], outputs: ["click"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDateTimePickerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: '[fsDateTimePicker]',
                        template: FsDatePickerComponent.template,
                        providers: [
                            {
                                provide: i2.NG_VALUE_ACCESSOR,
                                useExisting: i0.forwardRef(function () { return FsDateTimePickerComponent; }),
                                multi: true,
                            },
                            {
                                provide: i2.NG_VALIDATORS,
                                useExisting: i0.forwardRef(function () { return FsDateTimePickerComponent; }),
                                multi: true,
                            },
                        ],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { view: [{
                    type: i0.Input
                }] } });

    var FsTimePickerComponent = /** @class */ (function (_super) {
        __extends(FsTimePickerComponent, _super);
        function FsTimePickerComponent() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.view = PickerViewType.Time;
            return _this;
        }
        return FsTimePickerComponent;
    }(FsDatePickerComponent));
    FsTimePickerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsTimePickerComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    FsTimePickerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsTimePickerComponent, selector: "[fsTimePicker]", inputs: { view: "view" }, providers: [
            {
                provide: i2.NG_VALUE_ACCESSOR,
                useExisting: i0.forwardRef(function () { return FsTimePickerComponent; }),
                multi: true
            },
            {
                provide: i2.NG_VALIDATORS,
                useExisting: i0.forwardRef(function () { return FsTimePickerComponent; }),
                multi: true,
            },
        ], usesInheritance: true, ngImport: i0__namespace, template: "\n    <fs-clear [show]=\"value && !disabled && !readonly && clear\" (clear)=\"cleared($event)\"></fs-clear>\n    <fs-datepicker-trigger (click)=\"triggerClick()\" [disabled]=\"disabled || readonly\" [view]=\"view\"></fs-datepicker-trigger>\n  ", isInline: true, components: [{ type: i1__namespace$7.FsClearElementComponent, selector: "fs-clear", inputs: ["show"], outputs: ["clear"] }, { type: FsDatePickerTriggerComponent, selector: "fs-datepicker-trigger", inputs: ["disabled", "view"], outputs: ["click"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsTimePickerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: '[fsTimePicker]',
                        template: FsDatePickerComponent.template,
                        providers: [
                            {
                                provide: i2.NG_VALUE_ACCESSOR,
                                useExisting: i0.forwardRef(function () { return FsTimePickerComponent; }),
                                multi: true
                            },
                            {
                                provide: i2.NG_VALIDATORS,
                                useExisting: i0.forwardRef(function () { return FsTimePickerComponent; }),
                                multi: true,
                            },
                        ],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { view: [{
                    type: i0.Input
                }] } });

    var MonthRangePickerFromComponent = /** @class */ (function (_super) {
        __extends(MonthRangePickerFromComponent, _super);
        function MonthRangePickerFromComponent() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.view = PickerViewType.MonthRange;
            _this._skipUpdateValue = false;
            return _this;
        }
        Object.defineProperty(MonthRangePickerFromComponent.prototype, "fsMonthRangeFrom", {
            set: function (value) {
                this._name = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MonthRangePickerFromComponent.prototype, "fsMonthRangeFromPicker", {
            set: function (value) {
                this._name = value;
            },
            enumerable: false,
            configurable: true
        });
        MonthRangePickerFromComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
            this._subscribeToPickerRefUpdates();
        };
        MonthRangePickerFromComponent.prototype.cleared = function (event) {
            _super.prototype.cleared.call(this, event);
            this._pickerRef.updateEndDate(null);
        };
        MonthRangePickerFromComponent.prototype.updateValue = function (value) {
            value = dateFns.startOfDay(value);
            this._value = value;
            this.updateInput(this._value);
            if (value && this.timezone) {
                value = dateFnsTz.zonedTimeToUtc(value, this.timezone);
            }
            this.onChange(value);
            this.onTouch(value);
        };
        MonthRangePickerFromComponent.prototype._tzChanged = function (originDate) {
            this._skipUpdateValue = true;
            _super.prototype._tzChanged.call(this, originDate);
        };
        MonthRangePickerFromComponent.prototype._processInputDate = function (date) {
            date = _super.prototype._processInputDate.call(this, date);
            if (date) {
                date = dateFns.startOfDay(date);
            }
            return date;
        };
        /**
         * When it's month range picker - we have to listen changes over rangePickerRef
         */
        MonthRangePickerFromComponent.prototype._listenDialogValueChanges = function () {
            // NOOP
        };
        MonthRangePickerFromComponent.prototype._subscribeToPickerRefUpdates = function () {
            var _this = this;
            this._pickerRefUpdates$(this._pickerRef.startDate$)
                .pipe(operators.takeUntil(this._destroy$))
                .subscribe(function (newValue) {
                if (_this._skipUpdateValue) {
                    _this._skipUpdateValue = false;
                    return;
                }
                _this.updateValue(newValue);
                _this._ngControl.control.markAsDirty();
                _this._ngControl.control.updateValueAndValidity();
                _this._cdRef.markForCheck();
            });
        };
        return MonthRangePickerFromComponent;
    }(RangePickerFromComponent));
    MonthRangePickerFromComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MonthRangePickerFromComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    MonthRangePickerFromComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: MonthRangePickerFromComponent, selector: "[fsMonthRangeFrom],[fsMonthRangeFromPicker]", inputs: { fsMonthRangeFrom: "fsMonthRangeFrom", fsMonthRangeFromPicker: "fsMonthRangeFromPicker" }, usesInheritance: true, ngImport: i0__namespace, template: "\n    <fs-clear [show]=\"value && !disabled && !readonly && clear\" (clear)=\"cleared($event)\"></fs-clear>\n    <fs-datepicker-trigger (click)=\"triggerClick()\" [disabled]=\"disabled || readonly\" [view]=\"view\"></fs-datepicker-trigger>\n  ", isInline: true, components: [{ type: i1__namespace$7.FsClearElementComponent, selector: "fs-clear", inputs: ["show"], outputs: ["clear"] }, { type: FsDatePickerTriggerComponent, selector: "fs-datepicker-trigger", inputs: ["disabled", "view"], outputs: ["click"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MonthRangePickerFromComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: '[fsMonthRangeFrom],[fsMonthRangeFromPicker]',
                        template: FsDatePickerComponent.template,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { fsMonthRangeFrom: [{
                    type: i0.Input
                }], fsMonthRangeFromPicker: [{
                    type: i0.Input
                }] } });

    var MonthRangePickerToComponent = /** @class */ (function (_super) {
        __extends(MonthRangePickerToComponent, _super);
        function MonthRangePickerToComponent() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.view = PickerViewType.MonthRange;
            _this._skipUpdateValue = false;
            return _this;
        }
        Object.defineProperty(MonthRangePickerToComponent.prototype, "fsMonthRangeTo", {
            set: function (value) {
                this._name = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MonthRangePickerToComponent.prototype, "fsMonthRangeToPicker", {
            set: function (value) {
                this._name = value;
            },
            enumerable: false,
            configurable: true
        });
        MonthRangePickerToComponent.prototype.updateValue = function (value) {
            if (value) {
                value = dateFns.endOfDay(value);
            }
            this._value = value;
            this.updateInput(this._value);
            if (value && this.timezone) {
                value = dateFnsTz.zonedTimeToUtc(value, this.timezone);
            }
            this.onChange(value);
            this.onTouch(value);
        };
        MonthRangePickerToComponent.prototype._tzChanged = function (originDate) {
            this._skipUpdateValue = true;
            _super.prototype._tzChanged.call(this, originDate);
        };
        MonthRangePickerToComponent.prototype._processInputDate = function (date) {
            date = _super.prototype._processInputDate.call(this, date);
            if (date) {
                date = dateFns.endOfDay(date);
            }
            return date;
        };
        /**
         * When it's month range picker - we have to listen changes over rangePickerRef
         */
        MonthRangePickerToComponent.prototype._listenDialogValueChanges = function () {
            // NOOP
        };
        MonthRangePickerToComponent.prototype._subscribeToPickerRefUpdates = function () {
            var _this = this;
            this._pickerRefUpdates$(this._pickerRef.endDate$)
                .pipe(operators.takeUntil(this._destroy$))
                .subscribe(function (newValue) {
                if (_this._skipUpdateValue) {
                    _this._skipUpdateValue = false;
                    return;
                }
                _this.updateValue(newValue);
                _this._ngControl.control.markAsDirty();
                _this._ngControl.control.updateValueAndValidity();
                _this._cdRef.markForCheck();
            });
        };
        return MonthRangePickerToComponent;
    }(RangePickerToComponent));
    MonthRangePickerToComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MonthRangePickerToComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    MonthRangePickerToComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: MonthRangePickerToComponent, selector: "[fsMonthRangeTo],[fsMonthRangeToPicker]", inputs: { fsMonthRangeTo: "fsMonthRangeTo", fsMonthRangeToPicker: "fsMonthRangeToPicker" }, usesInheritance: true, ngImport: i0__namespace, template: "\n    <fs-clear [show]=\"value && !disabled && !readonly && clear\" (clear)=\"cleared($event)\"></fs-clear>\n    <fs-datepicker-trigger (click)=\"triggerClick()\" [disabled]=\"disabled || readonly\" [view]=\"view\"></fs-datepicker-trigger>\n  ", isInline: true, components: [{ type: i1__namespace$7.FsClearElementComponent, selector: "fs-clear", inputs: ["show"], outputs: ["clear"] }, { type: FsDatePickerTriggerComponent, selector: "fs-datepicker-trigger", inputs: ["disabled", "view"], outputs: ["click"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MonthRangePickerToComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: '[fsMonthRangeTo],[fsMonthRangeToPicker]',
                        template: FsDatePickerComponent.template,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { fsMonthRangeTo: [{
                    type: i0.Input
                }], fsMonthRangeToPicker: [{
                    type: i0.Input
                }] } });

    var FsDatePickerModule = /** @class */ (function () {
        function FsDatePickerModule() {
        }
        FsDatePickerModule.forRoot = function () {
            return {
                ngModule: FsDatePickerModule,
                providers: [
                    __spreadArray([], __read(FsDatePickerDialogModule.forRoot().providers)),
                    FsRangePickerStoreService,
                ]
            };
        };
        return FsDatePickerModule;
    }());
    FsDatePickerModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    FsDatePickerModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerModule, declarations: [FsDatePickerComponent,
            DateRangeSeparatorComponent,
            DateRangePickerFromComponent,
            DateRangePickerToComponent,
            FsDateScrollPickerComponent,
            FsDatePickerBirthdayComponent,
            FsDatePickerTriggerComponent,
            FsDateWeekPickerComponent,
            FsTimePickerComponent,
            DateTimeRangePickerFromComponent,
            DateTimeRangePickerToComponent,
            FsDateTimePickerComponent,
            TimeRangePickerFromComponent,
            TimeRangePickerToComponent,
            MonthRangePickerFromComponent,
            MonthRangePickerToComponent], imports: [i1.CommonModule,
            i2.FormsModule,
            i4$1.MatButtonModule,
            i1$3.MatTabsModule,
            i1$1.MatIconModule,
            menu.MatMenuModule,
            select.MatSelectModule,
            i2$1.LayoutModule,
            i1$7.FsClearModule,
            i1$5.FsScrollPickerModule,
            FsDatePickerCalendarModule], exports: [FsDatePickerComponent,
            DateRangeSeparatorComponent,
            DateRangePickerFromComponent,
            DateRangePickerToComponent,
            FsDateScrollPickerComponent,
            FsDatePickerBirthdayComponent,
            FsDateWeekPickerComponent,
            FsTimePickerComponent,
            DateTimeRangePickerFromComponent,
            DateTimeRangePickerToComponent,
            FsDateTimePickerComponent,
            TimeRangePickerFromComponent,
            TimeRangePickerToComponent,
            MonthRangePickerFromComponent,
            MonthRangePickerToComponent] });
    FsDatePickerModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerModule, imports: [[
                i1.CommonModule,
                i2.FormsModule,
                i4$1.MatButtonModule,
                i1$3.MatTabsModule,
                i1$1.MatIconModule,
                menu.MatMenuModule,
                select.MatSelectModule,
                i2$1.LayoutModule,
                i1$7.FsClearModule,
                i1$5.FsScrollPickerModule,
                FsDatePickerCalendarModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsDatePickerModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1.CommonModule,
                            i2.FormsModule,
                            i4$1.MatButtonModule,
                            i1$3.MatTabsModule,
                            i1$1.MatIconModule,
                            menu.MatMenuModule,
                            select.MatSelectModule,
                            i2$1.LayoutModule,
                            i1$7.FsClearModule,
                            i1$5.FsScrollPickerModule,
                            FsDatePickerCalendarModule,
                        ],
                        declarations: [
                            FsDatePickerComponent,
                            DateRangeSeparatorComponent,
                            DateRangePickerFromComponent,
                            DateRangePickerToComponent,
                            FsDateScrollPickerComponent,
                            FsDatePickerBirthdayComponent,
                            FsDatePickerTriggerComponent,
                            FsDateWeekPickerComponent,
                            FsTimePickerComponent,
                            DateTimeRangePickerFromComponent,
                            DateTimeRangePickerToComponent,
                            FsDateTimePickerComponent,
                            TimeRangePickerFromComponent,
                            TimeRangePickerToComponent,
                            MonthRangePickerFromComponent,
                            MonthRangePickerToComponent,
                        ],
                        exports: [
                            FsDatePickerComponent,
                            DateRangeSeparatorComponent,
                            DateRangePickerFromComponent,
                            DateRangePickerToComponent,
                            FsDateScrollPickerComponent,
                            FsDatePickerBirthdayComponent,
                            FsDateWeekPickerComponent,
                            FsTimePickerComponent,
                            DateTimeRangePickerFromComponent,
                            DateTimeRangePickerToComponent,
                            FsDateTimePickerComponent,
                            TimeRangePickerFromComponent,
                            TimeRangePickerToComponent,
                            MonthRangePickerFromComponent,
                            MonthRangePickerToComponent,
                        ],
                    }]
            }] });

    /*
     * Public API Surface of fs-menu
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DateRangePickerFromComponent = DateRangePickerFromComponent;
    exports.DateRangePickerToComponent = DateRangePickerToComponent;
    exports.DateRangeSeparatorComponent = DateRangeSeparatorComponent;
    exports.DateTimeRangePickerFromComponent = DateTimeRangePickerFromComponent;
    exports.DateTimeRangePickerToComponent = DateTimeRangePickerToComponent;
    exports.FsDatePickerBirthdayComponent = FsDatePickerBirthdayComponent;
    exports.FsDatePickerComponent = FsDatePickerComponent;
    exports.FsDatePickerModule = FsDatePickerModule;
    exports.FsDateScrollPickerComponent = FsDateScrollPickerComponent;
    exports.FsDateTimePickerComponent = FsDateTimePickerComponent;
    exports.FsDateWeekPickerComponent = FsDateWeekPickerComponent;
    exports.FsTimePickerComponent = FsTimePickerComponent;
    exports.MonthRangePickerFromComponent = MonthRangePickerFromComponent;
    exports.MonthRangePickerToComponent = MonthRangePickerToComponent;
    exports.TimeRangePickerFromComponent = TimeRangePickerFromComponent;
    exports.TimeRangePickerToComponent = TimeRangePickerToComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=firestitch-datepicker.umd.js.map
