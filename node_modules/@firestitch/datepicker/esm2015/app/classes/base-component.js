import { Renderer2, HostListener, ElementRef, EventEmitter, Output, HostBinding, Input, ChangeDetectorRef, Directive } from '@angular/core';
import { fromEvent, Subject } from 'rxjs';
import { filter, take, takeUntil, tap } from 'rxjs/operators';
import { Validators } from '@angular/forms';
import { isEqual, isValid } from 'date-fns';
import { zonedTimeToUtc } from 'date-fns-tz';
import { parseDate } from '../helpers/parse-date';
import * as i0 from "@angular/core";
export class FsDatePickerBaseComponent {
    constructor(renderer, elementRef, _cdRef) {
        this._cdRef = _cdRef;
        this.change$ = new EventEmitter();
        this.selected$ = new EventEmitter();
        this.blured$ = new EventEmitter();
        this.disabled = false;
        this.readonly = false;
        this.opened = false;
        this.dialog = null;
        this._destroy$ = new Subject();
        this._onChange = (value) => { };
        this._onTouch = () => { };
        this._validatorOnChange = () => { };
        this._clear = true;
        this._lastValueValid = false;
        /** The form control validator for whether the input parses. */
        this._parseValidator = () => {
            return this._lastValueValid
                ? null
                : { fsDatepickerParse: 'Invalid Date' };
        };
        this._validator = Validators.compose([this._parseValidator]);
        this.renderer = renderer;
        this.elementRef = elementRef;
    }
    set clear(value) {
        this._clear = value;
    }
    set timezone(value) {
        this._timezone = value;
        this.writeValue(this._originValue);
    }
    set readonlyState(isReadonly) {
        this.readonly = !!isReadonly || isReadonly === '';
    }
    registerOnChange(fn) { this._onChange = fn; }
    registerOnTouched(fn) { this._onTouch = fn; }
    registerOnValidatorChange(fn) { this._validatorOnChange = fn; }
    ngOnInit() {
        fromEvent(this.el, 'focus')
            .pipe(takeUntil(this._destroy$))
            .subscribe(() => {
            this.open();
            this.el.focus();
        });
        fromEvent(this.el, 'keydown')
            .pipe(tap(() => this.close()), filter((event) => ['Tab', 'Enter', 'Escape'].includes(event.key)), takeUntil(this._destroy$))
            .subscribe((event) => {
            if (event.key === 'Enter') {
                this.inputChange(this.el.value);
            }
            this.close();
            this.el.blur();
        });
    }
    get el() {
        return this.elementRef.nativeElement;
    }
    get clear() {
        return this._clear;
    }
    get value() {
        return this._value;
    }
    get timezone() {
        return this._timezone;
    }
    set value(value) {
        if (value && this.timezone) {
            value = zonedTimeToUtc(value, this.timezone);
        }
        this._value = value;
        this._lastValueValid = !value || isValid(value);
        this._onChange(this.value);
        this.updateInput(this.value);
        this.change$.emit(this.value);
    }
    writeValue(obj) { }
    get dateDialogRef() {
        return this._dateDialogRef;
    }
    cleared(event) {
        event.stopPropagation();
        event.preventDefault();
        this.value = null;
        this.clearInput();
        this.selected$.next(null);
    }
    ngOnDestroy() {
        if (this.dateDialogRef) {
            this.dateDialogRef.close();
        }
        this._destroy$.next();
        this._destroy$.complete();
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this._cdRef.markForCheck();
    }
    validate(c) {
        return this._validator ? this._validator(c) : null;
    }
    open() {
        this.renderer.addClass(document.body, 'fs-date-picker-open');
        this.opened = true;
        this._dateDialogRef.value$
            .pipe(takeUntil(this._dateDialogRef.close$), takeUntil(this._destroy$))
            .subscribe((value) => {
            this.value = value;
            this.selected$.emit(value);
        });
        this._dateDialogRef.close$
            .pipe(take(1), takeUntil(this._destroy$))
            .subscribe(() => {
            this._dateDialogRef = null;
            this.renderer.removeClass(document.body, 'fs-date-picker-open');
            this._cdRef.markForCheck();
        });
    }
    clearInput() {
        this.elementRef.nativeElement.value = null;
    }
    triggerClick() {
        this.el.focus();
        this.el.select();
        this.open();
    }
    updateValue(date) {
        this._value = date;
        this._onChange(this.value);
        this._onTouch();
        this.change$.emit(this.value);
    }
    setReadonly() {
        setTimeout(() => {
            this.elementRef.nativeElement.setAttribute('readonly', true);
        });
    }
    close() {
        if (this._dateDialogRef) {
            this._dateDialogRef.close();
        }
    }
    validateDate(date) {
        this._lastValueValid = !date || isValid(date);
    }
    _inputKeyup(event, value) {
        if (event.key === 'Enter') {
            this.inputChange(value);
        }
    }
    _inputChange(value, target) {
        var _a;
        if (((_a = this.ngModelOptions) === null || _a === void 0 ? void 0 : _a.updateOn) !== 'blur') {
            this.inputChange(value);
        }
    }
    _inputBlur(value) {
        var _a;
        if (((_a = this.ngModelOptions) === null || _a === void 0 ? void 0 : _a.updateOn) === 'blur') {
            this.inputChange(value);
        }
        this.updateInput(this.value);
        this.blured$.emit(this.value);
    }
    inputChange(value) {
        if (!!value) {
            const lastValueWasValid = this._lastValueValid;
            const date = parseDate(value);
            this.validateDate(date);
            if (!isEqual(date, this._value)) {
                this.updateValue(date);
            }
            else if (lastValueWasValid !== this._lastValueValid) {
                this._validatorOnChange();
            }
        }
        else {
            this.updateValue(null);
        }
    }
}
FsDatePickerBaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDatePickerBaseComponent, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });
FsDatePickerBaseComponent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsDatePickerBaseComponent, inputs: { ngModelOptions: "ngModelOptions", clear: "clear", timezone: "timezone", readonlyState: ["readonly", "readonlyState"] }, outputs: { change$: "change", selected$: "selected", blured$: "blured" }, host: { listeners: { "keyup": "_inputKeyup($event,$event.target.value)", "input": "_inputChange($event.target.value,$event.target)", "blur": "_inputBlur($event.target.value)" }, properties: { "class.fs-input-disabled": "this.disabled", "attr.readonly": "this.readonly", "class.fs-input-readonly": "this.readonly" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDatePickerBaseComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { ngModelOptions: [{
                type: Input
            }], clear: [{
                type: Input
            }], timezone: [{
                type: Input
            }], change$: [{
                type: Output,
                args: ['change']
            }], selected$: [{
                type: Output,
                args: ['selected']
            }], blured$: [{
                type: Output,
                args: ['blured']
            }], disabled: [{
                type: HostBinding,
                args: ['class.fs-input-disabled']
            }, {
                type: HostBinding,
                args: ['attr.readonly']
            }], readonlyState: [{
                type: Input,
                args: ['readonly']
            }], readonly: [{
                type: HostBinding,
                args: ['class.fs-input-readonly']
            }, {
                type: HostBinding,
                args: ['attr.readonly']
            }], _inputKeyup: [{
                type: HostListener,
                args: ['keyup', ['$event', '$event.target.value']]
            }], _inputChange: [{
                type: HostListener,
                args: ['input', ['$event.target.value', '$event.target']]
            }], _inputBlur: [{
                type: HostListener,
                args: ['blur', ['$event.target.value']]
            }] } });
//# sourceMappingURL=data:application/json;base64,