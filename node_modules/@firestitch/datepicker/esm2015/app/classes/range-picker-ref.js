import { BehaviorSubject } from 'rxjs';
import { endOfDay, startOfDay } from 'date-fns';
import { PickerViewType } from '../../libs/common/enums/picker-view-type.enum';
import { isDateAfter } from '../../libs/common/helpers/is-date-after';
export class RangePickerRef {
    constructor(view) {
        this.view = view;
        this._startDatePickerExists = false;
        this._endDatePickerExists = false;
        this._startDate$ = new BehaviorSubject(null);
        this._endDate$ = new BehaviorSubject(null);
        this._startDate = null;
        this._endDate = null;
    }
    get startDate() {
        return this._startDate;
    }
    get endDate() {
        return this._endDate;
    }
    get startDate$() {
        return this._startDate$.asObservable();
    }
    get endDate$() {
        return this._endDate$.asObservable();
    }
    get startDatePickerExists() {
        return this._startDatePickerExists;
    }
    get endDatePickerExists() {
        return this._endDatePickerExists;
    }
    get isRangeValid() {
        return isDateAfter(this._endDate, this._startDate, this.view);
    }
    /**
     * Update start date and change end date if needed
     * @param value
     */
    updateStartDate(value) {
        this._startDatePickerExists = true;
        if (!!value
            && (this.view === PickerViewType.Date || this.view === PickerViewType.MonthRange)) {
            value = startOfDay(value);
        }
        this._startDate = value && new Date(value) || null;
        this._startDate$.next(this._startDate);
    }
    /**
     * Update end date
     * @param value
     */
    updateEndDate(value) {
        if (!!value
            && (this.view === PickerViewType.Date || this.view === PickerViewType.MonthRange)) {
            value = endOfDay(value);
        }
        this._endDate = value && new Date(value) || null;
        this._endDatePickerExists = true;
        this._endDate$.next(this._endDate);
    }
    sameAsStartDate(value) {
        if (!!value
            && (this.view === PickerViewType.Date || this.view === PickerViewType.MonthRange)) {
            value = startOfDay(value);
        }
        return this._startDate === value;
    }
    sameAsEndDate(value) {
        if (!!value
            && (this.view === PickerViewType.Date || this.view === PickerViewType.MonthRange)) {
            value = endOfDay(value);
        }
        return this._endDate === value;
    }
    /**
     * Mark start date picker as destroyed
     */
    destroyStartDatePicker() {
        this._startDatePickerExists = false;
    }
    /**
     * Mark end date picker as destroyed
     */
    destroyEndDatePicker() {
        this._endDatePickerExists = false;
    }
    /**
     * destroy everything related with picker
     */
    destroy() { }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZ2UtcGlja2VyLXJlZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcHAvY2xhc3Nlcy9yYW5nZS1waWNrZXItcmVmLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFFbkQsT0FBTyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFaEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBQy9FLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUd0RSxNQUFNLE9BQU8sY0FBYztJQVd6QixZQUFtQixJQUFZO1FBQVosU0FBSSxHQUFKLElBQUksQ0FBUTtRQVR2QiwyQkFBc0IsR0FBRyxLQUFLLENBQUM7UUFDL0IseUJBQW9CLEdBQUcsS0FBSyxDQUFDO1FBRTdCLGdCQUFXLEdBQUcsSUFBSSxlQUFlLENBQWMsSUFBSSxDQUFDLENBQUM7UUFDckQsY0FBUyxHQUFHLElBQUksZUFBZSxDQUFjLElBQUksQ0FBQyxDQUFDO1FBRW5ELGVBQVUsR0FBUyxJQUFJLENBQUM7UUFDeEIsYUFBUSxHQUFTLElBQUksQ0FBQztJQUVJLENBQUM7SUFFbkMsSUFBVyxTQUFTO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN6QixDQUFDO0lBRUQsSUFBVyxPQUFPO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0lBRUQsSUFBVyxVQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN6QyxDQUFDO0lBRUQsSUFBVyxRQUFRO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN2QyxDQUFDO0lBRUQsSUFBVyxxQkFBcUI7UUFDOUIsT0FBTyxJQUFJLENBQUMsc0JBQXNCLENBQUM7SUFDckMsQ0FBQztJQUVELElBQVcsbUJBQW1CO1FBQzVCLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDO0lBQ25DLENBQUM7SUFFRCxJQUFXLFlBQVk7UUFDckIsT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxJQUFzQixDQUFDLENBQUM7SUFDbEYsQ0FBQztJQUVEOzs7T0FHRztJQUNJLGVBQWUsQ0FBQyxLQUFXO1FBQ2hDLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxJQUFJLENBQUM7UUFFbkMsSUFBSSxDQUFDLENBQUMsS0FBSztlQUNOLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxjQUFjLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssY0FBYyxDQUFDLFVBQVUsQ0FBQyxFQUNqRjtZQUNBLEtBQUssR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0I7UUFFRCxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUM7UUFDbkQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRDs7O09BR0c7SUFDSSxhQUFhLENBQUMsS0FBVztRQUM5QixJQUFJLENBQUMsQ0FBQyxLQUFLO2VBQ04sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLGNBQWMsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxjQUFjLENBQUMsVUFBVSxDQUFDLEVBQ2pGO1lBQ0EsS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN6QjtRQUVELElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQztRQUNqRCxJQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDO1FBRWpDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRU0sZUFBZSxDQUFDLEtBQVc7UUFDaEMsSUFBSSxDQUFDLENBQUMsS0FBSztlQUNOLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxjQUFjLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssY0FBYyxDQUFDLFVBQVUsQ0FBQyxFQUNqRjtZQUNBLEtBQUssR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0I7UUFFRCxPQUFPLElBQUksQ0FBQyxVQUFVLEtBQUssS0FBSyxDQUFDO0lBQ25DLENBQUM7SUFFTSxhQUFhLENBQUMsS0FBVztRQUM5QixJQUFJLENBQUMsQ0FBQyxLQUFLO2VBQ04sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLGNBQWMsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxjQUFjLENBQUMsVUFBVSxDQUFDLEVBQ2pGO1lBQ0EsS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN6QjtRQUVELE9BQU8sSUFBSSxDQUFDLFFBQVEsS0FBSyxLQUFLLENBQUM7SUFDakMsQ0FBQztJQUVEOztPQUVHO0lBQ0ksc0JBQXNCO1FBQzNCLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxLQUFLLENBQUM7SUFDdEMsQ0FBQztJQUVEOztPQUVHO0lBQ0ksb0JBQW9CO1FBQ3pCLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxLQUFLLENBQUM7SUFDcEMsQ0FBQztJQUVEOztPQUVHO0lBQ0ksT0FBTyxLQUFJLENBQUM7Q0FFcEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgZW5kT2ZEYXksIHN0YXJ0T2ZEYXkgfSBmcm9tICdkYXRlLWZucyc7XG5cbmltcG9ydCB7IFBpY2tlclZpZXdUeXBlIH0gZnJvbSAnLi4vLi4vbGlicy9jb21tb24vZW51bXMvcGlja2VyLXZpZXctdHlwZS5lbnVtJztcbmltcG9ydCB7IGlzRGF0ZUFmdGVyIH0gZnJvbSAnLi4vLi4vbGlicy9jb21tb24vaGVscGVycy9pcy1kYXRlLWFmdGVyJztcblxuXG5leHBvcnQgY2xhc3MgUmFuZ2VQaWNrZXJSZWYge1xuXG4gIHByaXZhdGUgX3N0YXJ0RGF0ZVBpY2tlckV4aXN0cyA9IGZhbHNlO1xuICBwcml2YXRlIF9lbmREYXRlUGlja2VyRXhpc3RzID0gZmFsc2U7XG5cbiAgcHJpdmF0ZSBfc3RhcnREYXRlJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8RGF0ZSB8IG51bGw+KG51bGwpO1xuICBwcml2YXRlIF9lbmREYXRlJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8RGF0ZSB8IG51bGw+KG51bGwpO1xuXG4gIHByaXZhdGUgX3N0YXJ0RGF0ZTogRGF0ZSA9IG51bGw7XG4gIHByaXZhdGUgX2VuZERhdGU6IERhdGUgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyB2aWV3OiBzdHJpbmcpIHt9XG5cbiAgcHVibGljIGdldCBzdGFydERhdGUoKTogRGF0ZSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0RGF0ZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZW5kRGF0ZSgpOiBEYXRlIHtcbiAgICByZXR1cm4gdGhpcy5fZW5kRGF0ZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgc3RhcnREYXRlJCgpOiBPYnNlcnZhYmxlPERhdGU+IHtcbiAgICByZXR1cm4gdGhpcy5fc3RhcnREYXRlJC5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZW5kRGF0ZSQoKTogT2JzZXJ2YWJsZTxEYXRlPiB7XG4gICAgcmV0dXJuIHRoaXMuX2VuZERhdGUkLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgcHVibGljIGdldCBzdGFydERhdGVQaWNrZXJFeGlzdHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0RGF0ZVBpY2tlckV4aXN0cztcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZW5kRGF0ZVBpY2tlckV4aXN0cygpIHtcbiAgICByZXR1cm4gdGhpcy5fZW5kRGF0ZVBpY2tlckV4aXN0cztcbiAgfVxuXG4gIHB1YmxpYyBnZXQgaXNSYW5nZVZhbGlkKCkge1xuICAgIHJldHVybiBpc0RhdGVBZnRlcih0aGlzLl9lbmREYXRlLCB0aGlzLl9zdGFydERhdGUsIHRoaXMudmlldyBhcyBQaWNrZXJWaWV3VHlwZSk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHN0YXJ0IGRhdGUgYW5kIGNoYW5nZSBlbmQgZGF0ZSBpZiBuZWVkZWRcbiAgICogQHBhcmFtIHZhbHVlXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlU3RhcnREYXRlKHZhbHVlOiBEYXRlKSB7XG4gICAgdGhpcy5fc3RhcnREYXRlUGlja2VyRXhpc3RzID0gdHJ1ZTtcblxuICAgIGlmICghIXZhbHVlXG4gICAgICAmJiAodGhpcy52aWV3ID09PSBQaWNrZXJWaWV3VHlwZS5EYXRlIHx8IHRoaXMudmlldyA9PT0gUGlja2VyVmlld1R5cGUuTW9udGhSYW5nZSlcbiAgICApIHtcbiAgICAgIHZhbHVlID0gc3RhcnRPZkRheSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgdGhpcy5fc3RhcnREYXRlID0gdmFsdWUgJiYgbmV3IERhdGUodmFsdWUpIHx8IG51bGw7XG4gICAgdGhpcy5fc3RhcnREYXRlJC5uZXh0KHRoaXMuX3N0YXJ0RGF0ZSk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGVuZCBkYXRlXG4gICAqIEBwYXJhbSB2YWx1ZVxuICAgKi9cbiAgcHVibGljIHVwZGF0ZUVuZERhdGUodmFsdWU6IERhdGUpIHtcbiAgICBpZiAoISF2YWx1ZVxuICAgICAgJiYgKHRoaXMudmlldyA9PT0gUGlja2VyVmlld1R5cGUuRGF0ZSB8fCB0aGlzLnZpZXcgPT09IFBpY2tlclZpZXdUeXBlLk1vbnRoUmFuZ2UpXG4gICAgKSB7XG4gICAgICB2YWx1ZSA9IGVuZE9mRGF5KHZhbHVlKTtcbiAgICB9XG5cbiAgICB0aGlzLl9lbmREYXRlID0gdmFsdWUgJiYgbmV3IERhdGUodmFsdWUpIHx8IG51bGw7XG4gICAgdGhpcy5fZW5kRGF0ZVBpY2tlckV4aXN0cyA9IHRydWU7XG5cbiAgICB0aGlzLl9lbmREYXRlJC5uZXh0KHRoaXMuX2VuZERhdGUpO1xuICB9XG5cbiAgcHVibGljIHNhbWVBc1N0YXJ0RGF0ZSh2YWx1ZTogRGF0ZSk6IGJvb2xlYW4ge1xuICAgIGlmICghIXZhbHVlXG4gICAgICAmJiAodGhpcy52aWV3ID09PSBQaWNrZXJWaWV3VHlwZS5EYXRlIHx8IHRoaXMudmlldyA9PT0gUGlja2VyVmlld1R5cGUuTW9udGhSYW5nZSlcbiAgICApIHtcbiAgICAgIHZhbHVlID0gc3RhcnRPZkRheSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0RGF0ZSA9PT0gdmFsdWU7XG4gIH1cblxuICBwdWJsaWMgc2FtZUFzRW5kRGF0ZSh2YWx1ZTogRGF0ZSk6IGJvb2xlYW4ge1xuICAgIGlmICghIXZhbHVlXG4gICAgICAmJiAodGhpcy52aWV3ID09PSBQaWNrZXJWaWV3VHlwZS5EYXRlIHx8IHRoaXMudmlldyA9PT0gUGlja2VyVmlld1R5cGUuTW9udGhSYW5nZSlcbiAgICApIHtcbiAgICAgIHZhbHVlID0gZW5kT2ZEYXkodmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9lbmREYXRlID09PSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXJrIHN0YXJ0IGRhdGUgcGlja2VyIGFzIGRlc3Ryb3llZFxuICAgKi9cbiAgcHVibGljIGRlc3Ryb3lTdGFydERhdGVQaWNrZXIoKSB7XG4gICAgdGhpcy5fc3RhcnREYXRlUGlja2VyRXhpc3RzID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogTWFyayBlbmQgZGF0ZSBwaWNrZXIgYXMgZGVzdHJveWVkXG4gICAqL1xuICBwdWJsaWMgZGVzdHJveUVuZERhdGVQaWNrZXIoKSB7XG4gICAgdGhpcy5fZW5kRGF0ZVBpY2tlckV4aXN0cyA9IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIGRlc3Ryb3kgZXZlcnl0aGluZyByZWxhdGVkIHdpdGggcGlja2VyXG4gICAqL1xuICBwdWJsaWMgZGVzdHJveSgpIHt9XG5cbn1cbiJdfQ==