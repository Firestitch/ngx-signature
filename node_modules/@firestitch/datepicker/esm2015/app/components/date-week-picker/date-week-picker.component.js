import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, HostListener, Inject, Injector, Input, Output, Renderer2, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { isDate, format } from 'date-fns';
import { FsDatePickerDialogFactory } from '../../../libs/dialog/services/dialog-factory.service';
import { PickerViewType } from '../../../libs/common/enums/picker-view-type.enum';
import { FsDatePickerBaseComponent } from '../../classes/base-component';
import { FsDatePickerComponent } from '../date-picker/date-picker.component';
import * as i0 from "@angular/core";
import * as i1 from "../../../libs/dialog/services/dialog-factory.service";
import * as i2 from "@firestitch/clear";
import * as i3 from "../date-picker-trigger/date-picker-trigger.component";
export class FsDateWeekPickerComponent extends FsDatePickerBaseComponent {
    constructor(renderer, injector, elementRef, _cdRef, fsDatepickerFactory) {
        super(renderer, elementRef, _cdRef);
        this.renderer = renderer;
        this.injector = injector;
        this.elementRef = elementRef;
        this._cdRef = _cdRef;
        this.fsDatepickerFactory = fsDatepickerFactory;
        this.minYear = null;
        this.maxYear = null;
        this.minDate = null;
        this.maxDate = null;
        this.seedDate = null;
        this.periodWeeks = 1;
        this.view = PickerViewType.Week;
        this.change$ = new EventEmitter();
    }
    inputClick() {
        if (!this.disabled && !this.readonly) {
            this.open();
        }
    }
    ngAfterViewInit() {
        this.setReadonly();
    }
    writeValue(value) {
        this._value = value;
        this.validateDate(this.value);
        this.updateInput(value);
        this._cdRef.markForCheck();
    }
    updateInput(value) {
        if (value && isDate(value.from) && isDate(value.to)) {
            if (value.from.getFullYear() == value.to.getFullYear()) {
                const from = format(value.from, 'MMM d');
                const to = format(value.to, 'MMM d yyyy');
                this.elementRef.nativeElement.value = `#${value.period}: ${from} - ${to}`;
            }
            else {
                const from = format(value.from, 'MMM d yyyy');
                const to = format(value.to, 'MMM d yyyy');
                this.elementRef.nativeElement.value = `#${value.period}: ${from} - ${to}`;
            }
        }
        else {
            this.elementRef.nativeElement.value = '';
        }
    }
    open() {
        if (this._dateDialogRef) {
            return;
        }
        this._dateDialogRef = this.fsDatepickerFactory.openDatePicker(this.elementRef, this.injector, {
            modelValue: this.value,
            view: this.view,
            minYear: this.minYear,
            maxYear: this.maxYear,
            minDate: this.minDate,
            maxDate: this.maxDate,
            components: this._getDefaultComponents(),
            seedDate: this.seedDate,
            periodWeeks: this.periodWeeks,
        });
        super.open();
    }
    _getDefaultComponents() {
        if (this.view === 'time') {
            return { timeStart: true };
        }
        else {
            return { calendarStart: true };
        }
    }
}
FsDateWeekPickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDateWeekPickerComponent, deps: [{ token: i0.Renderer2 }, { token: i0.Injector }, { token: ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.FsDatePickerDialogFactory }], target: i0.ɵɵFactoryTarget.Component });
FsDateWeekPickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDateWeekPickerComponent, selector: "[fsDateWeekPicker]", inputs: { minYear: "minYear", maxYear: "maxYear", minDate: "minDate", maxDate: "maxDate", seedDate: "seedDate", periodWeeks: "periodWeeks", view: "view" }, outputs: { change$: "change" }, host: { listeners: { "click": "inputClick()", "focus": "inputClick()" } }, providers: [{
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => FsDateWeekPickerComponent),
            multi: true
        }], usesInheritance: true, ngImport: i0, template: "\n    <fs-clear [show]=\"value && !disabled && !readonly && clear\" (clear)=\"cleared($event)\"></fs-clear>\n    <fs-datepicker-trigger (click)=\"triggerClick()\" [disabled]=\"disabled || readonly\" [view]=\"view\"></fs-datepicker-trigger>\n  ", isInline: true, components: [{ type: i2.FsClearElementComponent, selector: "fs-clear", inputs: ["show"], outputs: ["clear"] }, { type: i3.FsDatePickerTriggerComponent, selector: "fs-datepicker-trigger", inputs: ["disabled", "view"], outputs: ["click"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDateWeekPickerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[fsDateWeekPicker]',
                    template: FsDatePickerComponent.template,
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => FsDateWeekPickerComponent),
                            multi: true
                        }],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.Injector }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i0.ChangeDetectorRef }, { type: i1.FsDatePickerDialogFactory }]; }, propDecorators: { minYear: [{
                type: Input
            }], maxYear: [{
                type: Input
            }], minDate: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], seedDate: [{
                type: Input
            }], periodWeeks: [{
                type: Input
            }], view: [{
                type: Input
            }], change$: [{
                type: Output,
                args: ['change']
            }], inputClick: [{
                type: HostListener,
                args: ['click']
            }, {
                type: HostListener,
                args: ['focus']
            }] } });
//# sourceMappingURL=data:application/json;base64,