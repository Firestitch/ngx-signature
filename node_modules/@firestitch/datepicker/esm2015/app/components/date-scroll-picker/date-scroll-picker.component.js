import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, forwardRef, Inject, Injector, Input, Renderer2, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { FsDatePickerDialogFactory } from '../../../libs/dialog/services/dialog-factory.service';
import { ScrollPickerViewType } from '../../../libs/common/enums/scroll-picker-view-type.enum';
import { FsDatePickerBaseComponent } from '../../classes/base-component';
import { createDateFromValue } from '../../helpers/create-date-from-value';
import { formatDateTime } from '../../helpers/format-date-time';
import { FsDatePickerComponent } from '../date-picker/date-picker.component';
import * as i0 from "@angular/core";
import * as i1 from "../../../libs/dialog/services/dialog-factory.service";
import * as i2 from "@firestitch/clear";
import * as i3 from "../date-picker-trigger/date-picker-trigger.component";
export class FsDateScrollPickerComponent extends FsDatePickerBaseComponent {
    constructor(renderer, injector, elementRef, _datepickerFactory, _cdRef) {
        super(renderer, elementRef, _cdRef);
        this.renderer = renderer;
        this.injector = injector;
        this.elementRef = elementRef;
        this._datepickerFactory = _datepickerFactory;
        this._cdRef = _cdRef;
        this.minYear = (new Date()).getFullYear() - 50;
        this.maxYear = (new Date()).getFullYear() + 50;
        this.showMonth = true;
        this.showYear = true;
        this.showDay = true;
        this.view = ScrollPickerViewType.Date;
    }
    writeValue(value) {
        this._originValue = value;
        this._value = createDateFromValue(value, this.timezone);
        this.validateDate(this.value);
        this.updateInput(value);
        this._cdRef.markForCheck();
    }
    updateInput(value) {
        let format = ScrollPickerViewType.Date;
        if (this.showYear && this.showMonth && !this.showDay) {
            format = ScrollPickerViewType.MonthYear;
        }
        else if (!this.showYear && this.showMonth && this.showDay) {
            format = ScrollPickerViewType.MonthDay;
        }
        else if (!this.showYear && this.showMonth && !this.showDay) {
            format = ScrollPickerViewType.Month;
        }
        else if (this.showYear && !this.showMonth && !this.showDay) {
            format = ScrollPickerViewType.Year;
        }
        this.elementRef.nativeElement.value = formatDateTime(value, format);
    }
    open() {
        if (this._dateDialogRef || this.disabled || this.readonly) {
            return;
        }
        this._dateDialogRef = this._datepickerFactory.openDateScrollPicker(this.elementRef, this.injector, {
            modelValue: this.value,
            minYear: this.minYear,
            maxYear: this.maxYear,
            maxDate: this.maxDate,
            showMonth: this.showMonth,
            showDay: this.showDay,
            showYear: this.showYear,
            view: this.view,
        });
        super.open();
    }
}
FsDateScrollPickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDateScrollPickerComponent, deps: [{ token: i0.Renderer2 }, { token: i0.Injector }, { token: ElementRef }, { token: i1.FsDatePickerDialogFactory }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
FsDateScrollPickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDateScrollPickerComponent, selector: "[fsDateScrollPicker]", inputs: { minYear: "minYear", maxYear: "maxYear", maxDate: "maxDate", showMonth: "showMonth", showYear: "showYear", showDay: "showDay" }, providers: [{
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => FsDateScrollPickerComponent),
            multi: true
        }], usesInheritance: true, ngImport: i0, template: "\n    <fs-clear [show]=\"value && !disabled && !readonly && clear\" (clear)=\"cleared($event)\"></fs-clear>\n    <fs-datepicker-trigger (click)=\"triggerClick()\" [disabled]=\"disabled || readonly\" [view]=\"view\"></fs-datepicker-trigger>\n  ", isInline: true, components: [{ type: i2.FsClearElementComponent, selector: "fs-clear", inputs: ["show"], outputs: ["clear"] }, { type: i3.FsDatePickerTriggerComponent, selector: "fs-datepicker-trigger", inputs: ["disabled", "view"], outputs: ["click"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDateScrollPickerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[fsDateScrollPicker]',
                    template: FsDatePickerComponent.template,
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => FsDateScrollPickerComponent),
                            multi: true
                        }],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.Injector }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i1.FsDatePickerDialogFactory }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { minYear: [{
                type: Input
            }], maxYear: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], showMonth: [{
                type: Input
            }], showYear: [{
                type: Input
            }], showDay: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,