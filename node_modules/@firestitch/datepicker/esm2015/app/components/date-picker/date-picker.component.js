import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Inject, Injector, Input, Output, Renderer2, } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { isValid } from 'date-fns';
import { PickerViewType } from '../../../libs/common/enums/picker-view-type.enum';
import { FsDatePickerDialogFactory } from '../../../libs/dialog/services/dialog-factory.service';
import { FsDatePickerBaseComponent } from '../../classes/base-component';
import { createDateFromValue } from '../../helpers/create-date-from-value';
import { formatDateTime } from '../../helpers/format-date-time';
import * as i0 from "@angular/core";
import * as i1 from "../../../libs/dialog/services/dialog-factory.service";
import * as i2 from "@firestitch/clear";
import * as i3 from "../date-picker-trigger/date-picker-trigger.component";
export class FsDatePickerComponent extends FsDatePickerBaseComponent {
    constructor(elementRef, renderer, injector, _cdRef, fsDatepickerFactory) {
        super(renderer, elementRef, _cdRef);
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.injector = injector;
        this._cdRef = _cdRef;
        this.fsDatepickerFactory = fsDatepickerFactory;
        this.minYear = null;
        this.maxYear = null;
        this.minDate = null;
        this.maxDate = null;
        this.startOfDay = true;
        this.view = PickerViewType.Date;
        this.minutes = true;
        this.change$ = new EventEmitter();
    }
    writeValue(value) {
        this._originValue = value;
        this._value = createDateFromValue(value, this.timezone);
        this.validateDate(this.value);
        this.updateInput(this.value);
        this._cdRef.markForCheck();
    }
    updateInput(value) {
        if (!this.minutes && value) {
            value.setMinutes(0);
        }
        this.elementRef.nativeElement.value = formatDateTime(value, this.view, this.format, this.timezone);
    }
    open() {
        if (this.disabled || this.readonly || this._dateDialogRef) {
            return;
        }
        const modelValue = isValid(this.value) ? this.value : null;
        this._dateDialogRef = this.fsDatepickerFactory.openDatePicker(this.elementRef, this.injector, {
            modelValue: modelValue,
            view: this.view,
            minutes: this.minutes,
            minYear: this.minYear,
            maxYear: this.maxYear,
            minDate: this.minDate,
            maxDate: this.maxDate,
            startOfDay: this.startOfDay,
            components: this._getDefaultComponents(),
        });
        super.open();
    }
    updateValue(value) {
        if (this.view === PickerViewType.Time && isValid(this._value) && isValid(value)) {
            this._value.setHours(value.getHours());
            this._value.setMinutes(value.getMinutes());
            this._value.setSeconds(value.getSeconds());
            value = new Date(this._value);
        }
        super.updateValue(value);
    }
    _getDefaultComponents() {
        if (this.view === 'time') {
            return { timeStart: true };
        }
        else {
            return { calendarStart: true };
        }
    }
}
FsDatePickerComponent.template = `
    <fs-clear [show]="value && !disabled && !readonly && clear" (clear)="cleared($event)"></fs-clear>
    <fs-datepicker-trigger (click)="triggerClick()" [disabled]="disabled || readonly" [view]="view"></fs-datepicker-trigger>
  `;
FsDatePickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDatePickerComponent, deps: [{ token: ElementRef }, { token: i0.Renderer2 }, { token: i0.Injector }, { token: i0.ChangeDetectorRef }, { token: i1.FsDatePickerDialogFactory }], target: i0.ɵɵFactoryTarget.Component });
FsDatePickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDatePickerComponent, selector: "[fsDatePicker]", inputs: { minYear: "minYear", maxYear: "maxYear", minDate: "minDate", maxDate: "maxDate", startOfDay: "startOfDay", view: "view", format: "format", minutes: "minutes" }, outputs: { change$: "change" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => FsDatePickerComponent),
            multi: true,
        },
        {
            provide: NG_VALIDATORS,
            useExisting: forwardRef(() => FsDatePickerComponent),
            multi: true,
        }
    ], usesInheritance: true, ngImport: i0, template: "\n    <fs-clear [show]=\"value && !disabled && !readonly && clear\" (clear)=\"cleared($event)\"></fs-clear>\n    <fs-datepicker-trigger (click)=\"triggerClick()\" [disabled]=\"disabled || readonly\" [view]=\"view\"></fs-datepicker-trigger>\n  ", isInline: true, components: [{ type: i2.FsClearElementComponent, selector: "fs-clear", inputs: ["show"], outputs: ["clear"] }, { type: i3.FsDatePickerTriggerComponent, selector: "fs-datepicker-trigger", inputs: ["disabled", "view"], outputs: ["click"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDatePickerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[fsDatePicker]',
                    template: FsDatePickerComponent.template,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => FsDatePickerComponent),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(() => FsDatePickerComponent),
                            multi: true,
                        }
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i0.Renderer2 }, { type: i0.Injector }, { type: i0.ChangeDetectorRef }, { type: i1.FsDatePickerDialogFactory }]; }, propDecorators: { minYear: [{
                type: Input
            }], maxYear: [{
                type: Input
            }], minDate: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], startOfDay: [{
                type: Input
            }], view: [{
                type: Input
            }], format: [{
                type: Input
            }], minutes: [{
                type: Input
            }], change$: [{
                type: Output,
                args: ['change']
            }] } });
//# sourceMappingURL=data:application/json;base64,