import { ChangeDetectorRef, Directive, ElementRef, HostBinding, HostListener, Injector, Input } from '@angular/core';
import { NgControl, } from '@angular/forms';
import { Subject } from 'rxjs';
import { filter, map, pairwise, skip, take, takeUntil } from 'rxjs/operators';
import { isDate, isEqual, isValid, subDays } from 'date-fns';
import { zonedTimeToUtc } from 'date-fns-tz';
import { FsDatePickerDialogFactory } from '../../../../libs/dialog/services/dialog-factory.service';
import { PickerViewType } from '../../../../libs/common/enums/picker-view-type.enum';
import { isSameDate } from '../../../../libs/common/helpers/is-same-date';
import { formatDateTime } from '../../../helpers/format-date-time';
import { createDateFromValue } from '../../../helpers/create-date-from-value';
import { parseDate } from '../../../helpers/parse-date';
import * as i0 from "@angular/core";
import * as i1 from "../../../../libs/dialog/services/dialog-factory.service";
import * as i2 from "@angular/forms";
export class RangePickerComponent {
    constructor(_elRef, _injector, _datepickerFactory, _type, _cdRef, _ngControl) {
        this._elRef = _elRef;
        this._injector = _injector;
        this._datepickerFactory = _datepickerFactory;
        this._type = _type;
        this._cdRef = _cdRef;
        this._ngControl = _ngControl;
        this.view = PickerViewType.Date;
        this.minYear = null;
        this.maxYear = null;
        this.minDate = null;
        this.maxDate = null;
        this.clear = true;
        this.disabled = false;
        this.readonly = false;
        this.onTouch = () => { };
        this._destroy$ = new Subject();
        this._lastValueValid = false;
        /** The form control validator for whether the input parses. */
        this._parseValidator = () => {
            return this._lastValueValid
                ? null
                : { fsDatepickerParse: 'Invalid Date' };
        };
        this._ngControl.valueAccessor = this;
        this._elRef.nativeElement.setAttribute('autocomplete', 'off');
    }
    set readonlyState(isReadonly) {
        this.readonly = !!isReadonly || isReadonly === '';
    }
    set timezone(value) {
        this._timezone = value;
        this._tzChanged(this._originValue);
    }
    get name() {
        return this._name;
    }
    get timezone() {
        return this._timezone;
    }
    set value(value) {
        if (this._value !== value) {
            this._value = value;
            this.onChange(value);
            this.onTouch(value);
        }
    }
    ngOnInit() {
        const control = this._ngControl.control;
        const validators = control.validator
            ? [control.validator, this._parseValidator]
            : this._parseValidator;
        control.setValidators(validators);
        control.updateValueAndValidity();
    }
    get value() {
        return this._value;
    }
    get dateDialogRef() {
        return this._dateDialogRef;
    }
    writeValue(value) {
        value = this._processInputDate(value);
        this._originValue = value;
        this.validateDate(value);
        const [valuesAreDates] = this._checkValuesEquality(value, this.value);
        if ((valuesAreDates) || (!valuesAreDates && this.value !== value)) {
            this._value = value;
            this.updateInput(this._value);
            this._cdRef.markForCheck();
        }
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    open() {
        if (this._dateDialogRef || this.disabled || this.readonly) {
            return;
        }
        //this._disableInput();
        this._dateDialogRef = this._datepickerFactory.openDatePicker(this._elRef, this._injector, {
            view: this.view,
            minYear: this.minYear,
            maxYear: this.maxYear,
            minDate: this._getPickerStartDate() || this.minDate,
            maxDate: this.maxDate,
            components: this._getDefaultComponents(),
            modelValue: this.value,
            pickerRef: this._pickerRef,
            rangeType: this._type
        });
        this._elRef.nativeElement.focus();
        this._listenDialogValueChanges();
        this._dateDialogRef.close$
            .pipe(take(1), takeUntil(this._destroy$))
            .subscribe(() => {
            this._dateDialogRef = null;
            this._enableInput();
            this._cdRef.markForCheck();
        });
    }
    /**
     * Set value which was selected in dialog
     * @param value
     */
    updateValueFromDialog(value) {
        this.updateValue(value);
        // this.writeValue(value);
    }
    updateValue(value) {
        if (this.view === PickerViewType.Time && isValid(this._value) && isValid(value)) {
            this._value.setHours(value.getHours());
            this._value.setMinutes(value.getMinutes());
            this._value.setSeconds(value.getSeconds());
            value = new Date(this._value);
        }
        this._value = value;
        this.updateInput(this._value);
        if (value && this.timezone) {
            value = zonedTimeToUtc(value, this.timezone);
        }
        this.onChange(value);
        this.onTouch(value);
    }
    updateInput(value) {
        this._elRef.nativeElement.value = formatDateTime(value, this.view, this.format, this.timezone);
    }
    _inputKeyup(event, value) {
        if (event.key === 'Enter') {
            this.inputChange(value);
        }
    }
    _inputChange(value, target) {
        var _a;
        if (((_a = this.ngModelOptions) === null || _a === void 0 ? void 0 : _a.updateOn) !== 'blur') {
            this.inputChange(value);
        }
    }
    inputChange(value) {
        const lastValueWasValid = this._lastValueValid;
        const date = parseDate(value);
        this._lastValueValid = !date || isValid(date);
        if (!isEqual(date, this._value)) {
            this.updateValue(date);
        }
        else if (lastValueWasValid !== this._lastValueValid) {
            this._ngControl.control.updateValueAndValidity();
        }
    }
    _inputBlur(value) {
        var _a;
        if (((_a = this.ngModelOptions) === null || _a === void 0 ? void 0 : _a.updateOn) === 'blur') {
            this.inputChange(value);
        }
        this.updateInput(this.value);
    }
    registerOnChange(fn) { this.onChange = fn; }
    registerOnTouched(fn) { this.onTouch = fn; }
    triggerClick() {
        this._elRef.nativeElement.focus();
        this._elRef.nativeElement.select();
        this.open();
    }
    _processInputDate(date) {
        if (!date) {
            return null;
        }
        return createDateFromValue(date, this.timezone);
    }
    _getDefaultComponents() {
        if (this.view === 'time') {
            return { timeStart: true };
        }
        else {
            return { calendarStart: true, calendarEnd: true };
        }
    }
    _enableInput() {
        this.disabled = false;
    }
    _disableInput() {
        this.disabled = true;
    }
    _tzChanged(originDate) {
        this._value = createDateFromValue(originDate, this.timezone);
        this.updateInput(this._value);
        this._cdRef.markForCheck();
    }
    _listenDialogValueChanges() {
        this._dateDialogRef.value$
            .pipe(takeUntil(this._dateDialogRef.close$), takeUntil(this._destroy$))
            .subscribe((value) => {
            this.updateValueFromDialog(value);
        });
    }
    _checkValuesEquality(newValue, prevValue) {
        const valuesAreDates = isDate(newValue) && isDate(prevValue) && isValid(newValue) && isValid(prevValue);
        const valuesDatesEquals = valuesAreDates
            && isSameDate(newValue, prevValue);
        return [valuesAreDates, valuesDatesEquals];
    }
    /**
     * We need picker start date to be able to limit "Date To" picker
     */
    _getPickerStartDate() {
        if (this.view !== PickerViewType.MonthRange
            && isDate(this._pickerRef.startDate)
            && isValid(this._pickerRef.startDate)) {
            return subDays(this._pickerRef.startDate, 1);
        }
        return false;
    }
    validateDate(date) {
        this._lastValueValid = !date || isValid(date);
    }
    _pickerRefUpdates$(target) {
        return target
            .pipe(skip(1), pairwise(), filter((changes) => {
            var _a, _b, _c;
            const prevValue = (_a = changes[0]) === null || _a === void 0 ? void 0 : _a.getTime();
            const newValue = (_b = changes[1]) === null || _b === void 0 ? void 0 : _b.getTime();
            return prevValue !== newValue
                && ((_c = this.value) === null || _c === void 0 ? void 0 : _c.getTime()) !== newValue;
        }), map((changes) => changes[1]));
    }
}
RangePickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RangePickerComponent, deps: "invalid", target: i0.ɵɵFactoryTarget.Directive });
RangePickerComponent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: RangePickerComponent, inputs: { view: "view", minYear: "minYear", maxYear: "maxYear", minDate: "minDate", maxDate: "maxDate", clear: "clear", format: "format", readonlyState: ["readonly", "readonlyState"], ngModelOptions: "ngModelOptions", timezone: "timezone" }, host: { listeners: { "focus": "open()", "keyup": "_inputKeyup($event,$event.target.value)", "input": "_inputChange($event.target.value,$event.target)", "blur": "_inputBlur($event.target.value)" }, properties: { "class.fs-input-disabled": "this.disabled", "attr.readonly": "this.readonly", "class.fs-input-readonly": "this.readonly" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RangePickerComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Injector }, { type: i1.FsDatePickerDialogFactory }, { type: undefined }, { type: i0.ChangeDetectorRef }, { type: i2.NgControl }]; }, propDecorators: { view: [{
                type: Input
            }], minYear: [{
                type: Input
            }], maxYear: [{
                type: Input
            }], minDate: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], clear: [{
                type: Input
            }], format: [{
                type: Input
            }], disabled: [{
                type: HostBinding,
                args: ['class.fs-input-disabled']
            }, {
                type: HostBinding,
                args: ['attr.readonly']
            }], readonlyState: [{
                type: Input,
                args: ['readonly']
            }], ngModelOptions: [{
                type: Input
            }], timezone: [{
                type: Input
            }], readonly: [{
                type: HostBinding,
                args: ['class.fs-input-readonly']
            }, {
                type: HostBinding,
                args: ['attr.readonly']
            }], open: [{
                type: HostListener,
                args: ['focus']
            }], _inputKeyup: [{
                type: HostListener,
                args: ['keyup', ['$event', '$event.target.value']]
            }], _inputChange: [{
                type: HostListener,
                args: ['input', ['$event.target.value', '$event.target']]
            }], _inputBlur: [{
                type: HostListener,
                args: ['blur', ['$event.target.value']]
            }] } });
//# sourceMappingURL=data:application/json;base64,