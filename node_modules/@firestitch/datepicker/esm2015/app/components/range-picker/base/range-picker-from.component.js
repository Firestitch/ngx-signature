import { ChangeDetectorRef, Directive, ElementRef, Injector, Optional, Self, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { startOfDay } from 'date-fns';
import { FsDatePickerDialogFactory } from '../../../../libs/dialog/services/dialog-factory.service';
import { PickerViewType } from '../../../../libs/common/enums/picker-view-type.enum';
import { RangePickerComponent } from '../base/range-picker-base.component';
import { FsRangePickerStoreService } from '../../../services/range-picker-store.service';
import * as i0 from "@angular/core";
import * as i1 from "../../../../libs/dialog/services/dialog-factory.service";
import * as i2 from "@angular/forms";
import * as i3 from "../../../services/range-picker-store.service";
export class RangePickerFromComponent extends RangePickerComponent {
    constructor(_elRef, _injector, _datepickerFactory, _cdRef, _ngControl, _rangePickerStore) {
        super(_elRef, _injector, _datepickerFactory, 'from', _cdRef, _ngControl);
        this._elRef = _elRef;
        this._injector = _injector;
        this._datepickerFactory = _datepickerFactory;
        this._cdRef = _cdRef;
        this._ngControl = _ngControl;
        this._rangePickerStore = _rangePickerStore;
    }
    ngOnInit() {
        this.registerPicker();
        super.ngOnInit();
    }
    ngOnDestroy() {
        this._rangePickerStore.destroyStartDatePicker(this.name);
        this._destroy$.next();
        this._destroy$.complete();
    }
    registerPicker() {
        this._pickerRef = this._rangePickerStore.registerPickerFrom(this.name, this.value, this.view);
    }
    writeValue(value) {
        // Hot fix while angular has ongoing issue
        // https://github.com/angular/angular/issues/29218
        if (!this.onChange) {
            return;
        }
        super.writeValue(value);
        const [valuesAreDates] = this._checkValuesEquality(this.value, this._pickerRef.startDate);
        if ((valuesAreDates && !this._pickerRef.sameAsStartDate(this.value)) || (!valuesAreDates)) {
            this._pickerRef.updateStartDate(this.value);
        }
    }
    cleared(event) {
        event.stopPropagation();
        event.preventDefault();
        this.writeValue(null);
        this.onChange(this.value);
        this.onTouch(this.value);
    }
    /**
     * Set value which was selected in dialog
     * @param value
     */
    updateValueFromDialog(value) {
        this.updateValue(value);
        super.updateValueFromDialog(value);
    }
    updateValue(value) {
        if (this.view === PickerViewType.Date) {
            value = startOfDay(value);
        }
        this._pickerRef.updateStartDate(value);
        super.updateValue(value);
    }
    _tzChanged(originDate) {
        var _a;
        super._tzChanged(originDate);
        (_a = this._pickerRef) === null || _a === void 0 ? void 0 : _a.updateStartDate(this.value);
    }
    _processInputDate(date) {
        date = super._processInputDate(date);
        if (this.view === PickerViewType.Date && date) {
            date = startOfDay(date);
        }
        return date;
    }
}
RangePickerFromComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RangePickerFromComponent, deps: [{ token: i0.ElementRef }, { token: i0.Injector }, { token: i1.FsDatePickerDialogFactory }, { token: i0.ChangeDetectorRef }, { token: i2.NgControl, optional: true, self: true }, { token: i3.FsRangePickerStoreService }], target: i0.ɵɵFactoryTarget.Directive });
RangePickerFromComponent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: RangePickerFromComponent, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RangePickerFromComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Injector }, { type: i1.FsDatePickerDialogFactory }, { type: i0.ChangeDetectorRef }, { type: i2.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }, { type: i3.FsRangePickerStoreService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZ2UtcGlja2VyLWZyb20uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2FwcC9jb21wb25lbnRzL3JhbmdlLXBpY2tlci9iYXNlL3JhbmdlLXBpY2tlci1mcm9tLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsUUFBUSxFQUdSLFFBQVEsRUFDUixJQUFJLEdBQ0wsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFdEMsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0seURBQXlELENBQUM7QUFDcEcsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFEQUFxRCxDQUFDO0FBRXJGLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDhDQUE4QyxDQUFDOzs7OztBQUl6RixNQUFNLE9BQWdCLHdCQUF5QixTQUFRLG9CQUFvQjtJQUV6RSxZQUNZLE1BQWtCLEVBQ2xCLFNBQW1CLEVBQ25CLGtCQUE2QyxFQUM3QyxNQUF5QixFQUNMLFVBQXFCLEVBQzNDLGlCQUE0QztRQUVwRCxLQUFLLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBUC9ELFdBQU0sR0FBTixNQUFNLENBQVk7UUFDbEIsY0FBUyxHQUFULFNBQVMsQ0FBVTtRQUNuQix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQTJCO1FBQzdDLFdBQU0sR0FBTixNQUFNLENBQW1CO1FBQ0wsZUFBVSxHQUFWLFVBQVUsQ0FBVztRQUMzQyxzQkFBaUIsR0FB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Qzs7c0hBeEZtQix3QkFBd0I7MEdBQXhCLHdCQUF3Qjs0RkFBeEIsd0JBQXdCO2tCQUQ3QyxTQUFTOzswQkFRTCxRQUFROzswQkFBSSxJQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgSW5qZWN0b3IsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBPcHRpb25hbCxcbiAgU2VsZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ0NvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IHN0YXJ0T2ZEYXkgfSBmcm9tICdkYXRlLWZucyc7XG5cbmltcG9ydCB7IEZzRGF0ZVBpY2tlckRpYWxvZ0ZhY3RvcnkgfSBmcm9tICcuLi8uLi8uLi8uLi9saWJzL2RpYWxvZy9zZXJ2aWNlcy9kaWFsb2ctZmFjdG9yeS5zZXJ2aWNlJztcbmltcG9ydCB7IFBpY2tlclZpZXdUeXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vbGlicy9jb21tb24vZW51bXMvcGlja2VyLXZpZXctdHlwZS5lbnVtJztcblxuaW1wb3J0IHsgUmFuZ2VQaWNrZXJDb21wb25lbnQgfSBmcm9tICcuLi9iYXNlL3JhbmdlLXBpY2tlci1iYXNlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBGc1JhbmdlUGlja2VyU3RvcmVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvcmFuZ2UtcGlja2VyLXN0b3JlLnNlcnZpY2UnO1xuXG5cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFJhbmdlUGlja2VyRnJvbUNvbXBvbmVudCBleHRlbmRzIFJhbmdlUGlja2VyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgX2VsUmVmOiBFbGVtZW50UmVmLFxuICAgIHByb3RlY3RlZCBfaW5qZWN0b3I6IEluamVjdG9yLFxuICAgIHByb3RlY3RlZCBfZGF0ZXBpY2tlckZhY3Rvcnk6IEZzRGF0ZVBpY2tlckRpYWxvZ0ZhY3RvcnksXG4gICAgcHJvdGVjdGVkIF9jZFJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgQE9wdGlvbmFsKCkgQFNlbGYoKSBwcm90ZWN0ZWQgX25nQ29udHJvbDogTmdDb250cm9sLFxuICAgIHByaXZhdGUgX3JhbmdlUGlja2VyU3RvcmU6IEZzUmFuZ2VQaWNrZXJTdG9yZVNlcnZpY2UsXG4gICkge1xuICAgIHN1cGVyKF9lbFJlZiwgX2luamVjdG9yLCBfZGF0ZXBpY2tlckZhY3RvcnksICdmcm9tJywgX2NkUmVmLCBfbmdDb250cm9sKTtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnJlZ2lzdGVyUGlja2VyKCk7XG5cbiAgICBzdXBlci5uZ09uSW5pdCgpO1xuICB9XG5cbiAgcHVibGljIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX3JhbmdlUGlja2VyU3RvcmUuZGVzdHJveVN0YXJ0RGF0ZVBpY2tlcih0aGlzLm5hbWUpO1xuXG4gICAgdGhpcy5fZGVzdHJveSQubmV4dCgpO1xuICAgIHRoaXMuX2Rlc3Ryb3kkLmNvbXBsZXRlKCk7XG4gIH1cblxuICBwdWJsaWMgcmVnaXN0ZXJQaWNrZXIoKSB7XG4gICAgdGhpcy5fcGlja2VyUmVmID0gdGhpcy5fcmFuZ2VQaWNrZXJTdG9yZS5yZWdpc3RlclBpY2tlckZyb20odGhpcy5uYW1lLCB0aGlzLnZhbHVlLCB0aGlzLnZpZXcpO1xuICB9XG5cbiAgcHVibGljIHdyaXRlVmFsdWUodmFsdWUpIHtcbiAgICAvLyBIb3QgZml4IHdoaWxlIGFuZ3VsYXIgaGFzIG9uZ29pbmcgaXNzdWVcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8yOTIxOFxuICAgIGlmICghdGhpcy5vbkNoYW5nZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzdXBlci53cml0ZVZhbHVlKHZhbHVlKTtcblxuICAgIGNvbnN0IFt2YWx1ZXNBcmVEYXRlc10gPSB0aGlzLl9jaGVja1ZhbHVlc0VxdWFsaXR5KHRoaXMudmFsdWUsIHRoaXMuX3BpY2tlclJlZi5zdGFydERhdGUpO1xuXG4gICAgaWYgKCh2YWx1ZXNBcmVEYXRlcyAmJiAhdGhpcy5fcGlja2VyUmVmLnNhbWVBc1N0YXJ0RGF0ZSh0aGlzLnZhbHVlKSkgfHwgKCF2YWx1ZXNBcmVEYXRlcykpIHtcbiAgICAgIHRoaXMuX3BpY2tlclJlZi51cGRhdGVTdGFydERhdGUodGhpcy52YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGNsZWFyZWQoZXZlbnQpIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMud3JpdGVWYWx1ZShudWxsKTtcblxuICAgIHRoaXMub25DaGFuZ2UodGhpcy52YWx1ZSk7XG4gICAgdGhpcy5vblRvdWNoKHRoaXMudmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB2YWx1ZSB3aGljaCB3YXMgc2VsZWN0ZWQgaW4gZGlhbG9nXG4gICAqIEBwYXJhbSB2YWx1ZVxuICAgKi9cbiAgcHVibGljIHVwZGF0ZVZhbHVlRnJvbURpYWxvZyh2YWx1ZTogRGF0ZSkge1xuICAgIHRoaXMudXBkYXRlVmFsdWUodmFsdWUpO1xuXG4gICAgc3VwZXIudXBkYXRlVmFsdWVGcm9tRGlhbG9nKHZhbHVlKTtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGVWYWx1ZSh2YWx1ZSk6IHZvaWQge1xuICAgIGlmICh0aGlzLnZpZXcgPT09IFBpY2tlclZpZXdUeXBlLkRhdGUpIHtcbiAgICAgIHZhbHVlID0gc3RhcnRPZkRheSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgdGhpcy5fcGlja2VyUmVmLnVwZGF0ZVN0YXJ0RGF0ZSh2YWx1ZSk7XG5cbiAgICBzdXBlci51cGRhdGVWYWx1ZSh2YWx1ZSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgX3R6Q2hhbmdlZChvcmlnaW5EYXRlOiBEYXRlIHwgbnVsbCk6IHZvaWQge1xuICAgIHN1cGVyLl90ekNoYW5nZWQob3JpZ2luRGF0ZSk7XG5cbiAgICB0aGlzLl9waWNrZXJSZWY/LnVwZGF0ZVN0YXJ0RGF0ZSh0aGlzLnZhbHVlKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBfcHJvY2Vzc0lucHV0RGF0ZShkYXRlOiBEYXRlIHwgbnVsbCk6IERhdGUgfCBudWxsIHtcbiAgICBkYXRlID0gc3VwZXIuX3Byb2Nlc3NJbnB1dERhdGUoZGF0ZSk7XG5cbiAgICBpZiAodGhpcy52aWV3ID09PSBQaWNrZXJWaWV3VHlwZS5EYXRlICYmIGRhdGUpIHtcbiAgICAgIGRhdGUgPSBzdGFydE9mRGF5KGRhdGUpO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRlO1xuICB9XG59XG4iXX0=