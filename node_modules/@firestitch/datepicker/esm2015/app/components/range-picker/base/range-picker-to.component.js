import { ChangeDetectorRef, Directive, ElementRef, Injector, Optional, Self, } from '@angular/core';
import { NgControl, } from '@angular/forms';
import { takeUntil } from 'rxjs/operators';
import { endOfDay } from 'date-fns';
import { FsDatePickerDialogFactory } from '../../../../libs/dialog/services/dialog-factory.service';
import { PickerViewType } from '../../../../libs/common/enums/picker-view-type.enum';
import { RangePickerComponent } from '../base/range-picker-base.component';
import { FsRangePickerStoreService } from '../../../services/range-picker-store.service';
import * as i0 from "@angular/core";
import * as i1 from "../../../../libs/dialog/services/dialog-factory.service";
import * as i2 from "@angular/forms";
import * as i3 from "../../../services/range-picker-store.service";
export class RangePickerToComponent extends RangePickerComponent {
    constructor(_elRef, _injector, _datepickerFactory, _cdRef, _ngControl, _rangePickerStore) {
        super(_elRef, _injector, _datepickerFactory, 'to', _cdRef, _ngControl);
        this._elRef = _elRef;
        this._injector = _injector;
        this._datepickerFactory = _datepickerFactory;
        this._cdRef = _cdRef;
        this._ngControl = _ngControl;
        this._rangePickerStore = _rangePickerStore;
        /** The form control validator for whether the input parses. */
        this._parseValidator = () => {
            return this._pickerRef.isRangeValid
                ? null
                : { fsDatepickerRange: 'Invalid Range' };
        };
    }
    ngOnInit() {
        this.registerPicker();
        this._subscribeToPickerRefUpdates();
        super.ngOnInit();
    }
    ngOnDestroy() {
        this._rangePickerStore.destroyEndDatePicker(this.name);
        this._destroy$.next();
        this._destroy$.complete();
    }
    registerPicker() {
        this._pickerRef = this._rangePickerStore.registerPickerTo(this.name, this.value, this.view);
    }
    writeValue(value) {
        // Hot fix while angular has ongoing issue
        // https://github.com/angular/angular/issues/29218
        if (!this.onChange) {
            return;
        }
        super.writeValue(value);
        const [valuesAreDates] = this._checkValuesEquality(this.value, this._pickerRef.endDate);
        if ((valuesAreDates && !this._pickerRef.sameAsEndDate(this.value)) || !valuesAreDates) {
            this._pickerRef.updateEndDate(this.value);
        }
    }
    cleared(event) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        this.writeValue(null);
        this.onChange(this.value);
        this.onTouch(this.value);
    }
    /**
     * Set value which was selected in dialog
     * @param value
     */
    updateValueFromDialog(value) {
        this.updateValue(value);
        super.updateValueFromDialog(this._pickerRef.endDate);
    }
    updateValue(value) {
        if (this.view === PickerViewType.Date) {
            value = endOfDay(value);
        }
        this._pickerRef.updateEndDate(value);
        super.updateValue(value);
    }
    _tzChanged(originDate) {
        var _a;
        super._tzChanged(originDate);
        (_a = this._pickerRef) === null || _a === void 0 ? void 0 : _a.updateEndDate(this.value);
    }
    _processInputDate(date) {
        date = super._processInputDate(date);
        if (this.view === PickerViewType.Date && date) {
            date = endOfDay(date);
        }
        return date;
    }
    _subscribeToPickerRefUpdates() {
        this._pickerRefUpdates$(this._pickerRef.startDate$)
            .pipe(takeUntil(this._destroy$))
            .subscribe((value) => {
            if (!this._pickerRef.isRangeValid) {
                this.cleared();
            }
            if (this.value) {
                this._ngControl.control.markAsDirty();
                this._ngControl.control.updateValueAndValidity();
            }
            this._cdRef.markForCheck();
        });
    }
}
RangePickerToComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RangePickerToComponent, deps: [{ token: i0.ElementRef }, { token: i0.Injector }, { token: i1.FsDatePickerDialogFactory }, { token: i0.ChangeDetectorRef }, { token: i2.NgControl, optional: true, self: true }, { token: i3.FsRangePickerStoreService }], target: i0.ɵɵFactoryTarget.Directive });
RangePickerToComponent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: RangePickerToComponent, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RangePickerToComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Injector }, { type: i1.FsDatePickerDialogFactory }, { type: i0.ChangeDetectorRef }, { type: i2.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }, { type: i3.FsRangePickerStoreService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZ2UtcGlja2VyLXRvLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hcHAvY29tcG9uZW50cy9yYW5nZS1waWNrZXIvYmFzZS9yYW5nZS1waWNrZXItdG8uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxpQkFBaUIsRUFDakIsU0FBUyxFQUNULFVBQVUsRUFDVixRQUFRLEVBR1IsUUFBUSxFQUNSLElBQUksR0FDTCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsU0FBUyxHQUFrQyxNQUFNLGdCQUFnQixDQUFDO0FBRTNFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzQyxPQUFPLEVBQUUsUUFBUSxFQUFjLE1BQU0sVUFBVSxDQUFDO0FBRWhELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLHlEQUF5RCxDQUFDO0FBQ3BHLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxREFBcUQsQ0FBQztBQUVyRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUMzRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQzs7Ozs7QUFJekYsTUFBTSxPQUFnQixzQkFBdUIsU0FBUSxvQkFBb0I7SUFFdkUsWUFDWSxNQUFrQixFQUNsQixTQUFtQixFQUNuQixrQkFBNkMsRUFDN0MsTUFBeUIsRUFDTCxVQUFxQixFQUMzQyxpQkFBNEM7UUFFcEQsS0FBSyxDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUUsa0JBQWtCLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQztRQVA3RCxXQUFNLEdBQU4sTUFBTSxDQUFZO1FBQ2xCLGNBQVMsR0FBVCxTQUFTLENBQVU7UUFDbkIsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUEyQjtRQUM3QyxXQUFNLEdBQU4sTUFBTSxDQUFtQjtR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QUFDLFVBQVUsMENBQUUsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBU1MsaUJBQWlCLENBQUMsSUFBaUI7UUFDM0MsSUFBSSxHQUFHLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVyQyxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssY0FBYyxDQUFDLElBQUksSUFBSSxJQUFJLEVBQUU7WUFDN0MsSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN2QjtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVTLDRCQUE0QjtRQUNwQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUM7YUFDaEQsSUFBSSxDQUNILFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQzFCO2FBQ0EsU0FBUyxDQUFDLENBQUMsS0FBa0IsRUFBRSxFQUFFO1lBQ2hDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRTtnQkFDakMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO2FBQ2hCO1lBRUQsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUNkLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDO2dCQUN0QyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO2FBQ2xEO1lBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUM3QixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7O29IQXZIbUIsc0JBQXNCO3dHQUF0QixzQkFBc0I7NEZBQXRCLHNCQUFzQjtrQkFEM0MsU0FBUzs7MEJBUUwsUUFBUTs7MEJBQUksSUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIEluamVjdG9yLFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgT3B0aW9uYWwsXG4gIFNlbGYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdDb250cm9sLCBWYWxpZGF0aW9uRXJyb3JzLCBWYWxpZGF0b3JGbiwgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgZW5kT2ZEYXksIHN0YXJ0T2ZEYXkgfSBmcm9tICdkYXRlLWZucyc7XG5cbmltcG9ydCB7IEZzRGF0ZVBpY2tlckRpYWxvZ0ZhY3RvcnkgfSBmcm9tICcuLi8uLi8uLi8uLi9saWJzL2RpYWxvZy9zZXJ2aWNlcy9kaWFsb2ctZmFjdG9yeS5zZXJ2aWNlJztcbmltcG9ydCB7IFBpY2tlclZpZXdUeXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vbGlicy9jb21tb24vZW51bXMvcGlja2VyLXZpZXctdHlwZS5lbnVtJztcblxuaW1wb3J0IHsgUmFuZ2VQaWNrZXJDb21wb25lbnQgfSBmcm9tICcuLi9iYXNlL3JhbmdlLXBpY2tlci1iYXNlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBGc1JhbmdlUGlja2VyU3RvcmVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvcmFuZ2UtcGlja2VyLXN0b3JlLnNlcnZpY2UnO1xuXG5cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFJhbmdlUGlja2VyVG9Db21wb25lbnQgZXh0ZW5kcyBSYW5nZVBpY2tlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcblxuICBwdWJsaWMgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIF9lbFJlZjogRWxlbWVudFJlZixcbiAgICBwcm90ZWN0ZWQgX2luamVjdG9yOiBJbmplY3RvcixcbiAgICBwcm90ZWN0ZWQgX2RhdGVwaWNrZXJGYWN0b3J5OiBGc0RhdGVQaWNrZXJEaWFsb2dGYWN0b3J5LFxuICAgIHByb3RlY3RlZCBfY2RSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuICAgIEBPcHRpb25hbCgpIEBTZWxmKCkgcHJvdGVjdGVkIF9uZ0NvbnRyb2w6IE5nQ29udHJvbCxcbiAgICBwcml2YXRlIF9yYW5nZVBpY2tlclN0b3JlOiBGc1JhbmdlUGlja2VyU3RvcmVTZXJ2aWNlLFxuICApIHtcbiAgICBzdXBlcihfZWxSZWYsIF9pbmplY3RvciwgX2RhdGVwaWNrZXJGYWN0b3J5LCAndG8nLCBfY2RSZWYsIF9uZ0NvbnRyb2wpO1xuICB9XG5cbiAgcHVibGljIG5nT25Jbml0KCkge1xuICAgIHRoaXMucmVnaXN0ZXJQaWNrZXIoKTtcbiAgICB0aGlzLl9zdWJzY3JpYmVUb1BpY2tlclJlZlVwZGF0ZXMoKTtcblxuICAgIHN1cGVyLm5nT25Jbml0KCk7XG4gIH1cblxuICBwdWJsaWMgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fcmFuZ2VQaWNrZXJTdG9yZS5kZXN0cm95RW5kRGF0ZVBpY2tlcih0aGlzLm5hbWUpO1xuXG4gICAgdGhpcy5fZGVzdHJveSQubmV4dCgpO1xuICAgIHRoaXMuX2Rlc3Ryb3kkLmNvbXBsZXRlKCk7XG4gIH1cblxuICBwdWJsaWMgcmVnaXN0ZXJQaWNrZXIoKSB7XG4gICAgdGhpcy5fcGlja2VyUmVmID0gdGhpcy5fcmFuZ2VQaWNrZXJTdG9yZS5yZWdpc3RlclBpY2tlclRvKHRoaXMubmFtZSwgdGhpcy52YWx1ZSwgdGhpcy52aWV3KTtcbiAgfVxuXG4gIHB1YmxpYyB3cml0ZVZhbHVlKHZhbHVlKSB7XG4gICAgLy8gSG90IGZpeCB3aGlsZSBhbmd1bGFyIGhhcyBvbmdvaW5nIGlzc3VlXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMjkyMThcbiAgICBpZiAoIXRoaXMub25DaGFuZ2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdXBlci53cml0ZVZhbHVlKHZhbHVlKTtcblxuICAgIGNvbnN0IFt2YWx1ZXNBcmVEYXRlc10gPSB0aGlzLl9jaGVja1ZhbHVlc0VxdWFsaXR5KHRoaXMudmFsdWUsIHRoaXMuX3BpY2tlclJlZi5lbmREYXRlKTtcblxuICAgIGlmICgodmFsdWVzQXJlRGF0ZXMgJiYgIXRoaXMuX3BpY2tlclJlZi5zYW1lQXNFbmREYXRlKHRoaXMudmFsdWUpKSB8fCAhdmFsdWVzQXJlRGF0ZXMpIHtcbiAgICAgIHRoaXMuX3BpY2tlclJlZi51cGRhdGVFbmREYXRlKHRoaXMudmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBjbGVhcmVkKGV2ZW50Pykge1xuICAgIGlmIChldmVudCkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIHRoaXMud3JpdGVWYWx1ZShudWxsKTtcblxuICAgIHRoaXMub25DaGFuZ2UodGhpcy52YWx1ZSk7XG4gICAgdGhpcy5vblRvdWNoKHRoaXMudmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB2YWx1ZSB3aGljaCB3YXMgc2VsZWN0ZWQgaW4gZGlhbG9nXG4gICAqIEBwYXJhbSB2YWx1ZVxuICAgKi9cbiAgcHVibGljIHVwZGF0ZVZhbHVlRnJvbURpYWxvZyh2YWx1ZSkge1xuICAgIHRoaXMudXBkYXRlVmFsdWUodmFsdWUpO1xuXG4gICAgc3VwZXIudXBkYXRlVmFsdWVGcm9tRGlhbG9nKHRoaXMuX3BpY2tlclJlZi5lbmREYXRlKTtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGVWYWx1ZSh2YWx1ZTogRGF0ZSkge1xuICAgIGlmICh0aGlzLnZpZXcgPT09IFBpY2tlclZpZXdUeXBlLkRhdGUpIHtcbiAgICAgIHZhbHVlID0gZW5kT2ZEYXkodmFsdWUpO1xuICAgIH1cblxuICAgIHRoaXMuX3BpY2tlclJlZi51cGRhdGVFbmREYXRlKHZhbHVlIGFzIERhdGUpO1xuXG4gICAgc3VwZXIudXBkYXRlVmFsdWUodmFsdWUpO1xuICB9XG5cbiAgcHJvdGVjdGVkIF90ekNoYW5nZWQob3JpZ2luRGF0ZTogRGF0ZSB8IG51bGwpOiB2b2lkIHtcbiAgICBzdXBlci5fdHpDaGFuZ2VkKG9yaWdpbkRhdGUpO1xuXG4gICAgdGhpcy5fcGlja2VyUmVmPy51cGRhdGVFbmREYXRlKHRoaXMudmFsdWUpO1xuICB9XG5cbiAgLyoqIFRoZSBmb3JtIGNvbnRyb2wgdmFsaWRhdG9yIGZvciB3aGV0aGVyIHRoZSBpbnB1dCBwYXJzZXMuICovXG4gIHByb3RlY3RlZCBfcGFyc2VWYWxpZGF0b3I6IFZhbGlkYXRvckZuID0gKCk6IFZhbGlkYXRpb25FcnJvcnMgfCBudWxsID0+IHtcbiAgICByZXR1cm4gdGhpcy5fcGlja2VyUmVmLmlzUmFuZ2VWYWxpZFxuICAgICAgPyBudWxsXG4gICAgICA6IHsgZnNEYXRlcGlja2VyUmFuZ2U6ICdJbnZhbGlkIFJhbmdlJyB9O1xuICB9XG5cbiAgcHJvdGVjdGVkIF9wcm9jZXNzSW5wdXREYXRlKGRhdGU6IERhdGUgfCBudWxsKTogRGF0ZSB8IG51bGwge1xuICAgIGRhdGUgPSBzdXBlci5fcHJvY2Vzc0lucHV0RGF0ZShkYXRlKTtcblxuICAgIGlmICh0aGlzLnZpZXcgPT09IFBpY2tlclZpZXdUeXBlLkRhdGUgJiYgZGF0ZSkge1xuICAgICAgZGF0ZSA9IGVuZE9mRGF5KGRhdGUpO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRlO1xuICB9XG5cbiAgcHJvdGVjdGVkIF9zdWJzY3JpYmVUb1BpY2tlclJlZlVwZGF0ZXMoKSB7XG4gICAgdGhpcy5fcGlja2VyUmVmVXBkYXRlcyQodGhpcy5fcGlja2VyUmVmLnN0YXJ0RGF0ZSQpXG4gICAgICAucGlwZShcbiAgICAgICAgdGFrZVVudGlsKHRoaXMuX2Rlc3Ryb3kkKSxcbiAgICAgIClcbiAgICAgIC5zdWJzY3JpYmUoKHZhbHVlOiBEYXRlIHwgbnVsbCkgPT4ge1xuICAgICAgICBpZiAoIXRoaXMuX3BpY2tlclJlZi5pc1JhbmdlVmFsaWQpIHtcbiAgICAgICAgICB0aGlzLmNsZWFyZWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnZhbHVlKSB7XG4gICAgICAgICAgdGhpcy5fbmdDb250cm9sLmNvbnRyb2wubWFya0FzRGlydHkoKTtcbiAgICAgICAgICB0aGlzLl9uZ0NvbnRyb2wuY29udHJvbC51cGRhdGVWYWx1ZUFuZFZhbGlkaXR5KCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9jZFJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICAgIH0pO1xuICB9XG5cbn1cbiJdfQ==