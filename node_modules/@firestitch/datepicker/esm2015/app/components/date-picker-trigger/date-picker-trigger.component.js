import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Optional, Output } from '@angular/core';
import { MatFormField } from '@angular/material/form-field';
import { PickerViewType } from '../../../libs/common/enums/picker-view-type.enum';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/form-field";
import * as i2 from "@angular/material/icon";
import * as i3 from "@angular/common";
export class FsDatePickerTriggerComponent {
    constructor(matFormField, el) {
        this.matFormField = matFormField;
        this.el = el;
        this.click = new EventEmitter();
    }
    get isTimeView() {
        return this.view === PickerViewType.Time;
    }
    ngAfterViewInit() {
        var _a;
        const matElementRef = this.matFormField._elementRef.nativeElement;
        const infixEl = matElementRef.querySelector('.mat-form-field-infix');
        (_a = matElementRef
            .querySelector('.mat-form-field-flex')) === null || _a === void 0 ? void 0 : _a.insertBefore(this.el.nativeElement.firstChild, infixEl);
    }
    triggerClick(event) {
        event.preventDefault();
        event.stopPropagation();
        this.click.emit();
    }
}
FsDatePickerTriggerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDatePickerTriggerComponent, deps: [{ token: i1.MatFormField, optional: true }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
FsDatePickerTriggerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDatePickerTriggerComponent, selector: "fs-datepicker-trigger", inputs: { disabled: "disabled", view: "view" }, outputs: { click: "click" }, ngImport: i0, template: "<div class=\"mat-form-field-preffix fs-date-picker-trigger\" [ngClass]=\"{ disabled: disabled }\">\n  <mat-icon (click)=\"triggerClick($event)\">\n    <ng-container *ngIf=\"isTimeView; else calendarIcon\">\n      schedule\n    </ng-container>\n    <ng-template #calendarIcon>\n      calendar_today\n    </ng-template>\n  </mat-icon>\n</div>\n", styles: [".fs-date-picker-trigger{margin-right:5px;margin-bottom:2px;align-self:flex-end;-webkit-user-select:none;user-select:none}.fs-date-picker-trigger mat-icon{cursor:pointer}.disabled{color:#00000061;pointer-events:none}\n"], components: [{ type: i2.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }], directives: [{ type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDatePickerTriggerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'fs-datepicker-trigger',
                    templateUrl: 'date-picker-trigger.component.html',
                    styleUrls: ['date-picker-trigger.component.scss'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.MatFormField, decorators: [{
                    type: Optional
                }] }, { type: i0.ElementRef }]; }, propDecorators: { disabled: [{
                type: Input
            }], view: [{
                type: Input
            }], click: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1waWNrZXItdHJpZ2dlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYXBwL2NvbXBvbmVudHMvZGF0ZS1waWNrZXItdHJpZ2dlci9kYXRlLXBpY2tlci10cmlnZ2VyLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3NyYy9hcHAvY29tcG9uZW50cy9kYXRlLXBpY2tlci10cmlnZ2VyL2RhdGUtcGlja2VyLXRyaWdnZXIuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixLQUFLLEVBQUUsUUFBUSxFQUNmLE1BQU0sRUFDUCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFNUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtEQUFrRCxDQUFDOzs7OztBQVNsRixNQUFNLE9BQU8sNEJBQTRCO0lBV3ZDLFlBQ3FCLFlBQTBCLEVBQ3JDLEVBQWM7UUFESCxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUNyQyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBSmpCLFVBQUssR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO0lBS3JDLENBQUM7SUFFSixJQUFXLFVBQVU7UUFDbkIsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLGNBQWMsQ0FBQyxJQUFJLENBQUM7SUFDM0MsQ0FBQztJQUVNLGVBQWU7O1FBQ3BCLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQztRQUNsRSxNQUFNLE9BQU8sR0FBRyxhQUFhLENBQUMsYUFBYSxDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFFckUsTUFBQSxhQUFhO2FBQ1YsYUFBYSxDQUFDLHNCQUFzQixDQUFDLDBDQUNwQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFFTSxZQUFZLENBQUMsS0FBYztRQUNoQyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdkIsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDcEIsQ0FBQzs7MEhBakNVLDRCQUE0Qjs4R0FBNUIsNEJBQTRCLDBJQ3JCekMsd1ZBVUE7NEZEV2EsNEJBQTRCO2tCQU54QyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSx1QkFBdUI7b0JBQ2pDLFdBQVcsRUFBRSxvQ0FBb0M7b0JBQ2pELFNBQVMsRUFBRSxDQUFFLG9DQUFvQyxDQUFFO29CQUNuRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDaEQ7OzBCQWFJLFFBQVE7cUVBVEosUUFBUTtzQkFEZCxLQUFLO2dCQUlDLElBQUk7c0JBRFYsS0FBSztnQkFJQyxLQUFLO3NCQURYLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LCBPcHRpb25hbCxcbiAgT3V0cHV0XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBNYXRGb3JtRmllbGQgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9mb3JtLWZpZWxkJztcblxuaW1wb3J0IHsgUGlja2VyVmlld1R5cGUgfSBmcm9tICcuLi8uLi8uLi9saWJzL2NvbW1vbi9lbnVtcy9waWNrZXItdmlldy10eXBlLmVudW0nO1xuXG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2ZzLWRhdGVwaWNrZXItdHJpZ2dlcicsXG4gIHRlbXBsYXRlVXJsOiAnZGF0ZS1waWNrZXItdHJpZ2dlci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWyAnZGF0ZS1waWNrZXItdHJpZ2dlci5jb21wb25lbnQuc2NzcycgXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIEZzRGF0ZVBpY2tlclRyaWdnZXJDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcblxuICBASW5wdXQoKVxuICBwdWJsaWMgZGlzYWJsZWQ6IGJvb2xlYW47XG5cbiAgQElucHV0KClcbiAgcHVibGljIHZpZXc6IFBpY2tlclZpZXdUeXBlO1xuXG4gIEBPdXRwdXQoKVxuICBwdWJsaWMgY2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQE9wdGlvbmFsKCkgcHVibGljIG1hdEZvcm1GaWVsZDogTWF0Rm9ybUZpZWxkLFxuICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsXG4gICkge31cblxuICBwdWJsaWMgZ2V0IGlzVGltZVZpZXcoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMudmlldyA9PT0gUGlja2VyVmlld1R5cGUuVGltZTtcbiAgfVxuXG4gIHB1YmxpYyBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgY29uc3QgbWF0RWxlbWVudFJlZiA9IHRoaXMubWF0Rm9ybUZpZWxkLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG4gICAgY29uc3QgaW5maXhFbCA9IG1hdEVsZW1lbnRSZWYucXVlcnlTZWxlY3RvcignLm1hdC1mb3JtLWZpZWxkLWluZml4Jyk7XG5cbiAgICBtYXRFbGVtZW50UmVmXG4gICAgICAucXVlcnlTZWxlY3RvcignLm1hdC1mb3JtLWZpZWxkLWZsZXgnKVxuICAgICAgPy5pbnNlcnRCZWZvcmUodGhpcy5lbC5uYXRpdmVFbGVtZW50LmZpcnN0Q2hpbGQsIGluZml4RWwpO1xuICB9XG5cbiAgcHVibGljIHRyaWdnZXJDbGljayhldmVudDogVUlFdmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdGhpcy5jbGljay5lbWl0KCk7XG4gIH1cblxufVxuIiwiPGRpdiBjbGFzcz1cIm1hdC1mb3JtLWZpZWxkLXByZWZmaXggZnMtZGF0ZS1waWNrZXItdHJpZ2dlclwiIFtuZ0NsYXNzXT1cInsgZGlzYWJsZWQ6IGRpc2FibGVkIH1cIj5cbiAgPG1hdC1pY29uIChjbGljayk9XCJ0cmlnZ2VyQ2xpY2soJGV2ZW50KVwiPlxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJpc1RpbWVWaWV3OyBlbHNlIGNhbGVuZGFySWNvblwiPlxuICAgICAgc2NoZWR1bGVcbiAgICA8L25nLWNvbnRhaW5lcj5cbiAgICA8bmctdGVtcGxhdGUgI2NhbGVuZGFySWNvbj5cbiAgICAgIGNhbGVuZGFyX3RvZGF5XG4gICAgPC9uZy10ZW1wbGF0ZT5cbiAgPC9tYXQtaWNvbj5cbjwvZGl2PlxuIl19