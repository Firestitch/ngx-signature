export function getYearsCycle(monthLabelHeight, weekHeight, startCycleYear) {
    // Create array of 28 years.
    // Calendar repeats every 28 years
    return Array.from({ length: 28 }, (_, i) => {
        // Create array of 12 months for every year
        return Array.from({ length: 12 }, (__, month) => {
            // Calculate total height of calendar for every month
            return monthLabelHeight + weekCount(i, month, startCycleYear) * weekHeight;
        });
    });
}
/**
 * Calculate total height of calendars from 0 year to lastYear
 */
export function reduceCycle(yearsCycle, lastYear = 28, lastMonth = 12) {
    return yearsCycle.reduce((total, year, yearIndex) => {
        if (yearIndex <= lastYear) {
            const heightOfMonthsInYear = year.reduce((sum, month, monthIndex) => {
                if (yearIndex < lastYear || (yearIndex === lastYear && monthIndex < lastMonth)) {
                    sum += month;
                }
                return sum;
            }, 0);
            total += heightOfMonthsInYear;
        }
        return total;
    }, 0);
}
/**
 * Returns number of weeks for given month
 */
function weekCount(yearCycleIndex, month, startCycleYear) {
    const firstOfMonth = new Date(yearCycleIndex + startCycleYear, month, 1);
    const lastOfMonth = new Date(yearCycleIndex + startCycleYear, month + 1, 0);
    const days = firstOfMonth.getDay() + lastOfMonth.getDate();
    return Math.ceil(days / 7);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWJzL2RpYWxvZy9tb2R1bGVzL21vYmlsZS1kaWFsb2ctY29udGFpbmVyL2NvbXBvbmVudHMvdmlydHVhbC1zY3JvbGwtY2FsZW5kYXIvaGVscGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLFVBQVUsYUFBYSxDQUMzQixnQkFBd0IsRUFDeEIsVUFBa0IsRUFDbEIsY0FBc0I7SUFFdEIsNEJBQTRCO0lBQzVCLGtDQUFrQztJQUNsQyxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQ2YsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQ2QsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDUCwyQ0FBMkM7UUFDM0MsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUNmLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxFQUNkLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ1oscURBQXFEO1lBQ3JELE9BQU8sZ0JBQWdCLEdBQUcsU0FBUyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsY0FBYyxDQUFDLEdBQUcsVUFBVSxDQUFBO1FBQzVFLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUNGLENBQUM7QUFDSixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsV0FBVyxDQUN6QixVQUFnRCxFQUNoRCxRQUFRLEdBQUcsRUFBRSxFQUNiLFNBQVMsR0FBRyxFQUFFO0lBRWQsT0FBTyxVQUFVLENBQUMsTUFBTSxDQUN0QixDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEVBQUU7UUFDekIsSUFBSSxTQUFTLElBQUksUUFBUSxFQUFFO1lBQ3pCLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLEVBQUU7Z0JBQ2xFLElBQUksU0FBUyxHQUFHLFFBQVEsSUFBSSxDQUFDLFNBQVMsS0FBSyxRQUFRLElBQUksVUFBVSxHQUFHLFNBQVMsQ0FBQyxFQUFFO29CQUM5RSxHQUFHLElBQUksS0FBSyxDQUFDO2lCQUNkO2dCQUVELE9BQU8sR0FBRyxDQUFDO1lBQ2IsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBRU4sS0FBSyxJQUFJLG9CQUFvQixDQUFDO1NBQy9CO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDVixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxTQUFTLFNBQVMsQ0FBQyxjQUFzQixFQUFFLEtBQWEsRUFBRSxjQUFzQjtJQUM5RSxNQUFNLFlBQVksR0FBRyxJQUFJLElBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN6RSxNQUFNLFdBQVcsR0FBRyxJQUFJLElBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxFQUFFLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDNUUsTUFBTSxJQUFJLEdBQUcsWUFBWSxDQUFDLE1BQU0sRUFBRSxHQUFHLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUUzRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzdCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZ2V0WWVhcnNDeWNsZShcbiAgbW9udGhMYWJlbEhlaWdodDogbnVtYmVyLFxuICB3ZWVrSGVpZ2h0OiBudW1iZXIsXG4gIHN0YXJ0Q3ljbGVZZWFyOiBudW1iZXIsXG4pOiBSZWFkb25seUFycmF5PFJlYWRvbmx5QXJyYXk8bnVtYmVyPj4ge1xuICAvLyBDcmVhdGUgYXJyYXkgb2YgMjggeWVhcnMuXG4gIC8vIENhbGVuZGFyIHJlcGVhdHMgZXZlcnkgMjggeWVhcnNcbiAgcmV0dXJuIEFycmF5LmZyb20oXG4gICAgeyBsZW5ndGg6IDI4IH0sXG4gICAgKF8sIGkpID0+IHtcbiAgICAgIC8vIENyZWF0ZSBhcnJheSBvZiAxMiBtb250aHMgZm9yIGV2ZXJ5IHllYXJcbiAgICAgIHJldHVybiBBcnJheS5mcm9tKFxuICAgICAgICB7IGxlbmd0aDogMTIgfSxcbiAgICAgICAgKF9fLCBtb250aCkgPT4ge1xuICAgICAgICAgIC8vIENhbGN1bGF0ZSB0b3RhbCBoZWlnaHQgb2YgY2FsZW5kYXIgZm9yIGV2ZXJ5IG1vbnRoXG4gICAgICAgICAgcmV0dXJuIG1vbnRoTGFiZWxIZWlnaHQgKyB3ZWVrQ291bnQoaSwgbW9udGgsIHN0YXJ0Q3ljbGVZZWFyKSAqIHdlZWtIZWlnaHRcbiAgICAgICAgfSk7XG4gICAgfVxuICApO1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZSB0b3RhbCBoZWlnaHQgb2YgY2FsZW5kYXJzIGZyb20gMCB5ZWFyIHRvIGxhc3RZZWFyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWR1Y2VDeWNsZShcbiAgeWVhcnNDeWNsZTogUmVhZG9ubHlBcnJheTxSZWFkb25seUFycmF5PG51bWJlcj4+LFxuICBsYXN0WWVhciA9IDI4LFxuICBsYXN0TW9udGggPSAxMixcbik6IG51bWJlciB7XG4gIHJldHVybiB5ZWFyc0N5Y2xlLnJlZHVjZShcbiAgICAodG90YWwsIHllYXIsIHllYXJJbmRleCkgPT4ge1xuICAgICAgaWYgKHllYXJJbmRleCA8PSBsYXN0WWVhcikge1xuICAgICAgICBjb25zdCBoZWlnaHRPZk1vbnRoc0luWWVhciA9IHllYXIucmVkdWNlKChzdW0sIG1vbnRoLCBtb250aEluZGV4KSA9PiB7XG4gICAgICAgICAgaWYgKHllYXJJbmRleCA8IGxhc3RZZWFyIHx8ICh5ZWFySW5kZXggPT09IGxhc3RZZWFyICYmIG1vbnRoSW5kZXggPCBsYXN0TW9udGgpKSB7XG4gICAgICAgICAgICBzdW0gKz0gbW9udGg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHN1bTtcbiAgICAgICAgfSwgMCk7XG5cbiAgICAgICAgdG90YWwgKz0gaGVpZ2h0T2ZNb250aHNJblllYXI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0b3RhbDtcbiAgICB9LCAwKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIG51bWJlciBvZiB3ZWVrcyBmb3IgZ2l2ZW4gbW9udGhcbiAqL1xuZnVuY3Rpb24gd2Vla0NvdW50KHllYXJDeWNsZUluZGV4OiBudW1iZXIsIG1vbnRoOiBudW1iZXIsIHN0YXJ0Q3ljbGVZZWFyOiBudW1iZXIpOiBudW1iZXIge1xuICBjb25zdCBmaXJzdE9mTW9udGggPSBuZXcgRGF0ZSh5ZWFyQ3ljbGVJbmRleCArIHN0YXJ0Q3ljbGVZZWFyLCBtb250aCwgMSk7XG4gIGNvbnN0IGxhc3RPZk1vbnRoID0gbmV3IERhdGUoeWVhckN5Y2xlSW5kZXggKyBzdGFydEN5Y2xlWWVhciwgbW9udGggKyAxLCAwKTtcbiAgY29uc3QgZGF5cyA9IGZpcnN0T2ZNb250aC5nZXREYXkoKSArIGxhc3RPZk1vbnRoLmdldERhdGUoKTtcblxuICByZXR1cm4gTWF0aC5jZWlsKGRheXMgLyA3KTtcbn1cbiJdfQ==