import { ChangeDetectionStrategy, Component, ElementRef, Inject, Input, ViewChild, } from '@angular/core';
import { MatBottomSheetRef } from '@angular/material/bottom-sheet';
import { CdkVirtualScrollViewport, VIRTUAL_SCROLL_STRATEGY, } from '@angular/cdk/scrolling';
import { fromEvent, race, timer, Subject } from 'rxjs';
import { debounceTime, delay, filter, shareReplay, switchMap, take, takeUntil } from 'rxjs/operators';
import { isBefore } from 'date-fns';
import { FsCalendarDataSource } from './calendar-data-source';
import { FsDatePickerDialogModel } from '../../../../../dialog/classes/dialog-model';
import { CalendarScrollStrategy } from './calendar-scroll-strategy';
import { MatTabGroup } from '@angular/material/tabs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/bottom-sheet";
import * as i2 from "../header/header.component";
import * as i3 from "../header-month-range/header-month-range.component";
import * as i4 from "@angular/cdk/scrolling";
import * as i5 from "../../../../../calendar/components/calendar/calendar.component";
import * as i6 from "@angular/common";
import * as i7 from "@firestitch/date";
export class FsDatePickerVirtualScrollCalendarComponent {
    constructor(_el, _bottomSheetRef, _scrollStrategy) {
        this._el = _el;
        this._bottomSheetRef = _bottomSheetRef;
        this._scrollStrategy = _scrollStrategy;
        this.autoClose = true;
        this.dataSource = new FsCalendarDataSource();
        this._destroy$ = new Subject();
    }
    get dialogRef() {
        return this._dialogRef;
    }
    get rangePickerRef() {
        return this.datePickerModel.rangePickerRef;
    }
    ngOnInit() {
        this._scrollStrategy.setInitialDate(this.datePickerModel.model || new Date());
        this._scrollToClosestMonth();
        if (this.parentTabGroup) {
            this._listenTabIndexChange();
        }
    }
    ngOnChanges(changes) {
        var _a, _b;
        if (((_a = changes.datePickerModel) === null || _a === void 0 ? void 0 : _a.currentValue)
            && ((_b = changes.datePickerModel) === null || _b === void 0 ? void 0 : _b.firstChange)
            && this.datePickerModel.view === 'monthrange') {
            this._initMonthRangeModels();
        }
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
    dateChanged(date) {
        if (this.datePickerModel.view !== 'monthrange') {
            this.datePickerModel.model = date;
            this.close();
        }
        else {
            this.monthRangeChange(date);
        }
    }
    monthRangeChange(date) {
        const rangeRef = this.rangePickerRef;
        const { startDate, endDate } = rangeRef;
        if (!startDate && !endDate) {
            rangeRef.updateStartDate(date);
        }
        else if (startDate && !endDate) {
            if (isBefore(date, startDate)) {
                rangeRef.updateStartDate(date);
                rangeRef.updateEndDate(null);
            }
            else {
                rangeRef.updateEndDate(date);
            }
        }
        else if (startDate && endDate) {
            rangeRef.updateStartDate(date);
            rangeRef.updateEndDate(null);
        }
    }
    close() {
        if (this.autoClose) {
            this._bottomSheetRef.dismiss();
        }
    }
    scollIndexChange(activeIndex) {
        this._activeScrollIndex = activeIndex;
    }
    _scrollToClosestMonth() {
        const touchstart$ = fromEvent(this.virtualScroll.elementRef.nativeElement, 'touchstart');
        const touchend$ = fromEvent(this.virtualScroll.elementRef.nativeElement, 'touchend');
        const scrollDebounceTime = 80;
        touchstart$
            .pipe(switchMap(() => touchend$), switchMap(() => race(this.virtualScroll.elementScrolled(), timer(scrollDebounceTime)).pipe(debounceTime(scrollDebounceTime * 2), take(1), takeUntil(touchstart$))), takeUntil(this._destroy$))
            .subscribe(() => {
            this.virtualScroll.scrollToIndex(this._activeScrollIndex, 'smooth');
        });
    }
    _initMonthRangeModels() {
        this.modelFrom$ = this.datePickerModel
            .rangePickerRef
            .startDate$
            .pipe(shareReplay());
        this.modelTo$ = this.datePickerModel
            .rangePickerRef
            .endDate$
            .pipe(shareReplay());
    }
    _listenTabIndexChange() {
        this.parentTabGroup.selectedIndexChange
            .pipe(filter((index) => index === this.parentTabIndex), delay(0), takeUntil(this._destroy$))
            .subscribe(() => {
            this._scrollStrategy.scrollToDate(this.datePickerModel.model || new Date());
        });
    }
}
FsDatePickerVirtualScrollCalendarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDatePickerVirtualScrollCalendarComponent, deps: [{ token: i0.ElementRef }, { token: i1.MatBottomSheetRef }, { token: VIRTUAL_SCROLL_STRATEGY }], target: i0.ɵɵFactoryTarget.Component });
FsDatePickerVirtualScrollCalendarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDatePickerVirtualScrollCalendarComponent, selector: "fs-datepicker-mobile-scroll-calendar", inputs: { datePickerModel: "datePickerModel", autoClose: "autoClose", parentTabGroup: "parentTabGroup", parentTabIndex: "parentTabIndex" }, providers: [
        {
            provide: VIRTUAL_SCROLL_STRATEGY,
            useClass: CalendarScrollStrategy,
        },
    ], viewQueries: [{ propertyName: "virtualScroll", first: true, predicate: CdkVirtualScrollViewport, descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: "<div class=\"header\">\n  <ng-container *ngIf=\"datePickerModel.view !== 'monthrange' else monthRangeHeader\">\n    <fs-date-picker-mobile-header\n      [calendarDate]=\"datePickerModel.model$ | async\"\n      [minYear]=\"datePickerModel.minYear\"\n      [maxYear]=\"datePickerModel.maxYear\"\n      [viewMode]=\"datePickerModel.calendarMode$ | async\"\n      [disabledDays]=\"datePickerModel.disabledDays$ | async\">\n    </fs-date-picker-mobile-header>\n  </ng-container>\n\n  <ng-template #monthRangeHeader>\n    <fs-date-picker-mobile-header-month-range\n      [rangeFrom]=\"modelFrom$ | async\"\n      [rangeTo]=\"modelTo$ | async\">\n    </fs-date-picker-mobile-header-month-range>\n  </ng-template>\n</div>\n\n<cdk-virtual-scroll-viewport class=\"view-port\" (scrolledIndexChange)=\"scollIndexChange($event)\">\n  <div *cdkVirtualFor=\"let item of dataSource\">\n    <div class=\"month-header\">\n      {{ item | fsDateFormat: 'full-date-dayless' }}\n    </div>\n    <fs-date-picker-calendar\n      [date]=\"datePickerModel.model$ | async\"\n      [drawMonth]=\"item\"\n      [rangeFrom]=\"modelFrom$ | async\"\n      [rangeTo]=\"modelTo$ | async\"\n      [highlightStartDate]=\"modelFrom$ | async\"\n      [highlightEndDate]=\"modelTo$ | async\"\n      [dateMode]=\"datePickerModel.calendarMode$ | async\"\n      [disabledDays]=\"datePickerModel.disabledDays$ | async\"\n      [hideExtraDays]=\"true\"\n      [period]=\"datePickerModel.period\"\n      [seedDate]=\"datePickerModel.seedDate\"\n      [periodWeeks]=\"datePickerModel.periodWeeks\"\n      (change)=\"dateChanged($event)\">\n    </fs-date-picker-calendar>\n  </div>\n</cdk-virtual-scroll-viewport>\n", styles: [".view-port{height:380px;overflow-y:auto}.month-header{text-align:center;line-height:50px;font-size:110%;font-weight:500}cdk-virtual-scroll-viewport::-webkit-scrollbar{width:0}\n"], components: [{ type: i2.FsDatePickerMobileHeaderComponent, selector: "fs-date-picker-mobile-header", inputs: ["viewMode", "minYear", "maxYear", "disabledDays", "calendarDate"], outputs: ["monthChange", "yearChange", "goNextMonth", "goPrevMonth", "viewModeChange"] }, { type: i3.FsDatePickerMobileHeaderMonthRangeComponent, selector: "fs-date-picker-mobile-header-month-range", inputs: ["rangeFrom", "rangeTo"] }, { type: i4.CdkVirtualScrollViewport, selector: "cdk-virtual-scroll-viewport", inputs: ["orientation", "appendOnly"], outputs: ["scrolledIndexChange"] }, { type: i5.FsDatePickerCalendarComponent, selector: "fs-date-picker-calendar", inputs: ["date", "period", "rangeFrom", "rangeTo", "highlightStartDate", "highlightEndDate", "dateMode", "disabledDays", "drawMonth", "seedDate", "periodWeeks", "hideExtraDays"], outputs: ["change", "rangeChange", "periodChange", "hoverDay"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.CdkVirtualForOf, selector: "[cdkVirtualFor][cdkVirtualForOf]", inputs: ["cdkVirtualForOf", "cdkVirtualForTrackBy", "cdkVirtualForTemplate", "cdkVirtualForTemplateCacheSize"] }], pipes: { "async": i6.AsyncPipe, "fsDateFormat": i7.FsDateFormatPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDatePickerVirtualScrollCalendarComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'fs-datepicker-mobile-scroll-calendar',
                    templateUrl: './virtual-scroll-calendar.component.html',
                    styleUrls: ['./virtual-scroll-calendar.component.scss'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: VIRTUAL_SCROLL_STRATEGY,
                            useClass: CalendarScrollStrategy,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.MatBottomSheetRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [VIRTUAL_SCROLL_STRATEGY]
                }] }]; }, propDecorators: { datePickerModel: [{
                type: Input
            }], autoClose: [{
                type: Input
            }], parentTabGroup: [{
                type: Input
            }], parentTabIndex: [{
                type: Input
            }], virtualScroll: [{
                type: ViewChild,
                args: [CdkVirtualScrollViewport, { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,