import { DataSource } from '@angular/cdk/collections';
import { BehaviorSubject, Subscription } from 'rxjs';
import { YEARS_TO_BE_RENDERED, START_CYCLE_YEAR } from './calendar-scroll-strategy';
export class FsCalendarDataSource extends DataSource {
    constructor() {
        super();
        this._cachedMonths = [];
        this._fetchedPages = new Set();
        this._dataStream = new BehaviorSubject(this._cachedMonths);
        this._subscription = new Subscription();
        this._prepareMonthsList();
        this._dataStream.next(this._cachedMonths);
    }
    connect(collectionViewer) {
        const sub = collectionViewer
            .viewChange
            .subscribe((range) => {
            for (let i = range.start; i <= range.end; i++) {
                this._fetchPage(i);
            }
        });
        this._subscription.add(sub);
        return this._dataStream;
    }
    disconnect() {
        this._subscription.unsubscribe();
    }
    _fetchPage(page) {
        if (this._fetchedPages.has(page)) {
            return;
        }
        this._fetchedPages.add(page);
        const yearOffset = Math.floor(page / 12);
        const monthOffset = page % 12;
        const month = new Date(yearOffset + START_CYCLE_YEAR, monthOffset, 1);
        this._cachedMonths.splice(page, 1, month);
        this._dataStream.next(this._cachedMonths);
    }
    _prepareMonthsList() {
        this._cachedMonths = Array
            .from({ length: YEARS_TO_BE_RENDERED * 12 }, // number of rendered years multiply by number of months in year
        (_, i) => {
            return new Date(Math.floor(i / 12) + START_CYCLE_YEAR, i % 12, 1);
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItZGF0YS1zb3VyY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGlicy9kaWFsb2cvbW9kdWxlcy9tb2JpbGUtZGlhbG9nLWNvbnRhaW5lci9jb21wb25lbnRzL3ZpcnR1YWwtc2Nyb2xsLWNhbGVuZGFyL2NhbGVuZGFyLWRhdGEtc291cmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBb0IsVUFBVSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFeEUsT0FBTyxFQUFFLGVBQWUsRUFBYyxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFakUsT0FBTyxFQUNMLG9CQUFvQixFQUNwQixnQkFBZ0IsRUFDakIsTUFBTSw0QkFBNEIsQ0FBQztBQUdwQyxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsVUFBZ0I7SUFReEQ7UUFDRSxLQUFLLEVBQUUsQ0FBQztRQVBGLGtCQUFhLEdBQVcsRUFBRSxDQUFDO1FBQzNCLGtCQUFhLEdBQUcsSUFBSSxHQUFHLEVBQVUsQ0FBQztRQUV6QixnQkFBVyxHQUFHLElBQUksZUFBZSxDQUFTLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUM5RCxrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFLbEQsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDMUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFTSxPQUFPLENBQUMsZ0JBQWtDO1FBQy9DLE1BQU0sR0FBRyxHQUFHLGdCQUFnQjthQUN6QixVQUFVO2FBQ1YsU0FBUyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDbkIsS0FBSyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUM3QyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3BCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFTCxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUU1QixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDMUIsQ0FBQztJQUVELFVBQVU7UUFDUixJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ25DLENBQUM7SUFFTyxVQUFVLENBQUMsSUFBWTtRQUM3QixJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2hDLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTdCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sV0FBVyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7UUFFOUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQ3BCLFVBQVUsR0FBRyxnQkFBZ0IsRUFDN0IsV0FBVyxFQUNYLENBQUMsQ0FDRixDQUFDO1FBRUYsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQ3ZCLElBQUksRUFDSixDQUFDLEVBQ0QsS0FBSyxDQUNOLENBQUM7UUFFRixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVPLGtCQUFrQjtRQUN4QixJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUs7YUFDdkIsSUFBSSxDQUNILEVBQUMsTUFBTSxFQUFFLG9CQUFvQixHQUFHLEVBQUUsRUFBRSxFQUFFLGdFQUFnRTtRQUN0RyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNQLE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNwRSxDQUFDLENBQ0YsQ0FBQztJQUVOLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbGxlY3Rpb25WaWV3ZXIsIERhdGFTb3VyY2UgfSBmcm9tICdAYW5ndWxhci9jZGsvY29sbGVjdGlvbnMnO1xuXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQge1xuICBZRUFSU19UT19CRV9SRU5ERVJFRCxcbiAgU1RBUlRfQ1lDTEVfWUVBUlxufSBmcm9tICcuL2NhbGVuZGFyLXNjcm9sbC1zdHJhdGVneSc7XG5cblxuZXhwb3J0IGNsYXNzIEZzQ2FsZW5kYXJEYXRhU291cmNlIGV4dGVuZHMgRGF0YVNvdXJjZTxEYXRlPiB7XG5cbiAgcHJpdmF0ZSBfY2FjaGVkTW9udGhzOiBEYXRlW10gPSBbXTtcbiAgcHJpdmF0ZSBfZmV0Y2hlZFBhZ2VzID0gbmV3IFNldDxudW1iZXI+KCk7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBfZGF0YVN0cmVhbSA9IG5ldyBCZWhhdmlvclN1YmplY3Q8RGF0ZVtdPih0aGlzLl9jYWNoZWRNb250aHMpO1xuICBwcml2YXRlIHJlYWRvbmx5IF9zdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuX3ByZXBhcmVNb250aHNMaXN0KCk7XG4gICAgdGhpcy5fZGF0YVN0cmVhbS5uZXh0KHRoaXMuX2NhY2hlZE1vbnRocyk7XG4gIH1cblxuICBwdWJsaWMgY29ubmVjdChjb2xsZWN0aW9uVmlld2VyOiBDb2xsZWN0aW9uVmlld2VyKTogT2JzZXJ2YWJsZTxEYXRlW10+IHtcbiAgICBjb25zdCBzdWIgPSBjb2xsZWN0aW9uVmlld2VyXG4gICAgICAudmlld0NoYW5nZVxuICAgICAgLnN1YnNjcmliZSgocmFuZ2UpID0+IHtcbiAgICAgICAgZm9yIChsZXQgaSA9IHJhbmdlLnN0YXJ0OyBpIDw9IHJhbmdlLmVuZDsgaSsrKSB7XG4gICAgICAgICAgdGhpcy5fZmV0Y2hQYWdlKGkpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgIHRoaXMuX3N1YnNjcmlwdGlvbi5hZGQoc3ViKTtcblxuICAgIHJldHVybiB0aGlzLl9kYXRhU3RyZWFtO1xuICB9XG5cbiAgZGlzY29ubmVjdCgpOiB2b2lkIHtcbiAgICB0aGlzLl9zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIHByaXZhdGUgX2ZldGNoUGFnZShwYWdlOiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy5fZmV0Y2hlZFBhZ2VzLmhhcyhwYWdlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2ZldGNoZWRQYWdlcy5hZGQocGFnZSk7XG5cbiAgICBjb25zdCB5ZWFyT2Zmc2V0ID0gTWF0aC5mbG9vcihwYWdlIC8gMTIpO1xuICAgIGNvbnN0IG1vbnRoT2Zmc2V0ID0gcGFnZSAlIDEyO1xuXG4gICAgY29uc3QgbW9udGggPSBuZXcgRGF0ZShcbiAgICAgIHllYXJPZmZzZXQgKyBTVEFSVF9DWUNMRV9ZRUFSLFxuICAgICAgbW9udGhPZmZzZXQsXG4gICAgICAxXG4gICAgKTtcblxuICAgIHRoaXMuX2NhY2hlZE1vbnRocy5zcGxpY2UoXG4gICAgICBwYWdlLFxuICAgICAgMSxcbiAgICAgIG1vbnRoLFxuICAgICk7XG5cbiAgICB0aGlzLl9kYXRhU3RyZWFtLm5leHQodGhpcy5fY2FjaGVkTW9udGhzKTtcbiAgfVxuXG4gIHByaXZhdGUgX3ByZXBhcmVNb250aHNMaXN0KCk6IHZvaWQge1xuICAgIHRoaXMuX2NhY2hlZE1vbnRocyA9IEFycmF5XG4gICAgICAuZnJvbShcbiAgICAgICAge2xlbmd0aDogWUVBUlNfVE9fQkVfUkVOREVSRUQgKiAxMiB9LCAvLyBudW1iZXIgb2YgcmVuZGVyZWQgeWVhcnMgbXVsdGlwbHkgYnkgbnVtYmVyIG9mIG1vbnRocyBpbiB5ZWFyXG4gICAgICAgIChfLCBpKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKE1hdGguZmxvb3IoaSAvIDEyKSArIFNUQVJUX0NZQ0xFX1lFQVIsIGkgJSAxMiwgMSk7XG4gICAgICAgIH1cbiAgICAgICk7XG5cbiAgfVxufVxuIl19