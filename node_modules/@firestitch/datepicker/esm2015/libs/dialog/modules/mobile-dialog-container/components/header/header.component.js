import { ChangeDetectionStrategy, Component, Input, Output, EventEmitter, ElementRef, } from '@angular/core';
import { endOfYear, startOfYear } from 'date-fns';
import { isRangeDisabled } from '../../../../../common/helpers/is-range-disabled';
import { MONTHS } from '../../../../../calendar/consts/months';
import { isMonthDisabled } from '../../../../../common/helpers/is-month-disabled';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class FsDatePickerMobileHeaderComponent {
    constructor(_elRef) {
        this._elRef = _elRef;
        this.monthChange = new EventEmitter();
        this.yearChange = new EventEmitter();
        this.goNextMonth = new EventEmitter();
        this.goPrevMonth = new EventEmitter();
        this.viewModeChange = new EventEmitter();
        this.now = new Date();
        this.monthNow = this.now.getMonth();
        this.yearNow = this.now.getFullYear();
        this.yearsList = [];
        this.monthList = [];
    }
    get calendarMonth() {
        var _a;
        return (_a = this.calendarDate) === null || _a === void 0 ? void 0 : _a.getMonth();
    }
    get calendarYear() {
        var _a;
        return (_a = this.calendarDate) === null || _a === void 0 ? void 0 : _a.getFullYear();
    }
    get calendarDay() {
        var _a;
        return (_a = this.calendarDate) === null || _a === void 0 ? void 0 : _a.getDate();
    }
    ngOnChanges(changes) {
    }
    ngAfterViewInit() {
        this._createMonthsList();
        this._createYearsList();
    }
    selectMonth(month) {
        this.monthChange.emit(month);
        this.setViewMode('date');
    }
    selectYear(year) {
        this.yearChange.emit(year);
        this.setViewMode('date');
    }
    setViewMode(mode) {
        this.viewModeChange.emit(mode);
        if (mode === 'year') {
            this._scrollToSelectedYear();
        }
    }
    nextMonth() {
        this.goNextMonth.emit();
    }
    prevMonth() {
        this.goPrevMonth.emit();
    }
    _createYearsList() {
        this.yearsList = [];
        for (let y = this.minYear; y < this.maxYear; y++) {
            const year = new Date().setFullYear(y);
            this.yearsList.push({ value: y, disabled: this._isYearDisabled(year) });
        }
    }
    _createMonthsList() {
        const year = this.calendarMonth ? this.calendarYear : this.now.getFullYear();
        const checkIfMonthDisabled = (monthNumber, disabledDays) => {
            const month = new Date();
            month.setFullYear(year);
            month.setMonth(monthNumber);
            return isMonthDisabled(month, disabledDays);
        };
        this.monthList = [];
        for (const item of MONTHS) {
            const monthItem = Object.assign(Object.assign({}, item), { disabled: checkIfMonthDisabled(item.value, this.disabledDays) });
            this.monthList.push(monthItem);
        }
    }
    _isYearDisabled(date) {
        const startYear = startOfYear(date);
        const endYear = endOfYear(date);
        return isRangeDisabled(this.disabledDays, startYear, endYear);
    }
    _scrollToSelectedYear() {
        setTimeout(() => {
            const years = this._elRef.nativeElement.querySelector('.years');
            const selected = years.querySelector('.year.selected');
            if (selected) {
                years.scrollTop = selected.offsetTop;
            }
        }, 50);
    }
}
FsDatePickerMobileHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDatePickerMobileHeaderComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
FsDatePickerMobileHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDatePickerMobileHeaderComponent, selector: "fs-date-picker-mobile-header", inputs: { viewMode: "viewMode", minYear: "minYear", maxYear: "maxYear", disabledDays: "disabledDays", calendarDate: "calendarDate" }, outputs: { monthChange: "monthChange", yearChange: "yearChange", goNextMonth: "goNextMonth", goPrevMonth: "goPrevMonth", viewModeChange: "viewModeChange" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"months\" *ngIf=\"viewMode == 'month'\">\n  <div\n    *ngFor=\"let month of monthList\"\n    (click)=\"selectMonth(month.value)\"\n    class=\"month\"\n    [ngClass]=\"{\n        now: monthNow == month.value,\n        selected: calendarMonth === month.value,\n        disabled: month.disabled\n      }\">\n    <div class=\"tile-content\">{{ month.abr }}</div>\n  </div>\n</div>\n\n<div class=\"years\" *ngIf=\"viewMode == 'year'\">\n  <ng-container *ngFor=\"let year of yearsList;\">\n    <div\n      class=\"year data-year-{{ year.value }}\"\n      (click)=\"selectYear(year.value)\"\n      [class.now]=\"yearNow == year.value\"\n      [class.selected]=\"calendarYear === year.value\"\n      [class.disabled]=\"year.disabled\">\n      <div class=\"tile-content\">{{ year.value }}</div>\n    </div>\n  </ng-container>\n  <div class=\"clear\"></div>\n</div>\n", styles: [".months{width:350px}.month-year{height:auto;padding:0 15px;justify-content:center}\n"], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDatePickerMobileHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'fs-date-picker-mobile-header',
                    templateUrl: './header.component.html',
                    styleUrls: [
                        './header.component.scss',
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { viewMode: [{
                type: Input
            }], minYear: [{
                type: Input
            }], maxYear: [{
                type: Input
            }], disabledDays: [{
                type: Input
            }], calendarDate: [{
                type: Input
            }], monthChange: [{
                type: Output
            }], yearChange: [{
                type: Output
            }], goNextMonth: [{
                type: Output
            }], goPrevMonth: [{
                type: Output
            }], viewModeChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,