import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, Output, Renderer2, } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { getDaysInMonth, isValid } from 'date-fns';
import { MONTHS } from '../../consts/months';
import * as i0 from "@angular/core";
import * as i1 from "@firestitch/scroll-picker";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
export class FsDateScrollPickerDialogComponent {
    constructor(element, _cdRef, _renderer, _document) {
        this.element = element;
        this._cdRef = _cdRef;
        this._renderer = _renderer;
        this._document = _document;
        this.changed = new EventEmitter();
        this.years = [];
        this.months = [];
        this.maxDay = 0;
    }
    ngOnInit() {
        const modelValue = this.model;
        this._generateYearsArray();
        this._generateMonthArray();
        this._generateDaysArray();
        if (modelValue && isValid(modelValue)) {
            this._setDate(modelValue);
        }
        else {
            const date = new Date();
            if (!this.showDay) {
                date.setDate(1);
            }
            if (!this.showMonth) {
                date.setMonth(1);
            }
            if (!this.showYear) {
                date.setFullYear(0);
            }
            this._setDate(date);
        }
        this._pullToRefreshDisable();
    }
    ngOnDestroy() {
        this._pullToRefreshDefault();
    }
    _setDate(date) {
        if (date) {
            this.day = date.getDate();
            this.year = date.getFullYear();
            this.month = date.getMonth();
        }
    }
    _getMonth(month) {
        return this.months.find(item => {
            return month === item.value;
        });
    }
    change() {
        if (!this.year) {
            this.year = this.showYear ? this.years[0] : 0;
        }
        if (!this.month) {
            this.month = this.months[0].value;
        }
        if (!this.day) {
            this.day = 1;
        }
        const daysInMonth = getDaysInMonth(new Date(this.year, this.month));
        if (this.day > daysInMonth) {
            this.day = daysInMonth;
        }
        const date = new Date(this.year, this.month, this.day);
        this.changed.emit(date);
        this._cdRef.markForCheck();
    }
    changeMonth() {
        this._generateDaysArray();
        this.change();
    }
    changeYear() {
        this._generateDaysArray();
        if (this.maxDate) {
            this._generateMonthArray();
        }
        this.change();
    }
    _generateDaysArray() {
        this.maxDay = 0;
        const maxDate = this.maxDate;
        const maxDay = maxDate && maxDate.getDate();
        const maxMonth = maxDate && maxDate.getMonth();
        const maxYear = maxDate && maxDate.getFullYear();
        if (this.month) {
            if (maxDay && maxMonth == this.month.value && maxYear === this.year) {
                this.maxDay = maxDay;
            }
            else {
                const daysInMonth = getDaysInMonth(new Date(this.year, this.month));
                this.maxDay = daysInMonth;
            }
        }
        if (!this.maxDay) {
            this.maxDay = 31;
        }
    }
    _generateMonthArray() {
        this.months = MONTHS;
    }
    _generateYearsArray() {
        let minYear = this.minYear;
        let maxYear = this.maxYear;
        if (!maxYear) {
            const today = new Date();
            maxYear = today.getFullYear();
        }
        for (minYear; minYear <= maxYear; minYear++) {
            this.years.push({ name: minYear, value: minYear });
        }
    }
    _pullToRefreshDisable() {
        this._renderer.addClass(this._document.body, 'fs-date-picker-prevent-pull-to-refresh');
    }
    _pullToRefreshDefault() {
        this._renderer.removeClass(this._document.body, 'fs-date-picker-prevent-pull-to-refresh');
    }
}
FsDateScrollPickerDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDateScrollPickerDialogComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.Renderer2 }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });
FsDateScrollPickerDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDateScrollPickerDialogComponent, selector: "fs-date-scroll-picker", inputs: { model: "model", showMonth: "showMonth", showDay: "showDay", showYear: "showYear", minYear: "minYear", maxYear: "maxYear", maxDate: "maxDate" }, outputs: { changed: "changed" }, ngImport: i0, template: "<div class=\"scroll-pickers\">\n  <fs-scroll-picker\n    *ngIf=\"showMonth\"\n    class=\"month\"\n    [values]=\"months\"\n    name=\"month\"\n    [(ngModel)]=\"month\"\n    (ngModelChange)=\"changeMonth()\">\n  </fs-scroll-picker>\n\n  <fs-scroll-picker\n      *ngIf=\"showDay\"\n      class=\"day\"\n      [valuesMin]=\"1\"\n      [valuesMax]=\"maxDay\"\n      name=\"day\"\n      [(ngModel)]=\"day\"\n      (ngModelChange)=\"change()\">\n  </fs-scroll-picker>\n\n  <fs-scroll-picker\n      *ngIf=\"showYear\"\n      class=\"year\"\n      [values]=\"years\"\n      name=\"year\"\n      [(ngModel)]=\"year\"\n      (ngModelChange)=\"changeYear()\">\n  </fs-scroll-picker>\n</div>", styles: [".scroll-pickers{display:flex;flex-direction:row;justify-content:center;background:#fff}.scroll-pickers fs-scroll-picker.day{width:80px}.scroll-pickers fs-scroll-picker.month{width:150px}.scroll-pickers fs-scroll-picker.year{width:100px}\n"], components: [{ type: i1.ScrollPickerComponent, selector: "fs-scroll-picker", inputs: ["values", "valuesMin", "valuesMax", "width"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDateScrollPickerDialogComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'fs-date-scroll-picker',
                    templateUrl: './date-scroll-picker.component.html',
                    styleUrls: ['./date-scroll-picker.component.scss'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.Renderer2 }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { model: [{
                type: Input
            }], showMonth: [{
                type: Input
            }], showDay: [{
                type: Input
            }], showYear: [{
                type: Input
            }], minYear: [{
                type: Input
            }], maxYear: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], changed: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,