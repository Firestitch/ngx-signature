import { ChangeDetectionStrategy, Component, Input, Output, EventEmitter, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/icon";
import * as i2 from "@firestitch/date";
export class FsDatePickerHeaderMonthRangeComponent {
    constructor() {
        this.goNextMonth = new EventEmitter();
        this.goPrevMonth = new EventEmitter();
    }
    get calendarMonth() {
        var _a;
        return (_a = this.calendarDate) === null || _a === void 0 ? void 0 : _a.getMonth();
    }
    get calendarYear() {
        var _a;
        return (_a = this.calendarDate) === null || _a === void 0 ? void 0 : _a.getFullYear();
    }
    get calendarDay() {
        var _a;
        return (_a = this.calendarDate) === null || _a === void 0 ? void 0 : _a.getDate();
    }
    nextMonth() {
        this.goNextMonth.emit();
    }
    prevMonth() {
        this.goPrevMonth.emit();
    }
}
FsDatePickerHeaderMonthRangeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDatePickerHeaderMonthRangeComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
FsDatePickerHeaderMonthRangeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDatePickerHeaderMonthRangeComponent, selector: "fs-date-picker-header-month-range", inputs: { calendarDate: "calendarDate", nextCalendarDate: "nextCalendarDate" }, outputs: { goNextMonth: "goNextMonth", goPrevMonth: "goPrevMonth" }, ngImport: i0, template: "<div class=\"current-month-header month-year\">\n  <div class=\"actions\">\n    <a (click)=\"prevMonth()\">\n      <mat-icon>navigate_before</mat-icon>\n    </a>\n  </div>\n  <span class=\"month-name\">\n    {{ calendarDate | fsDateFormat: 'full-date-dayless' }}\n  </span>\n</div>\n\n\n\n<div class=\"next-month-header month-year\">\n  <span class=\"month-name\">\n    {{ nextCalendarDate | fsDateFormat: 'full-date-dayless' }}\n  </span>\n  <div class=\"actions\">\n    <a (click)=\"nextMonth()\">\n      <mat-icon>navigate_next</mat-icon>\n    </a>\n  </div>\n</div>\n", styles: [":host{display:grid;grid-template-columns:1fr 1fr;grid-column-gap:40px}.month-year{padding:0;position:relative;justify-content:center}.current-month-header .actions{left:5px;position:absolute}.next-month-header .actions{right:5px;position:absolute}\n"], components: [{ type: i1.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }], pipes: { "fsDateFormat": i2.FsDateFormatPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDatePickerHeaderMonthRangeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'fs-date-picker-header-month-range',
                    templateUrl: './header-month-range.component.html',
                    styleUrls: [
                        './header-month-range.component.scss',
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { calendarDate: [{
                type: Input
            }], nextCalendarDate: [{
                type: Input
            }], goNextMonth: [{
                type: Output
            }], goPrevMonth: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhZGVyLW1vbnRoLXJhbmdlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWJzL2RpYWxvZy9tb2R1bGVzL2Rlc2t0b3AtZGlhbG9nLWNvbnRhaW5lci9jb21wb25lbnRzL2hlYWRlci1tb250aC1yYW5nZS9oZWFkZXItbW9udGgtcmFuZ2UuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYnMvZGlhbG9nL21vZHVsZXMvZGVza3RvcC1kaWFsb2ctY29udGFpbmVyL2NvbXBvbmVudHMvaGVhZGVyLW1vbnRoLXJhbmdlL2hlYWRlci1tb250aC1yYW5nZS5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksR0FDYixNQUFNLGVBQWUsQ0FBQzs7OztBQVd2QixNQUFNLE9BQU8scUNBQXFDO0lBUmxEO1FBaUJTLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUd2QyxnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7S0FxQi9DO0lBbkJDLElBQVcsYUFBYTs7UUFDdEIsT0FBTyxNQUFBLElBQUksQ0FBQyxZQUFZLDBDQUFFLFFBQVEsRUFBRSxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxJQUFXLFlBQVk7O1FBQ3JCLE9BQU8sTUFBQSxJQUFJLENBQUMsWUFBWSwwQ0FBRSxXQUFXLEVBQUUsQ0FBQztJQUMxQyxDQUFDO0lBRUQsSUFBVyxXQUFXOztRQUNwQixPQUFPLE1BQUEsSUFBSSxDQUFDLFlBQVksMENBQUUsT0FBTyxFQUFFLENBQUM7SUFDdEMsQ0FBQztJQUVNLFNBQVM7UUFDZCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFTSxTQUFTO1FBQ2QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMxQixDQUFDOzttSUFoQ1UscUNBQXFDO3VIQUFyQyxxQ0FBcUMsOE5DakJsRCw2akJBdUJBOzRGRE5hLHFDQUFxQztrQkFSakQsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsbUNBQW1DO29CQUM3QyxXQUFXLEVBQUUscUNBQXFDO29CQUNsRCxTQUFTLEVBQUU7d0JBQ1QscUNBQXFDO3FCQUN0QztvQkFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDaEQ7OEJBSVEsWUFBWTtzQkFEbEIsS0FBSztnQkFJQyxnQkFBZ0I7c0JBRHRCLEtBQUs7Z0JBSUMsV0FBVztzQkFEakIsTUFBTTtnQkFJQSxXQUFXO3NCQURqQixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgSW5wdXQsXG4gIE91dHB1dCxcbiAgRXZlbnRFbWl0dGVyLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmcy1kYXRlLXBpY2tlci1oZWFkZXItbW9udGgtcmFuZ2UnLFxuICB0ZW1wbGF0ZVVybDogJy4vaGVhZGVyLW1vbnRoLXJhbmdlLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbXG4gICAgJy4vaGVhZGVyLW1vbnRoLXJhbmdlLmNvbXBvbmVudC5zY3NzJyxcbiAgXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIEZzRGF0ZVBpY2tlckhlYWRlck1vbnRoUmFuZ2VDb21wb25lbnQge1xuXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBjYWxlbmRhckRhdGU6IERhdGU7XG5cbiAgQElucHV0KClcbiAgcHVibGljIG5leHRDYWxlbmRhckRhdGU6IERhdGU7XG5cbiAgQE91dHB1dCgpXG4gIHB1YmxpYyBnb05leHRNb250aCA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICBAT3V0cHV0KClcbiAgcHVibGljIGdvUHJldk1vbnRoID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG4gIHB1YmxpYyBnZXQgY2FsZW5kYXJNb250aCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmNhbGVuZGFyRGF0ZT8uZ2V0TW9udGgoKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgY2FsZW5kYXJZZWFyKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuY2FsZW5kYXJEYXRlPy5nZXRGdWxsWWVhcigpO1xuICB9XG5cbiAgcHVibGljIGdldCBjYWxlbmRhckRheSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmNhbGVuZGFyRGF0ZT8uZ2V0RGF0ZSgpO1xuICB9XG5cbiAgcHVibGljIG5leHRNb250aCgpOiB2b2lkIHtcbiAgICB0aGlzLmdvTmV4dE1vbnRoLmVtaXQoKTtcbiAgfVxuXG4gIHB1YmxpYyBwcmV2TW9udGgoKTogdm9pZCB7XG4gICAgdGhpcy5nb1ByZXZNb250aC5lbWl0KCk7XG4gIH1cbn1cbiIsIjxkaXYgY2xhc3M9XCJjdXJyZW50LW1vbnRoLWhlYWRlciBtb250aC15ZWFyXCI+XG4gIDxkaXYgY2xhc3M9XCJhY3Rpb25zXCI+XG4gICAgPGEgKGNsaWNrKT1cInByZXZNb250aCgpXCI+XG4gICAgICA8bWF0LWljb24+bmF2aWdhdGVfYmVmb3JlPC9tYXQtaWNvbj5cbiAgICA8L2E+XG4gIDwvZGl2PlxuICA8c3BhbiBjbGFzcz1cIm1vbnRoLW5hbWVcIj5cbiAgICB7eyBjYWxlbmRhckRhdGUgfCBmc0RhdGVGb3JtYXQ6ICdmdWxsLWRhdGUtZGF5bGVzcycgfX1cbiAgPC9zcGFuPlxuPC9kaXY+XG5cblxuXG48ZGl2IGNsYXNzPVwibmV4dC1tb250aC1oZWFkZXIgbW9udGgteWVhclwiPlxuICA8c3BhbiBjbGFzcz1cIm1vbnRoLW5hbWVcIj5cbiAgICB7eyBuZXh0Q2FsZW5kYXJEYXRlIHwgZnNEYXRlRm9ybWF0OiAnZnVsbC1kYXRlLWRheWxlc3MnIH19XG4gIDwvc3Bhbj5cbiAgPGRpdiBjbGFzcz1cImFjdGlvbnNcIj5cbiAgICA8YSAoY2xpY2spPVwibmV4dE1vbnRoKClcIj5cbiAgICAgIDxtYXQtaWNvbj5uYXZpZ2F0ZV9uZXh0PC9tYXQtaWNvbj5cbiAgICA8L2E+XG4gIDwvZGl2PlxuPC9kaXY+XG4iXX0=