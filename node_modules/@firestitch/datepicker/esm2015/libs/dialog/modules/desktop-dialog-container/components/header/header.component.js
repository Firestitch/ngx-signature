import { ChangeDetectionStrategy, Component, Input, Output, EventEmitter, ElementRef, } from '@angular/core';
import { endOfYear, startOfYear } from 'date-fns';
import { isRangeDisabled } from '../../../../../common/helpers/is-range-disabled';
import { MONTHS } from '../../../../../calendar/consts/months';
import { isMonthDisabled } from '../../../../../common/helpers/is-month-disabled';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/icon";
import * as i2 from "@angular/common";
import * as i3 from "@firestitch/date";
export class FsDatePickerHeaderComponent {
    constructor(_elRef) {
        this._elRef = _elRef;
        this.monthChange = new EventEmitter();
        this.yearChange = new EventEmitter();
        this.goNextMonth = new EventEmitter();
        this.goPrevMonth = new EventEmitter();
        this.viewModeChange = new EventEmitter();
        this.now = new Date();
        this.monthNow = this.now.getMonth();
        this.yearNow = this.now.getFullYear();
        this.yearsList = [];
        this.monthList = [];
    }
    get calendarMonth() {
        var _a;
        return (_a = this.calendarDate) === null || _a === void 0 ? void 0 : _a.getMonth();
    }
    get calendarYear() {
        var _a;
        return (_a = this.calendarDate) === null || _a === void 0 ? void 0 : _a.getFullYear();
    }
    get calendarDay() {
        var _a;
        return (_a = this.calendarDate) === null || _a === void 0 ? void 0 : _a.getDate();
    }
    ngOnChanges(changes) {
    }
    ngAfterViewInit() {
        this._createMonthsList();
        this._createYearsList();
    }
    selectMonth(month) {
        this.monthChange.emit(month);
        this.setViewMode('date');
    }
    selectYear(year) {
        this.yearChange.emit(year);
        this.setViewMode('date');
    }
    setViewMode(mode) {
        this.viewModeChange.emit(mode);
        this._scrollToSelectedYear();
        this._scrollToSelectedMonth();
    }
    nextMonth() {
        this.goNextMonth.emit();
    }
    prevMonth() {
        this.goPrevMonth.emit();
    }
    _createYearsList() {
        this.yearsList = [];
        for (let y = this.minYear; y < this.maxYear; y++) {
            const year = new Date().setFullYear(y);
            this.yearsList.push({ value: y, disabled: this._isYearDisabled(year) });
        }
    }
    _createMonthsList() {
        const year = this.calendarMonth ? this.calendarYear : this.now.getFullYear();
        const checkIfMonthDisabled = (monthNumber, disabledDays) => {
            const month = new Date();
            month.setFullYear(year);
            month.setMonth(monthNumber);
            return isMonthDisabled(month, disabledDays);
        };
        this.monthList = [];
        for (const item of MONTHS) {
            const monthItem = Object.assign(Object.assign({}, item), { disabled: checkIfMonthDisabled(item.value, this.disabledDays) });
            this.monthList.push(monthItem);
        }
    }
    _isYearDisabled(date) {
        const startYear = startOfYear(date);
        const endYear = endOfYear(date);
        return isRangeDisabled(this.disabledDays, startYear, endYear);
    }
    _scrollToSelectedYear() {
        setTimeout(() => {
            const years = this._elRef.nativeElement.querySelector('.years');
            const selected = years.querySelector('.year.selected');
            if (selected) {
                selected.scrollIntoView({ behavior: 'auto', block: 'center' });
            }
        });
    }
    _scrollToSelectedMonth() {
        setTimeout(() => {
            const years = this._elRef.nativeElement.querySelector('.months');
            const selected = years.querySelector('.month.selected');
            if (selected) {
                selected.scrollIntoView({ behavior: 'auto', block: 'center' });
            }
        });
    }
}
FsDatePickerHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDatePickerHeaderComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
FsDatePickerHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDatePickerHeaderComponent, selector: "fs-date-picker-header", inputs: { viewMode: "viewMode", minYear: "minYear", maxYear: "maxYear", disabledDays: "disabledDays", calendarDate: "calendarDate" }, outputs: { monthChange: "monthChange", yearChange: "yearChange", goNextMonth: "goNextMonth", goPrevMonth: "goPrevMonth", viewModeChange: "viewModeChange" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"months-years\" *ngIf=\"viewMode == 'month' || viewMode == 'year'\">\n  <div class=\"months\">\n    <div\n      *ngFor=\"let month of monthList\"\n      (click)=\"selectMonth(month.value)\"\n      class=\"month\"\n      [ngClass]=\"{\n          now: monthNow == month.value,\n          selected: calendarMonth === month.value,\n          disabled: month.disabled\n        }\">\n      <div class=\"tile-content\">{{ month.abr }}</div>\n    </div>\n  </div>\n\n  <div class=\"years\">\n    <ng-container *ngFor=\"let year of yearsList;\">\n      <div\n        class=\"year data-year-{{ year.value }}\"\n        (click)=\"selectYear(year.value)\"\n        [class.now]=\"yearNow == year.value\"\n        [class.selected]=\"calendarYear === year.value\"\n        [class.disabled]=\"year.disabled\">\n        <div class=\"tile-content\">{{ year.value }}</div>\n      </div>\n    </ng-container>\n    <div class=\"clear\"></div>\n  </div>\n</div>\n\n<div *ngIf=\"viewMode == 'week' || viewMode == 'date' || viewMode == 'datetime' || viewMode == 'monthrange'\" class=\"calendar\">\n  <div class=\"month-year\">\n    <a class=\"month-year-name\" (click)=\"setViewMode('month')\">\n      {{ calendarDate | fsDateFormat: 'full-date-dayless-yearless' }}\n\n      <span *ngIf=\"calendarDay\" class=\"day-name\">\n        {{ calendarDay }},\n      </span>\n\n      {{ calendarYear }}\n      <mat-icon class=\"action\">arrow_drop_down</mat-icon>\n    </a>\n\n    <div class=\"gap\"></div>\n\n    <div class=\"action\">\n      <a (click)=\"prevMonth()\" class=\"action\">\n        <mat-icon>navigate_before</mat-icon>\n      </a>\n      <a (click)=\"nextMonth()\" class=\"action\">\n        <mat-icon>navigate_next</mat-icon>\n      </a>\n    </div>\n  </div>\n\n</div>\n", styles: [".months{width:350px}.month-year-name{color:inherit;border-radius:3px;display:flex;align-items:center;padding:5px 5px 5px 10px}.month-year-name:hover{background-color:#eaeaea;border-radius:3px}.day-name{padding:0 4px}.actions a{padding:6px;color:#757575}a.action{color:#757575}.months-years{display:flex;height:100%;min-width:350px}.months-years .years{overflow:auto;width:100%}.months-years .years .year{text-align:center;height:50px;line-height:50px;outline:none;cursor:pointer;box-sizing:border-box}.months-years .months{width:100%;height:100%;overflow:auto}.months-years .months .tile-content{width:50px;height:50px}.months-years .months .month{text-align:center;display:flex;justify-content:center;flex-direction:column;cursor:pointer;outline:none;border-bottom:0;border-right:0;box-sizing:border-box}\n"], components: [{ type: i1.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "fsDateFormat": i3.FsDateFormatPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDatePickerHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'fs-date-picker-header',
                    templateUrl: './header.component.html',
                    styleUrls: [
                        './header.component.scss',
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { viewMode: [{
                type: Input
            }], minYear: [{
                type: Input
            }], maxYear: [{
                type: Input
            }], disabledDays: [{
                type: Input
            }], calendarDate: [{
                type: Input
            }], monthChange: [{
                type: Output
            }], yearChange: [{
                type: Output
            }], goNextMonth: [{
                type: Output
            }], goPrevMonth: [{
                type: Output
            }], viewModeChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,