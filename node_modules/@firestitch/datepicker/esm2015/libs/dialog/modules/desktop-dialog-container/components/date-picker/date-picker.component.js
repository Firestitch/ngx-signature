import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { FsDatePickerDialogModel } from '../../../../../dialog/classes/dialog-model';
import { FsDatePickerDialogRef } from '../../../../classes/dialog-ref';
import * as i0 from "@angular/core";
import * as i1 from "../header/header.component";
import * as i2 from "../../../../../calendar/components/calendar/calendar.component";
import * as i3 from "../../../../../calendar/components/time/time.component";
import * as i4 from "@angular/material/button";
import * as i5 from "@angular/common";
export class FsDesktopDatePickerComponent {
    constructor() {
        this.timePickerExpanded = false;
    }
    viewModeChanged(mode) {
        this.datePickerModel.setCalendarMode(mode);
    }
    monthChanged(month) {
        this.datePickerModel.setCalendarMonth(month);
    }
    yearChanged(year) {
        this.datePickerModel.setCalendarYear(year);
    }
    nextMonth() {
        this.datePickerModel.nextMonth();
    }
    prevMonth() {
        this.datePickerModel.prevMonth();
    }
    dateChanged(date) {
        this.datePickerModel.model = date;
        if (!this.datePickerModel.isDateTimeView && !this.datePickerModel.isTimeView) {
            this.close();
        }
    }
    periodChanged(date) {
        this.datePickerModel.period = date;
        this.close();
    }
    toggleTimeExpand() {
        this.timePickerExpanded = !this.timePickerExpanded;
    }
    setDateMode(mode) {
        this.datePickerModel.dateMode = mode;
    }
    close() {
        this.dialogRef.close();
    }
}
FsDesktopDatePickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDesktopDatePickerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
FsDesktopDatePickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDesktopDatePickerComponent, selector: "fs-datepicker-desktop-datepicker", inputs: { dialogRef: "dialogRef", datePickerModel: "datePickerModel" }, ngImport: i0, template: "<div class=\"calendar-container\">\n  <div class=\"date-time\">\n    <div class=\"calendar-view\">\n      <fs-date-picker-header\n        [calendarDate]=\"datePickerModel.calendarDate$ | async\"\n        [minYear]=\"datePickerModel.minYear\"\n        [maxYear]=\"datePickerModel.maxYear\"\n        [viewMode]=\"datePickerModel.calendarMode$ | async\"\n        [disabledDays]=\"datePickerModel.disabledDays$ | async\"\n        (viewModeChange)=\"viewModeChanged($event)\"\n        (monthChange)=\"monthChanged($event)\"\n        (yearChange)=\"yearChanged($event)\"\n        (goNextMonth)=\"nextMonth()\"\n        (goPrevMonth)=\"prevMonth()\"\n      >\n      </fs-date-picker-header>\n\n      <ng-container *ngIf=\"dialogRef.components.calendarStart\">\n        <fs-date-picker-calendar\n          [date]=\"datePickerModel.model$ | async\"\n          [drawMonth]=\"datePickerModel.calendarDate$ | async\"\n          [dateMode]=\"datePickerModel.calendarMode$ | async\"\n          [disabledDays]=\"datePickerModel.disabledDays$ | async\"\n          [period]=\"datePickerModel.period\"\n          [seedDate]=\"datePickerModel.seedDate\"\n          [periodWeeks]=\"datePickerModel.periodWeeks\"\n          (change)=\"dateChanged($event)\"\n          (periodChange)=\"periodChanged($event)\">\n        </fs-date-picker-calendar>\n      </ng-container>\n    </div>\n\n    <ng-container\n      *ngIf=\"datePickerModel.dateMode !== 'year' && datePickerModel.dateMode !== 'month'\">\n      <fs-date-picker-time\n        *ngIf=\"datePickerModel.view === 'datetime' || datePickerModel.view === 'time'\"\n        [date]=\"datePickerModel.model$ | async\"\n        [minutes]=\"datePickerModel.minutes\"\n        [disabledTimes]=\"datePickerModel.disabledTimes$ | async\"\n        [expanded]=\"timePickerExpanded\"\n        (onChange)=\"dateChanged($event)\"\n      ></fs-date-picker-time>\n    </ng-container>\n  </div>\n\n  <div class=\"buttons\">\n    <button class=\"button-done\" type=\"button\" mat-button color=\"primary\" (click)=\"close()\">Done</button>\n    <button type=\"button\"\n            mat-button\n            class=\"button-more\"\n            *ngIf=\"datePickerModel.minutes\n                   && (datePickerModel.view === 'datetime' || datePickerModel.view === 'time')\n                   && !(datePickerModel.view === 'datetime' && datePickerModel.dateMode === 'date')\"\n            (click)=\"toggleTimeExpand()\">\n      <ng-container *ngIf=\"!timePickerExpanded; else lessMinutes\">\n        More Minutes\n      </ng-container>\n      <ng-template #lessMinutes>\n        Less Minutes\n      </ng-template>\n    </button>\n  </div>\n</div>\n", styles: [".date-time{display:flex}\n"], components: [{ type: i1.FsDatePickerHeaderComponent, selector: "fs-date-picker-header", inputs: ["viewMode", "minYear", "maxYear", "disabledDays", "calendarDate"], outputs: ["monthChange", "yearChange", "goNextMonth", "goPrevMonth", "viewModeChange"] }, { type: i2.FsDatePickerCalendarComponent, selector: "fs-date-picker-calendar", inputs: ["date", "period", "rangeFrom", "rangeTo", "highlightStartDate", "highlightEndDate", "dateMode", "disabledDays", "drawMonth", "seedDate", "periodWeeks", "hideExtraDays"], outputs: ["change", "rangeChange", "periodChange", "hoverDay"] }, { type: i3.FsDatePickerTimeComponent, selector: "fs-date-picker-time", inputs: ["date", "disabledMinutes", "disabledHours", "disabledTimes", "expanded", "minutes", "showNotSelected"], outputs: ["onChange"] }, { type: i4.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i5.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDesktopDatePickerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'fs-datepicker-desktop-datepicker',
                    templateUrl: './date-picker.component.html',
                    styleUrls: ['./date-picker.component.scss'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { dialogRef: [{
                type: Input
            }], datePickerModel: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,