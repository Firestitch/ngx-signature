import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { map, shareReplay, } from 'rxjs/operators';
import { addMonths, isBefore } from 'date-fns';
import { FsDatePickerDialogModel } from '../../../../../dialog/classes/dialog-model';
import { FsDatePickerDialogRef } from '../../../../classes/dialog-ref';
import * as i0 from "@angular/core";
import * as i1 from "../header-month-range/header-month-range.component";
import * as i2 from "../../../../../calendar/components/calendar/calendar.component";
import * as i3 from "../../../../../calendar/components/time/time.component";
import * as i4 from "@angular/material/button";
import * as i5 from "@angular/common";
export class FsMonthRangePickerComponent {
    constructor() { }
    ngOnChanges(changes) {
        var _a, _b;
        if (((_a = changes.datePickerModel) === null || _a === void 0 ? void 0 : _a.currentValue)
            && ((_b = changes.datePickerModel) === null || _b === void 0 ? void 0 : _b.firstChange)
            && this.datePickerModel.view === 'monthrange') {
            this._initMonthRangeModels();
        }
    }
    viewModeChanged(mode) {
        this.datePickerModel.setCalendarMode(mode);
    }
    monthChanged(month) {
        this.datePickerModel.setCalendarMonth(month);
    }
    yearChanged(year) {
        this.datePickerModel.setCalendarYear(year);
    }
    nextMonth() {
        this.datePickerModel.nextMonth();
    }
    prevMonth() {
        this.datePickerModel.prevMonth();
    }
    dateChanged(date) {
        const rangeRef = this.datePickerModel.rangePickerRef;
        const { startDate, endDate } = rangeRef;
        if (!startDate && !endDate) {
            rangeRef.updateStartDate(date);
        }
        else if (startDate && !endDate) {
            if (isBefore(date, startDate)) {
                rangeRef.updateStartDate(date);
                rangeRef.updateEndDate(null);
            }
            else {
                rangeRef.updateEndDate(date);
            }
        }
        else if (startDate && endDate) {
            rangeRef.updateStartDate(date);
            rangeRef.updateEndDate(null);
        }
    }
    periodChanged(date) {
        this.datePickerModel.period = date;
        this.close();
    }
    setDateMode(mode) {
        this.datePickerModel.dateMode = mode;
    }
    close() {
        this.dialogRef.close();
    }
    _initMonthRangeModels() {
        this.leftCalendarDate$ = this.datePickerModel.calendarDate$;
        this.rightCalendarDate$ = this.datePickerModel.calendarDate$
            .pipe(map((value) => value && addMonths(value, 1) || null));
        this.modelFrom$ = this.datePickerModel
            .rangePickerRef
            .startDate$
            .pipe(shareReplay());
        this.modelTo$ = this.datePickerModel
            .rangePickerRef
            .endDate$
            .pipe(shareReplay());
    }
}
FsMonthRangePickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsMonthRangePickerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
FsMonthRangePickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsMonthRangePickerComponent, selector: "fs-datepicker-month-range-picker", inputs: { dialogRef: "dialogRef", datePickerModel: "datePickerModel" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"calendar-container\">\n  <div class=\"date-time\">\n    <div class=\"calendar-view\">\n      <fs-date-picker-header-month-range\n        [calendarDate]=\"leftCalendarDate$ | async\"\n        [nextCalendarDate]=\"rightCalendarDate$ | async\"\n        (goNextMonth)=\"nextMonth()\"\n        (goPrevMonth)=\"prevMonth()\"\n      >\n      </fs-date-picker-header-month-range>\n\n      <div class=\"month-range-container\">\n        <fs-date-picker-calendar\n          [rangeFrom]=\"modelFrom$ | async\"\n          [rangeTo]=\"modelTo$ | async\"\n          [drawMonth]=\"leftCalendarDate$ | async\"\n          [dateMode]=\"datePickerModel.calendarMode$ | async\"\n          [highlightStartDate]=\"modelFrom$ | async\"\n          [highlightEndDate]=\"modelTo$ | async\"\n          [disabledDays]=\"datePickerModel.disabledDays$ | async\"\n          [hideExtraDays]=\"true\"\n          (change)=\"dateChanged($event)\">\n        </fs-date-picker-calendar>\n\n        <fs-date-picker-calendar\n          [rangeFrom]=\"modelFrom$ | async\"\n          [rangeTo]=\"modelTo$ | async\"\n          [highlightStartDate]=\"modelFrom$ | async\"\n          [highlightEndDate]=\"modelTo$ | async\"\n          [drawMonth]=\"rightCalendarDate$ | async\"\n          [dateMode]=\"datePickerModel.calendarMode$ | async\"\n          [disabledDays]=\"datePickerModel.disabledDays$ | async\"\n          [hideExtraDays]=\"true\"\n          (change)=\"dateChanged($event)\">\n        </fs-date-picker-calendar>\n      </div>\n    </div>\n\n    <ng-container\n      *ngIf=\"datePickerModel.dateMode !== 'year' && datePickerModel.dateMode !== 'month'\">\n      <fs-date-picker-time\n        *ngIf=\"datePickerModel.view === 'datetime' || datePickerModel.view === 'time'\"\n        [date]=\"datePickerModel.model$ | async\"\n        [minutes]=\"datePickerModel.minutes\"\n        [disabledTimes]=\"datePickerModel.disabledTimes$ | async\"\n        (onChange)=\"dateChanged($event)\"\n      ></fs-date-picker-time>\n    </ng-container>\n  </div>\n\n  <div class=\"buttons\">\n    <button class=\"button-done\" type=\"button\" mat-button color=\"primary\" (click)=\"close()\">Done</button>\n  </div>\n</div>\n", styles: [".month-range-container{display:grid;grid-template-columns:1fr 1fr;grid-column-gap:40px;align-items:start;min-height:265px}fs-date-picker-calendar{display:flex}\n"], components: [{ type: i1.FsDatePickerHeaderMonthRangeComponent, selector: "fs-date-picker-header-month-range", inputs: ["calendarDate", "nextCalendarDate"], outputs: ["goNextMonth", "goPrevMonth"] }, { type: i2.FsDatePickerCalendarComponent, selector: "fs-date-picker-calendar", inputs: ["date", "period", "rangeFrom", "rangeTo", "highlightStartDate", "highlightEndDate", "dateMode", "disabledDays", "drawMonth", "seedDate", "periodWeeks", "hideExtraDays"], outputs: ["change", "rangeChange", "periodChange", "hoverDay"] }, { type: i3.FsDatePickerTimeComponent, selector: "fs-date-picker-time", inputs: ["date", "disabledMinutes", "disabledHours", "disabledTimes", "expanded", "minutes", "showNotSelected"], outputs: ["onChange"] }, { type: i4.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i5.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsMonthRangePickerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'fs-datepicker-month-range-picker',
                    templateUrl: './month-range-picker.component.html',
                    styleUrls: ['./month-range-picker.component.scss'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { dialogRef: [{
                type: Input
            }], datePickerModel: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,