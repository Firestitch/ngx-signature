import { Injectable, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { BreakpointObserver } from '@angular/cdk/layout';
import { ComponentPortal, PortalInjector } from '@angular/cdk/portal';
import { Overlay, OverlayConfig, } from '@angular/cdk/overlay';
import { MatBottomSheet } from '@angular/material/bottom-sheet';
import { fromEvent } from 'rxjs';
import { debounceTime, takeUntil, take, tap, map, switchMap, skip, distinctUntilChanged, filter, finalize, } from 'rxjs/operators';
import { FsMobileCalendarDialogComponent } from '../../dialog/modules/mobile-dialog-container/components/mobile-dialog/mobile-dialog.component';
import { FsDateScrollPickerDesktopComponent } from '../../dialog/modules/scroll-picker-dialog-container/components/date-scroll-picker-desktop/date-scroll-picker-desktop.component';
import { FsDateScrollPickerMobileDialogComponent } from '../../dialog/modules/scroll-picker-dialog-container/components/date-scroll-picker-mobile-dialog/date-scroll-picker-mobile-dialog.component';
import { FsDesktopCalendarDialogComponent } from '../../dialog/modules/desktop-dialog-container/components/desktop-dialog/desktop-dialog.component';
import { FsDatePickerDialogRef } from '../classes/dialog-ref';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
import * as i2 from "@angular/cdk/layout";
import * as i3 from "@angular/material/bottom-sheet";
const MOBILE_BREAKPOINT = '(max-width: 737px)';
export class FsDatePickerDialogFactory {
    constructor(_overlay, _breakpointObserver, _bottomSheet, _document) {
        this._overlay = _overlay;
        this._breakpointObserver = _breakpointObserver;
        this._bottomSheet = _bottomSheet;
        this._document = _document;
        this._resolutionChanged = false;
    }
    get _ESCKeyPressed$() {
        return fromEvent(this._document, 'keydown')
            .pipe(filter((event) => {
            return event.code === 'Escape';
        }));
    }
    openDatePicker(el, injector, options) {
        this._targetElRef = el;
        const dateDialogRef = new FsDatePickerDialogRef(options);
        this._openDatePicker(injector, 'date', dateDialogRef);
        return dateDialogRef;
    }
    openDateScrollPicker(el, injector, options) {
        this._targetElRef = el;
        const dateDialogRef = new FsDatePickerDialogRef(options);
        this._openDatePicker(injector, 'scroll', dateDialogRef);
        return dateDialogRef;
    }
    _openDatePicker(injector, type, dialogRef) {
        const layoutChanges = this._breakpointObserver
            .observe([
            MOBILE_BREAKPOINT,
        ])
            .pipe(map((result) => {
            return result.breakpoints[MOBILE_BREAKPOINT];
        }));
        layoutChanges
            .pipe(map((mobile) => {
            return this._openDatePickerComponent(mobile, injector, type, dialogRef);
        }), tap((ref) => {
            dialogRef.pickerOverlayRef.setActiveOverlay(ref);
        }), take(1), switchMap(() => {
            return layoutChanges
                .pipe(skip(1));
        }), debounceTime(100), distinctUntilChanged(), tap(() => {
            this._resolutionChanged = true;
        }), tap(() => {
            dialogRef.pickerOverlayRef.close();
        }), map((mobile) => {
            return this._openDatePickerComponent(mobile, injector, type, dialogRef);
        }), tap((ref) => {
            dialogRef.pickerOverlayRef.setActiveOverlay(ref);
        }), tap(() => {
            this._resolutionChanged = false;
        }), finalize(() => {
            dialogRef.close();
        }), takeUntil(dialogRef.pickerOverlayRef.destroy$
            .pipe(filter(() => !this._resolutionChanged))), takeUntil(dialogRef.close$), takeUntil(this._ESCKeyPressed$))
            .subscribe();
    }
    _openDatePickerComponent(mobile, injector, type, dialogRef) {
        if (mobile) {
            if (type === 'date') {
                return this._openDatePickerMobile(dialogRef);
            }
            else {
                return this._openDateScrollPickerMobile(dialogRef);
            }
        }
        else {
            if (type === 'date') {
                return this._openDatePickerDesktop(injector, dialogRef);
            }
            else {
                return this._openDateScrollPickerDesktop(injector, dialogRef);
            }
        }
    }
    _createOverlay(el, config = {}) {
        config = Object.assign(Object.assign({}, config), { positionStrategy: this._createPopupPositionStrategy(el), scrollStrategy: this._overlay.scrollStrategies.reposition(), hasBackdrop: true, backdropClass: [], panelClass: 'fs-datepicker-overlay-pane' });
        const overlayConfig = new OverlayConfig(config);
        return this._overlay.create(overlayConfig);
    }
    _createInjector(parentInjector, previewRef) {
        const injectionTokens = new WeakMap([
            [FsDatePickerDialogRef, previewRef],
        ]);
        return new PortalInjector(parentInjector, injectionTokens);
    }
    _createPopupPositionStrategy(el) {
        return this._createBasePopupPositionStrategy(el)
            .withPositions([
            {
                originX: 'start',
                originY: 'bottom',
                overlayX: 'start',
                overlayY: 'top',
                offsetY: 10,
                offsetX: -29
            },
            {
                originX: 'end',
                originY: 'top',
                overlayX: 'start',
                overlayY: 'bottom',
            },
            {
                originX: 'end',
                originY: 'top',
                overlayX: 'start',
                overlayY: 'center',
            },
            {
                originX: 'end',
                originY: 'bottom',
                overlayX: 'start',
                overlayY: 'bottom',
            },
            {
                originX: 'start',
                originY: 'bottom',
                overlayX: 'end',
                overlayY: 'top',
                offsetX: -29,
            },
            {
                originX: 'start',
                originY: 'bottom',
                overlayX: 'end',
                overlayY: 'center',
                offsetX: -29,
            },
        ]);
    }
    _createBasePopupPositionStrategy(el) {
        return this._overlay.position()
            .flexibleConnectedTo(el)
            .withGrowAfterOpen(false)
            .withFlexibleDimensions(false)
            .withPush(false);
    }
    _openDatePickerDesktop(parentInjector, previewRef) {
        const overlayRef = this._createOverlay(this._targetElRef, {
            positionStrategy: this._createBasePopupPositionStrategy(this._targetElRef),
        });
        const injector = this._createInjector(parentInjector, previewRef);
        const containerPortal = new ComponentPortal(FsDesktopCalendarDialogComponent, undefined, injector);
        overlayRef.attach(containerPortal);
        return overlayRef;
    }
    _openDatePickerMobile(dialogRef) {
        return this._bottomSheet.open(FsMobileCalendarDialogComponent, {
            data: {
                dateDialogRef: dialogRef,
            },
            restoreFocus: false,
        });
    }
    _openDateScrollPickerDesktop(parentInjector, previewRef) {
        const overlayRef = this._createOverlay(this._targetElRef, { scrollStrategy: this._overlay.scrollStrategies.block() });
        const injector = this._createInjector(parentInjector, previewRef);
        const containerPortal = new ComponentPortal(FsDateScrollPickerDesktopComponent, undefined, injector);
        overlayRef.attach(containerPortal);
        return overlayRef;
    }
    _openDateScrollPickerMobile(dialogRef) {
        return this._bottomSheet.open(FsDateScrollPickerMobileDialogComponent, {
            data: {
                dateDialogRef: dialogRef,
            }
        });
    }
}
FsDatePickerDialogFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDatePickerDialogFactory, deps: [{ token: i1.Overlay }, { token: i2.BreakpointObserver }, { token: i3.MatBottomSheet }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });
FsDatePickerDialogFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDatePickerDialogFactory });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDatePickerDialogFactory, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Overlay }, { type: i2.BreakpointObserver }, { type: i3.MatBottomSheet }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,