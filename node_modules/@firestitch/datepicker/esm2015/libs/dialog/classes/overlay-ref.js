import { OverlayRef } from '@angular/cdk/overlay';
import { MatBottomSheetRef } from '@angular/material/bottom-sheet';
import { BehaviorSubject, merge } from 'rxjs';
import { filter, switchMap } from 'rxjs/operators';
export class FsDatePickerOverlayRef {
    constructor() {
        this._activeOverlayRef$ = new BehaviorSubject(null);
    }
    get destroy$() {
        return this._activeOverlayRef$
            .pipe(filter((ref) => !!ref), switchMap((ref) => {
            if (ref instanceof OverlayRef) {
                return merge(ref.detachments(), ref.backdropClick());
            }
            else {
                return merge(ref.afterDismissed(), ref.backdropClick());
            }
        }));
    }
    get activeOverlayRef() {
        return this._activeOverlayRef$.getValue();
    }
    setActiveOverlay(ref) {
        this._activeOverlayRef$.next(ref);
    }
    close() {
        var _a, _b, _c;
        if (this.activeOverlayRef instanceof OverlayRef) {
            (_a = this.activeOverlayRef) === null || _a === void 0 ? void 0 : _a.detach();
            (_b = this.activeOverlayRef) === null || _b === void 0 ? void 0 : _b.dispose();
        }
        if (this.activeOverlayRef instanceof MatBottomSheetRef) {
            (_c = this.activeOverlayRef) === null || _c === void 0 ? void 0 : _c.dismiss();
        }
        this.setActiveOverlay(null);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmxheS1yZWYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGlicy9kaWFsb2cvY2xhc3Nlcy9vdmVybGF5LXJlZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFbEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFbkUsT0FBTyxFQUFFLGVBQWUsRUFBRSxLQUFLLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDOUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUduRCxNQUFNLE9BQU8sc0JBQXNCO0lBQW5DO1FBRVUsdUJBQWtCLEdBQUcsSUFBSSxlQUFlLENBQXdDLElBQUksQ0FBQyxDQUFDO0lBMkNoRyxDQUFDO0lBekNDLElBQVcsUUFBUTtRQUNqQixPQUFPLElBQUksQ0FBQyxrQkFBa0I7YUFDM0IsSUFBSSxDQUNILE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUN0QixTQUFTLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUNoQixJQUFJLEdBQUcsWUFBWSxVQUFVLEVBQUU7Z0JBQzdCLE9BQU8sS0FBSyxDQUNWLEdBQUcsQ0FBQyxXQUFXLEVBQUUsRUFDakIsR0FBRyxDQUFDLGFBQWEsRUFBRSxDQUNwQixDQUFDO2FBQ0g7aUJBQU07Z0JBQ0wsT0FBTyxLQUFLLENBQ1YsR0FBRyxDQUFDLGNBQWMsRUFBRSxFQUNwQixHQUFHLENBQUMsYUFBYSxFQUFFLENBQ3BCLENBQUM7YUFDSDtRQUNILENBQUMsQ0FBQyxDQUNILENBQUM7SUFDTixDQUFDO0lBRUQsSUFBVyxnQkFBZ0I7UUFDekIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDNUMsQ0FBQztJQUVNLGdCQUFnQixDQUFDLEdBQW1DO1FBQ3pELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVNLEtBQUs7O1FBQ1YsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLFlBQVksVUFBVSxFQUFFO1lBQy9DLE1BQUEsSUFBSSxDQUFDLGdCQUFnQiwwQ0FBRSxNQUFNLEVBQUUsQ0FBQztZQUNoQyxNQUFBLElBQUksQ0FBQyxnQkFBZ0IsMENBQUUsT0FBTyxFQUFFLENBQUM7U0FDbEM7UUFFRCxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsWUFBWSxpQkFBaUIsRUFBRTtZQUN0RCxNQUFBLElBQUksQ0FBQyxnQkFBZ0IsMENBQUUsT0FBTyxFQUFFLENBQUM7U0FDbEM7UUFFRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUIsQ0FBQztDQUVGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3ZlcmxheVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcblxuaW1wb3J0IHsgTWF0Qm90dG9tU2hlZXRSZWYgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9ib3R0b20tc2hlZXQnO1xuXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIG1lcmdlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuXG5leHBvcnQgY2xhc3MgRnNEYXRlUGlja2VyT3ZlcmxheVJlZiB7XG5cbiAgcHJpdmF0ZSBfYWN0aXZlT3ZlcmxheVJlZiQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PE92ZXJsYXlSZWYgfCBNYXRCb3R0b21TaGVldFJlZiB8IG51bGw+KG51bGwpO1xuXG4gIHB1YmxpYyBnZXQgZGVzdHJveSQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FjdGl2ZU92ZXJsYXlSZWYkXG4gICAgICAucGlwZShcbiAgICAgICAgZmlsdGVyKChyZWYpID0+ICEhcmVmKSxcbiAgICAgICAgc3dpdGNoTWFwKChyZWYpID0+IHtcbiAgICAgICAgICBpZiAocmVmIGluc3RhbmNlb2YgT3ZlcmxheVJlZikge1xuICAgICAgICAgICAgcmV0dXJuIG1lcmdlKFxuICAgICAgICAgICAgICByZWYuZGV0YWNobWVudHMoKSxcbiAgICAgICAgICAgICAgcmVmLmJhY2tkcm9wQ2xpY2soKSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBtZXJnZShcbiAgICAgICAgICAgICAgcmVmLmFmdGVyRGlzbWlzc2VkKCksXG4gICAgICAgICAgICAgIHJlZi5iYWNrZHJvcENsaWNrKCksXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICApO1xuICB9XG5cbiAgcHVibGljIGdldCBhY3RpdmVPdmVybGF5UmVmKCk6IE92ZXJsYXlSZWYgfCBNYXRCb3R0b21TaGVldFJlZiB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLl9hY3RpdmVPdmVybGF5UmVmJC5nZXRWYWx1ZSgpO1xuICB9XG5cbiAgcHVibGljIHNldEFjdGl2ZU92ZXJsYXkocmVmOiBPdmVybGF5UmVmIHwgTWF0Qm90dG9tU2hlZXRSZWYpOiB2b2lkIHtcbiAgICB0aGlzLl9hY3RpdmVPdmVybGF5UmVmJC5uZXh0KHJlZik7XG4gIH1cblxuICBwdWJsaWMgY2xvc2UoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuYWN0aXZlT3ZlcmxheVJlZiBpbnN0YW5jZW9mIE92ZXJsYXlSZWYpIHtcbiAgICAgIHRoaXMuYWN0aXZlT3ZlcmxheVJlZj8uZGV0YWNoKCk7XG4gICAgICB0aGlzLmFjdGl2ZU92ZXJsYXlSZWY/LmRpc3Bvc2UoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5hY3RpdmVPdmVybGF5UmVmIGluc3RhbmNlb2YgTWF0Qm90dG9tU2hlZXRSZWYpIHtcbiAgICAgIHRoaXMuYWN0aXZlT3ZlcmxheVJlZj8uZGlzbWlzcygpO1xuICAgIH1cblxuICAgIHRoaXMuc2V0QWN0aXZlT3ZlcmxheShudWxsKTtcbiAgfVxuXG59XG4iXX0=