import { isDate, isValid, addMonths, subMonths, setMonth, setYear, startOfDay, isBefore, } from 'date-fns';
import { BehaviorSubject } from 'rxjs';
import { PickerViewType } from '../../common/enums/picker-view-type.enum';
import { getDisabledDays } from '../../dialog/helpers/get-disabled-days';
import { getDisabledTimes } from '../../dialog/helpers/get-disabled-times';
export class FsDatePickerDialogModel {
    constructor(pickerOptions) {
        /**
         * year | month | date
         *
         * Current mode of calendar. For ranges consist values for both: start and end date
         */
        this.dateMode = null;
        this.minDate = null;
        this.maxDate = null;
        this.startOfDay = true;
        this.seedDate = null;
        this.periodWeeks = null;
        this.minutes = true;
        this._minYear = null;
        this._maxYear = null;
        this._model$ = new BehaviorSubject(null);
        this._period$ = new BehaviorSubject(null);
        this._now$ = new BehaviorSubject(new Date());
        this._disabledDays$ = new BehaviorSubject([]);
        this._disabledTimes$ = new BehaviorSubject([]);
        this._calendarDate$ = new BehaviorSubject(this.now);
        this._calendarMode$ = new BehaviorSubject('date');
        this._timeExpanded$ = new BehaviorSubject(false);
        /**
         * date | datetime | time | week
         * View is options selected on init. Can't be changed manually
         */
        this._view$ = new BehaviorSubject('date');
        this._initCalendar(pickerOptions);
        this._updateDisabled();
    }
    get now() {
        return this._now$.value;
    }
    set calendarDate(value) {
        this._calendarDate$.next(value);
    }
    get calendarDate() {
        return this._calendarDate$.value;
    }
    get calendarDate$() {
        return this._calendarDate$;
    }
    get view$() {
        return this._view$.asObservable();
    }
    get view() {
        return this._view$.value;
    }
    set view(view) {
        this._view$.next(view);
    }
    get isDateView() {
        return this.view === PickerViewType.Date;
    }
    get isDateTimeView() {
        return this.view === PickerViewType.DateTime;
    }
    get isTimeView() {
        return this.view === PickerViewType.Time;
    }
    get isWeekView() {
        return this.view === PickerViewType.Week;
    }
    get isMonthRangeView() {
        return this.view === PickerViewType.MonthRange;
    }
    get calendarMode$() {
        return this._calendarMode$;
    }
    get calendarMode() {
        return this._calendarMode$.value;
    }
    set model(value) {
        if (isValid(value)) {
            if (this.isDateView && this.startOfDay) {
                value = startOfDay(value);
            }
            /**
             * For cases when we have datetime view type and have opened "To" date picker.
             * If "From" date is already selected it means that we have some Time range to be disabled.
             * When user select "To" date without time (only clicks on date) we have to pull up time for selected date.
             */
            if (this.isDateTimeView
                && this._pickerOptions.rangeType === 'to'
                && !this.model
                && value) {
                if (isBefore(value, this.rangePickerRef.startDate)) {
                    value = new Date(this.rangePickerRef.startDate);
                }
            }
        }
        else {
            value = null;
        }
        this._model$.next(value);
        this._updateDisabledTimes();
    }
    get model() {
        return this._model$.value;
    }
    get model$() {
        return this._model$;
    }
    set period(value) {
        this._period$.next(value);
    }
    get period() {
        return this._period$.value;
    }
    get period$() {
        return this._period$;
    }
    set disabledDays(value) {
        this._disabledDays$.next(value);
    }
    get disabledDays$() {
        return this._disabledDays$;
    }
    set disabledTimes(value) {
        this._disabledTimes$.next(value);
    }
    get disabledTimes$() {
        return this._disabledTimes$;
    }
    set minYear(minYear) {
        this._minYear = minYear || (new Date().getFullYear() - 100);
    }
    get minYear() {
        return this._minYear;
    }
    set maxYear(maxYear) {
        this._maxYear = maxYear || (new Date().getFullYear() + 100);
    }
    get maxYear() {
        return this._maxYear;
    }
    set _calendarMode(value) {
        this._calendarMode$.next(value);
    }
    get timeExpanded$() {
        return this._timeExpanded$.asObservable();
    }
    get timeExpanded() {
        return this._timeExpanded$.value;
    }
    set timeExpanded(flag) {
        this._timeExpanded$.next(flag);
    }
    get rangePickerRef() {
        return this._pickerOptions.pickerRef;
    }
    setCalendarMonth(month) {
        this.calendarDate = setMonth(this.calendarDate, month);
    }
    setCalendarYear(year) {
        this.calendarDate = setYear(this.calendarDate, year);
        this._updateDisabled();
    }
    nextMonth() {
        this.calendarDate = addMonths(this.calendarDate, 1);
    }
    prevMonth() {
        this.calendarDate = subMonths(this.calendarDate, 1);
    }
    setCalendarMode(mode) {
        this._calendarMode = mode;
    }
    _initCalendar(options) {
        var _a;
        this._pickerOptions = Object.assign({}, options);
        this.view = options.view;
        switch (this.view) {
            case PickerViewType.Week:
                {
                    this.period = options.modelValue;
                    this.calendarDate = ((_a = options.modelValue) === null || _a === void 0 ? void 0 : _a.from) || new Date();
                }
                break;
            case PickerViewType.MonthRange:
                {
                    this.calendarDate = options.modelValue || new Date();
                }
                break;
            default: {
                this.model = options.modelValue;
                this.calendarDate = options.modelValue || new Date();
            }
        }
        this._calendarMode = options.view;
        this.minYear = options.minYear;
        this.maxYear = options.maxYear;
        this.minDate = options.minDate;
        this.maxDate = options.maxDate;
        this.startOfDay = options.startOfDay;
        this.minutes = options.minutes === undefined
            ? true
            : options.minutes;
        if (!isDate(options.seedDate) || !isValid(options.seedDate)) {
            this.seedDate = new Date((new Date().getFullYear()), 0, 1);
        }
        else {
            this.seedDate = options.seedDate;
        }
        this.periodWeeks = options.periodWeeks;
        this._updateDisabledDays();
    }
    _updateDisabled() {
        this._updateDisabledDays();
        this._updateDisabledTimes();
    }
    _updateDisabledDays() {
        if (this._pickerOptions.rangeType) {
            if (this._pickerOptions.rangeType === 'to') {
                this.disabledDays = getDisabledDays(this.minDate, this.maxDate, this.minYear, this.maxYear);
            }
        }
        else {
            this.disabledDays = getDisabledDays(this.minDate, this.maxDate, this.minYear, this.maxYear);
        }
    }
    _updateDisabledTimes() {
        const pickerView = this.view;
        if (pickerView !== PickerViewType.DateTime && pickerView !== PickerViewType.Time) {
            return;
        }
        if (this._pickerOptions.rangeType) {
            if (this._pickerOptions.rangeType === 'to') {
                this.disabledTimes = getDisabledTimes(this.model, this._pickerOptions.pickerRef);
            }
        }
        else {
            this.disabledTimes = getDisabledTimes(this.model, this._pickerOptions.pickerRef);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,