import { Subject } from 'rxjs';
import { skip } from 'rxjs/operators';
import { isEqual, forEach } from 'lodash-es';
import { FsDatePickerDialogModel } from './dialog-model';
import { FsDatePickerOverlayRef } from './overlay-ref';
export class FsDatePickerDialogRef {
    constructor(_pickerOptions) {
        this._pickerOptions = _pickerOptions;
        this._overlayRef = new FsDatePickerOverlayRef();
        this._close$ = new Subject();
        /**
         * Visual components. Can be changed by summary widget but only if _view allowed to do this.
         */
        this._componentsDefault = {
            calendarStart: false,
            calendarEnd: false,
            timeStart: false,
            timeEnd: false
        };
        this._components = null;
        this._init();
    }
    get pickerModel() {
        return this._dialogModel;
    }
    get options() {
        return this._pickerOptions;
    }
    get value$() {
        return this._value$;
    }
    get pickerOverlayRef() {
        return this._overlayRef;
    }
    get close$() {
        return this._close$.asObservable();
    }
    get components() {
        return this._components;
    }
    updateValue(value) {
        this._dialogModel.model = value;
    }
    close() {
        this.pickerOverlayRef.close();
        this._close$.next();
        this._close$.complete();
    }
    _init() {
        this._initComponents();
        this._initModel();
    }
    _initModel() {
        this._dialogModel = new FsDatePickerDialogModel(this._pickerOptions);
        this._initValue();
    }
    _initValue() {
        if (this.options.view === 'week') {
            this._value$ = this._dialogModel.period$
                .pipe(skip(1));
        }
        else {
            this._value$ = this._dialogModel.model$
                .pipe(skip(1));
        }
    }
    _initComponents() {
        const value = Object.assign(Object.assign({}, this._componentsDefault), this._pickerOptions.components || {});
        const tempData = Object.assign({}, value);
        const allowable = [];
        if (['week', 'date', 'datetime', 'monthrange'].indexOf(this._pickerOptions.view) !== -1) {
            allowable.push('calendarStart');
            allowable.push('calendarEnd');
        }
        if (['time', 'datetime'].indexOf(this._pickerOptions.view) !== -1) {
            allowable.push('timeStart');
            allowable.push('timeEnd');
        }
        forEach(tempData, (item, index) => {
            tempData[index] = allowable.indexOf(index) !== -1 ? item : false;
        });
        // Updating components only if all value object is valid
        if (isEqual(value, tempData)) {
            this._components = value;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLXJlZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWJzL2RpYWxvZy9jbGFzc2VzL2RpYWxvZy1yZWYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFjLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMzQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFdEMsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFJN0MsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDekQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBS3ZELE1BQU0sT0FBTyxxQkFBcUI7SUFtQmhDLFlBQ1UsY0FBcUM7UUFBckMsbUJBQWMsR0FBZCxjQUFjLENBQXVCO1FBbEJ2QyxnQkFBVyxHQUFHLElBQUksc0JBQXNCLEVBQUUsQ0FBQztRQUUzQyxZQUFPLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQUd0Qzs7V0FFRztRQUNLLHVCQUFrQixHQUFrQztZQUMxRCxhQUFhLEVBQUUsS0FBSztZQUNwQixXQUFXLEVBQUUsS0FBSztZQUNsQixTQUFTLEVBQUUsS0FBSztZQUNoQixPQUFPLEVBQUUsS0FBSztTQUNmLENBQUM7UUFFTSxnQkFBVyxHQUFrQyxJQUFJLENBQUM7UUFLeEQsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2YsQ0FBQztJQUVELElBQVcsV0FBVztRQUNwQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDM0IsQ0FBQztJQUVELElBQVcsT0FBTztRQUNoQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDN0IsQ0FBQztJQUVELElBQVcsTUFBTTtRQUNmLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBRUQsSUFBVyxnQkFBZ0I7UUFDekIsT0FBTyxJ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cyc7XG5pbXBvcnQgeyBza2lwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBpc0VxdWFsLCBmb3JFYWNoIH0gZnJvbSAnbG9kYXNoLWVzJztcblxuaW1wb3J0IHsgSVBlcmlvZCB9IGZyb20gJy4uLy4uL2NvbW1vbi9pbnRlcmZhY2VzL3BlcmlvZC5pbnRlcmZhY2UnO1xuXG5pbXBvcnQgeyBGc0RhdGVQaWNrZXJEaWFsb2dNb2RlbCB9IGZyb20gJy4vZGlhbG9nLW1vZGVsJztcbmltcG9ydCB7IEZzRGF0ZVBpY2tlck92ZXJsYXlSZWYgfSBmcm9tICcuL292ZXJsYXktcmVmJztcbmltcG9ydCB7IElEaWFsb2dGYWN0b3J5T3B0aW9ucyB9IGZyb20gJy4uL2ludGVyZmFjZXMvZGlhbG9nLWZhY3RvcnktZGF0YS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgSUZzRGF0ZVBpY2tlckRpYWxvZ0NvbXBvbmVudHMgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2RpYWxvZy1jb21wb25lbnRzLmludGVyZmFjZSc7XG5cblxuZXhwb3J0IGNsYXNzIEZzRGF0ZVBpY2tlckRpYWxvZ1JlZiB7XG5cbiAgcHJpdmF0ZSBfb3ZlcmxheVJlZiA9IG5ldyBGc0RhdGVQaWNrZXJPdmVybGF5UmVmKCk7XG4gIHByaXZhdGUgX2RpYWxvZ01vZGVsOiBGc0RhdGVQaWNrZXJEaWFsb2dNb2RlbDtcbiAgcHJpdmF0ZSBfY2xvc2UkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcbiAgcHJpdmF0ZSBfdmFsdWUkOiBPYnNlcnZhYmxlPERhdGUgfCBudWxsIHwgSVBlcmlvZD47XG5cbiAgLyoqXG4gICAqIFZpc3VhbCBjb21wb25lbnRzLiBDYW4gYmUgY2hhbmdlZCBieSBzdW1tYXJ5IHdpZGdldCBidXQgb25seSBpZiBfdmlldyBhbGxvd2VkIHRvIGRvIHRoaXMuXG4gICAqL1xuICBwcml2YXRlIF9jb21wb25lbnRzRGVmYXVsdDogSUZzRGF0ZVBpY2tlckRpYWxvZ0NvbXBvbmVudHMgPSB7XG4gICAgY2FsZW5kYXJTdGFydDogZmFsc2UsXG4gICAgY2FsZW5kYXJFbmQ6IGZhbHNlLFxuICAgIHRpbWVTdGFydDogZmFsc2UsXG4gICAgdGltZUVuZDogZmFsc2VcbiAgfTtcblxuICBwcml2YXRlIF9jb21wb25lbnRzOiBJRnNEYXRlUGlja2VyRGlhbG9nQ29tcG9uZW50cyA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBfcGlja2VyT3B0aW9uczogSURpYWxvZ0ZhY3RvcnlPcHRpb25zLFxuICApIHtcbiAgICB0aGlzLl9pbml0KCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHBpY2tlck1vZGVsKCk6IEZzRGF0ZVBpY2tlckRpYWxvZ01vZGVsIHtcbiAgICByZXR1cm4gdGhpcy5fZGlhbG9nTW9kZWw7XG4gIH1cblxuICBwdWJsaWMgZ2V0IG9wdGlvbnMoKTogSURpYWxvZ0ZhY3RvcnlPcHRpb25zIHtcbiAgICByZXR1cm4gdGhpcy5fcGlja2VyT3B0aW9ucztcbiAgfVxuXG4gIHB1YmxpYyBnZXQgdmFsdWUkKCk6IE9ic2VydmFibGU8RGF0ZSB8IElQZXJpb2QgfCBudWxsPiB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlJDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgcGlja2VyT3ZlcmxheVJlZigpOiBGc0RhdGVQaWNrZXJPdmVybGF5UmVmIHtcbiAgICByZXR1cm4gdGhpcy5fb3ZlcmxheVJlZjtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgY2xvc2UkKCkge1xuICAgIHJldHVybiB0aGlzLl9jbG9zZSQuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICBnZXQgY29tcG9uZW50cygpIHtcbiAgICByZXR1cm4gdGhpcy5fY29tcG9uZW50cztcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGVWYWx1ZSh2YWx1ZSkge1xuICAgIHRoaXMuX2RpYWxvZ01vZGVsLm1vZGVsID0gdmFsdWU7XG4gIH1cblxuICBwdWJsaWMgY2xvc2UoKTogdm9pZCB7XG4gICAgdGhpcy5waWNrZXJPdmVybGF5UmVmLmNsb3NlKCk7XG4gICAgdGhpcy5fY2xvc2UkLm5leHQoKTtcbiAgICB0aGlzLl9jbG9zZSQuY29tcGxldGUoKTtcbiAgfVxuXG4gIHByaXZhdGUgX2luaXQoKTogdm9pZCB7XG4gICAgdGhpcy5faW5pdENvbXBvbmVudHMoKTtcbiAgICB0aGlzLl9pbml0TW9kZWwoKTtcbiAgfVxuXG4gIHByaXZhdGUgX2luaXRNb2RlbCgpOiB2b2lkIHtcbiAgICB0aGlzLl9kaWFsb2dNb2RlbCA9IG5ldyBGc0RhdGVQaWNrZXJEaWFsb2dNb2RlbChcbiAgICAgIHRoaXMuX3BpY2tlck9wdGlvbnMsXG4gICAgKTtcblxuICAgIHRoaXMuX2luaXRWYWx1ZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBfaW5pdFZhbHVlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm9wdGlvbnMudmlldyA9PT0gJ3dlZWsnKSB7XG4gICAgICB0aGlzLl92YWx1ZSQgPSB0aGlzLl9kaWFsb2dNb2RlbC5wZXJpb2QkXG4gICAgICAgIC5waXBlKFxuICAgICAgICAgIHNraXAoMSksXG4gICAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3ZhbHVlJCA9IHRoaXMuX2RpYWxvZ01vZGVsLm1vZGVsJFxuICAgICAgICAucGlwZShcbiAgICAgICAgICBza2lwKDEpLFxuICAgICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX2luaXRDb21wb25lbnRzKCk6IHZvaWQge1xuICAgIGNvbnN0IHZhbHVlID0ge1xuICAgICAgLi4udGhpcy5fY29tcG9uZW50c0RlZmF1bHQsXG4gICAgICAuLi50aGlzLl9waWNrZXJPcHRpb25zLmNvbXBvbmVudHMgfHwge30sXG4gICAgfTtcbiAgICBjb25zdCB0ZW1wRGF0YSA9IHsgLi4udmFsdWUgfTtcbiAgICBjb25zdCBhbGxvd2FibGUgPSBbXTtcblxuICAgIGlmIChbJ3dlZWsnLCAnZGF0ZScsICdkYXRldGltZScsICdtb250aHJhbmdlJ10uaW5kZXhPZih0aGlzLl9waWNrZXJPcHRpb25zLnZpZXcpICE9PSAtMSkge1xuICAgICAgYWxsb3dhYmxlLnB1c2goJ2NhbGVuZGFyU3RhcnQnKTtcbiAgICAgIGFsbG93YWJsZS5wdXNoKCdjYWxlbmRhckVuZCcpO1xuICAgIH1cblxuICAgIGlmIChbJ3RpbWUnLCAnZGF0ZXRpbWUnXS5pbmRleE9mKHRoaXMuX3BpY2tlck9wdGlvbnMudmlldykgIT09IC0xKSB7XG4gICAgICBhbGxvd2FibGUucHVzaCgndGltZVN0YXJ0Jyk7XG4gICAgICBhbGxvd2FibGUucHVzaCgndGltZUVuZCcpO1xuICAgIH1cblxuICAgIGZvckVhY2godGVtcERhdGEsIChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgdGVtcERhdGFbaW5kZXhdID0gYWxsb3dhYmxlLmluZGV4T2YoaW5kZXgpICE9PSAtMSA/IGl0ZW0gOiBmYWxzZTtcbiAgICB9KTtcblxuICAgIC8vIFVwZGF0aW5nIGNvbXBvbmVudHMgb25seSBpZiBhbGwgdmFsdWUgb2JqZWN0IGlzIHZhbGlkXG4gICAgaWYgKGlzRXF1YWwodmFsdWUsIHRlbXBEYXRhKSkge1xuICAgICAgdGhpcy5fY29tcG9uZW50cyA9IHZhbHVlO1xuICAgIH1cbiAgfVxufVxuIl19