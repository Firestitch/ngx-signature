import { addWeeks, addYears, differenceInCalendarWeeks, differenceInCalendarYears, differenceInYears, isBefore, isSameWeek } from 'date-fns';
export class Week {
    constructor(_dateStart, _seedDate, _periodWeeks) {
        this._dateStart = _dateStart;
        this._seedDate = _seedDate;
        this._periodWeeks = _periodWeeks;
        this.days = [];
        this.firstWeekInPeriod = false;
        this.lastWeekInPeriod = false;
        this._periodVisible = false;
        if (this._seedDate && this._periodWeeks) {
            this.periodId = this._getPeriodId();
        }
        this._dateEnd = addWeeks(this._dateStart, 1);
    }
    get dateStart() {
        return this._dateStart;
    }
    get dateEnd() {
        return this._dateEnd;
    }
    get periodLableVisible() {
        return this._periodVisible;
    }
    /**
     * Add related day
     * @param day
     */
    addDay(day) {
        this.days.push(day);
    }
    /**
     * Add related period
     * @param period
     */
    addPeriod(period) {
        this.period = period;
    }
    /**
     * Set visibility for period label
     * @param flag
     */
    setPeriodVisibility(flag) {
        this._periodVisible = flag;
    }
    /**
     * To be able to draw borders for week
     */
    markAsFirstVisiblePeriodWeek() {
        this.firstWeekInPeriod = true;
    }
    markAsLastVisiblePeriodWeek() {
        this.lastWeekInPeriod = true;
    }
    /**
     * Calculate period ID based on week date start and seed date
     */
    _getPeriodId() {
        /**
         * If week date start before seed date
         */
        if (isBefore(this._dateStart, this._seedDate)) {
            const diffInYears = differenceInYears(this._dateStart, this._seedDate);
            const diffInCalendarYears = differenceInCalendarYears(this._dateStart, this._seedDate);
            const seedDate = new Date(this._seedDate);
            /**
             * Check if week date start includes seed date
             */
            const sameWeek = isSameWeek(this._dateStart, addYears(seedDate, diffInYears), { weekStartsOn: this._seedDate.getDay() });
            if (sameWeek) {
                seedDate.setFullYear(seedDate.getFullYear() + (diffInYears || -1));
            }
            else {
                seedDate.setFullYear(seedDate.getFullYear() + (diffInCalendarYears || -1));
            }
            const weeksDiff = differenceInCalendarWeeks(this._dateStart, seedDate, { weekStartsOn: this._seedDate.getDay() }) / this._periodWeeks;
            // Sometimes weeksDiff can be integer and we use +0.1 for easy round
            return Math.ceil(weeksDiff + 0.1);
        }
        else {
            const diffInYears = differenceInYears(addWeeks(this._dateStart, 1), this._seedDate);
            const seedDate = new Date(this._seedDate);
            seedDate.setFullYear(seedDate.getFullYear() + diffInYears);
            const weeksDiff = differenceInCalendarWeeks(this._dateStart, seedDate, { weekStartsOn: this._seedDate.getDay() }) / this._periodWeeks;
            // Sometimes weeksDiff can be integer and we use +0.1 for easy round
            return Math.ceil(weeksDiff + 0.1);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,