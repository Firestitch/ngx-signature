import { addWeeks, differenceInCalendarYears, } from 'date-fns';
export class Period {
    constructor(periodId, startDate, seedDate, periodWeeks, _selected = false) {
        this.periodId = periodId;
        this.startDate = startDate;
        this.seedDate = seedDate;
        this.periodWeeks = periodWeeks;
        this._selected = _selected;
        this.mouseOver = false;
        this._weeks = [];
        this._countOfWeeks = 0;
        this._updatePeriodInterval();
    }
    get countOfWeeks() {
        return this._countOfWeeks;
    }
    get selected() {
        return this._selected;
    }
    get from() {
        return this._from;
    }
    get to() {
        return this._to;
    }
    get year() {
        return this._year;
    }
    set year(value) {
        this._year = value;
    }
    set selected(value) {
        this._selected = value;
        this._weeks.forEach((week) => {
            week.days.forEach((day) => {
                day.selected = value;
            });
        });
    }
    addWeek(week) {
        this._weeks.push(week);
        if (this.seedDate && this.periodWeeks) {
            this._sortWeeks();
            if (this._weeks.length === 1) {
                week.setPeriodVisibility(true);
            }
        }
        this._countOfWeeks = this._weeks.length;
    }
    /**
     * Mark weeks with special flags to be able to draw borders
     */
    markFirstLastWeeks() {
        const firstWeek = this._weeks[0];
        const lastWeek = this._weeks[this._weeks.length - 1];
        firstWeek.markAsFirstVisiblePeriodWeek();
        lastWeek.markAsLastVisiblePeriodWeek();
    }
    _sortWeeks() {
        this._weeks.sort((a, b) => {
            if (a.dateStart < b.dateStart) {
                return -1;
            }
            else if (a.dateStart > b.dateStart) {
                return 1;
            }
            else {
                return 0;
            }
        });
    }
    /**
     * Calc from, to, year params based on period date start
     */
    _updatePeriodInterval() {
        const diffInCalendarYears = differenceInCalendarYears(this.startDate, this.seedDate);
        const seedDate = new Date(this.seedDate);
        seedDate.setFullYear(seedDate.getFullYear() + diffInCalendarYears);
        const offsetFromSeedDate = (this.periodWeeks * (this.periodId - 1));
        this._from = addWeeks(seedDate, offsetFromSeedDate);
        this._to = addWeeks(this._from, this.periodWeeks);
        this._year = this._from.getFullYear();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyaW9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYnMvY2FsZW5kYXIvbW9kZWxzL3BlcmlvZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsUUFBUSxFQUNSLHlCQUF5QixHQUMxQixNQUFNLFVBQVUsQ0FBQztBQUlsQixNQUFNLE9BQU8sTUFBTTtJQVVqQixZQUNTLFFBQWdCLEVBQ2hCLFNBQWUsRUFDZixRQUFjLEVBQ2QsV0FBbUIsRUFDbEIsWUFBWSxLQUFLO1FBSmxCLGFBQVEsR0FBUixRQUFRLENBQVE7UUFDaEIsY0FBUyxHQUFULFNBQVMsQ0FBTTtRQUNmLGFBQVEsR0FBUixRQUFRLENBQU07UUFDZCxnQkFBVyxHQUFYLFdBQVcsQ0FBUTtRQUNsQixjQUFTLEdBQVQsU0FBUyxDQUFRO1FBYnBCLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFFakIsV0FBTSxHQUFXLEVBQUUsQ0FBQztRQUNwQixrQkFBYSxHQUFHLENBQUMsQ0FBQztRQVl4QixJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRUQsSUFBVyxZQUFZO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUM1QixDQUFDO0lBRUQsSUFBVyxRQUFRO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDO0lBRUQsSUFBVyxJQUFJO1FBQ2IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFFRCxJQUFXLEVBQUU7UUFDWCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDbEIsQ0FBQztJQUVELElBQVcsSUFBSTtRQUNiLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRUQsSUFBVyxJQUFJLENBQUMsS0FBYTtRQUMzQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNyQixDQUFDO0lBRUQsSUFBVyxRQUFRLENBQUMsS0FBYztRQUNoQyxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUV2QixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQzNCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7Z0JBQ3hCLEdBQUcsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1lBQ3ZCLENBQUMsQ0FBQyxDQUFBO1FBQ0osQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDO0lBRU0sT0FBTyxDQUFDLElBQVU7UUFDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdkIsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDckMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBRWxCLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUM1QixJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDaEM7U0FDRjtRQUVELElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDMUMsQ0FBQztJQUVEOztPQUVHO0lBQ0ksa0JBQWtCO1FBQ3ZCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUVyRCxTQUFTLENBQUMsNEJBQTRCLEVBQUUsQ0FBQztRQUN6QyxRQUFRLENBQUMsMkJBQTJCLEVBQUUsQ0FBQztJQUN6QyxDQUFDO0lBRU8sVUFBVTtRQUNoQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QixJQUFJLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRTtnQkFDN0IsT0FBTyxDQUFDLENBQUMsQ0FBQTthQUNWO2lCQUFNLElBQUksQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFO2dCQUNwQyxPQUFPLENBQUMsQ0FBQzthQUNWO2lCQUFNO2dCQUNMLE9BQU8sQ0FBQyxDQUFDO2FBQ1Y7UUFDSCxDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNLLHFCQUFxQjtRQUMzQixNQUFNLG1CQUFtQixHQUFHLHlCQUF5QixDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXJGLE1BQU0sUUFBUSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN6QyxRQUFRLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsR0FBRyxtQkFBbUIsQ0FBQyxDQUFDO1FBRW5FLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXBFLElBQUksQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLFFBQVEsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxHQUFHLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN4QyxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBhZGRXZWVrcyxcbiAgZGlmZmVyZW5jZUluQ2FsZW5kYXJZZWFycyxcbn0gZnJvbSAnZGF0ZS1mbnMnO1xuXG5pbXBvcnQgeyBXZWVrIH0gZnJvbSAnLi93ZWVrJztcblxuZXhwb3J0IGNsYXNzIFBlcmlvZCB7XG5cbiAgcHVibGljIG1vdXNlT3ZlciA9IGZhbHNlO1xuXG4gIHByaXZhdGUgX3dlZWtzOiBXZWVrW10gPSBbXTtcbiAgcHJpdmF0ZSBfY291bnRPZldlZWtzID0gMDtcbiAgcHJpdmF0ZSBfZnJvbTogRGF0ZTtcbiAgcHJpdmF0ZSBfdG86IERhdGU7XG4gIHByaXZhdGUgX3llYXI6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcGVyaW9kSWQ6IG51bWJlcixcbiAgICBwdWJsaWMgc3RhcnREYXRlOiBEYXRlLFxuICAgIHB1YmxpYyBzZWVkRGF0ZTogRGF0ZSxcbiAgICBwdWJsaWMgcGVyaW9kV2Vla3M6IG51bWJlcixcbiAgICBwcml2YXRlIF9zZWxlY3RlZCA9IGZhbHNlLFxuICApIHtcbiAgICB0aGlzLl91cGRhdGVQZXJpb2RJbnRlcnZhbCgpO1xuICB9XG5cbiAgcHVibGljIGdldCBjb3VudE9mV2Vla3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvdW50T2ZXZWVrcztcbiAgfVxuXG4gIHB1YmxpYyBnZXQgc2VsZWN0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NlbGVjdGVkO1xuICB9XG5cbiAgcHVibGljIGdldCBmcm9tKCkge1xuICAgIHJldHVybiB0aGlzLl9mcm9tO1xuICB9XG5cbiAgcHVibGljIGdldCB0bygpIHtcbiAgICByZXR1cm4gdGhpcy5fdG87XG4gIH1cblxuICBwdWJsaWMgZ2V0IHllYXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3llYXI7XG4gIH1cblxuICBwdWJsaWMgc2V0IHllYXIodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX3llYXIgPSB2YWx1ZTtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgc2VsZWN0ZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9zZWxlY3RlZCA9IHZhbHVlO1xuXG4gICAgdGhpcy5fd2Vla3MuZm9yRWFjaCgod2VlaykgPT4ge1xuICAgICAgd2Vlay5kYXlzLmZvckVhY2goKGRheSkgPT4ge1xuICAgICAgICBkYXkuc2VsZWN0ZWQgPSB2YWx1ZTtcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIHB1YmxpYyBhZGRXZWVrKHdlZWs6IFdlZWspIHtcbiAgICB0aGlzLl93ZWVrcy5wdXNoKHdlZWspO1xuXG4gICAgaWYgKHRoaXMuc2VlZERhdGUgJiYgdGhpcy5wZXJpb2RXZWVrcykge1xuICAgICAgdGhpcy5fc29ydFdlZWtzKCk7XG5cbiAgICAgIGlmICh0aGlzLl93ZWVrcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgd2Vlay5zZXRQZXJpb2RWaXNpYmlsaXR5KHRydWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2NvdW50T2ZXZWVrcyA9IHRoaXMuX3dlZWtzLmxlbmd0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXJrIHdlZWtzIHdpdGggc3BlY2lhbCBmbGFncyB0byBiZSBhYmxlIHRvIGRyYXcgYm9yZGVyc1xuICAgKi9cbiAgcHVibGljIG1hcmtGaXJzdExhc3RXZWVrcygpIHtcbiAgICBjb25zdCBmaXJzdFdlZWsgPSB0aGlzLl93ZWVrc1swXTtcbiAgICBjb25zdCBsYXN0V2VlayA9IHRoaXMuX3dlZWtzW3RoaXMuX3dlZWtzLmxlbmd0aCAtIDFdO1xuXG4gICAgZmlyc3RXZWVrLm1hcmtBc0ZpcnN0VmlzaWJsZVBlcmlvZFdlZWsoKTtcbiAgICBsYXN0V2Vlay5tYXJrQXNMYXN0VmlzaWJsZVBlcmlvZFdlZWsoKTtcbiAgfVxuXG4gIHByaXZhdGUgX3NvcnRXZWVrcygpIHtcbiAgICB0aGlzLl93ZWVrcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICBpZiAoYS5kYXRlU3RhcnQgPCBiLmRhdGVTdGFydCkge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH0gZWxzZSBpZiAoYS5kYXRlU3RhcnQgPiBiLmRhdGVTdGFydCkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQ2FsYyBmcm9tLCB0bywgeWVhciBwYXJhbXMgYmFzZWQgb24gcGVyaW9kIGRhdGUgc3RhcnRcbiAgICovXG4gIHByaXZhdGUgX3VwZGF0ZVBlcmlvZEludGVydmFsKCkge1xuICAgIGNvbnN0IGRpZmZJbkNhbGVuZGFyWWVhcnMgPSBkaWZmZXJlbmNlSW5DYWxlbmRhclllYXJzKHRoaXMuc3RhcnREYXRlLCB0aGlzLnNlZWREYXRlKTtcblxuICAgIGNvbnN0IHNlZWREYXRlID0gbmV3IERhdGUodGhpcy5zZWVkRGF0ZSk7XG4gICAgc2VlZERhdGUuc2V0RnVsbFllYXIoc2VlZERhdGUuZ2V0RnVsbFllYXIoKSArIGRpZmZJbkNhbGVuZGFyWWVhcnMpO1xuXG4gICAgY29uc3Qgb2Zmc2V0RnJvbVNlZWREYXRlID0gKHRoaXMucGVyaW9kV2Vla3MgKiAodGhpcy5wZXJpb2RJZCAtIDEpKTtcblxuICAgIHRoaXMuX2Zyb20gPSBhZGRXZWVrcyhzZWVkRGF0ZSwgb2Zmc2V0RnJvbVNlZWREYXRlKTtcbiAgICB0aGlzLl90byA9IGFkZFdlZWtzKHRoaXMuX2Zyb20sIHRoaXMucGVyaW9kV2Vla3MpO1xuICAgIHRoaXMuX3llYXIgPSB0aGlzLl9mcm9tLmdldEZ1bGxZZWFyKCk7XG4gIH1cbn1cbiJdfQ==