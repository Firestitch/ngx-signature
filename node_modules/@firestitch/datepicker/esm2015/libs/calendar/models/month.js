import { addDays, format, getDaysInMonth, lightFormat, subDays } from 'date-fns';
import { isDayDisabled } from '../../common/helpers/is-day-disabled';
import { Week } from './week';
import { Period } from './period';
const CALENDAR_DAYS_NUMBER = 42;
export class Month {
    constructor(date, seedDate, periodWeeks, _disabledDays, _hideExtraDays) {
        this.date = date;
        this.seedDate = seedDate;
        this.periodWeeks = periodWeeks;
        this._disabledDays = _disabledDays;
        this._hideExtraDays = _hideExtraDays;
        this.weeks = [];
        this._initMonth(date);
        if (this.seedDate && this.periodWeeks) {
            this._seedDay = seedDate.getDay();
            this._countTotalDaysInMonth(this._seedDay);
        }
        else {
            this._countTotalDaysInMonth(0);
        }
    }
    get seedDay() {
        return this._seedDay;
    }
    /**
     * Render days and weeks
     */
    renderDays() {
        let currentDate = subDays(this.date, this._prevMonthDaysCount);
        let daysToBeRendered = this._hideExtraDays
            ? getDaysInMonth(this.date) + this._prevMonthDaysCount
            : CALENDAR_DAYS_NUMBER;
        // only for week mode in mobile view!
        if (this._hideExtraDays && this.periodWeeks) {
            daysToBeRendered += 7 - (daysToBeRendered % 7);
        }
        let week;
        for (let d = 0; d < daysToBeRendered; d++) {
            const dayNumber = lightFormat(currentDate, 'd');
            if (d % 7 == 0) {
                week = new Week(currentDate, this.seedDate, this.periodWeeks);
                this.weeks.push(week);
            }
            const dayMuted = d - this._prevMonthDaysCount < 0
                || d >= this._daysInMonth + this._prevMonthDaysCount;
            week.addDay({
                mute: dayMuted,
                date: lightFormat(currentDate, 'yyyy-MM-dd'),
                number: dayNumber,
                month: currentDate.getMonth(),
                year: currentDate.getFullYear(),
                disabled: isDayDisabled(this._disabledDays, currentDate),
            });
            currentDate = addDays(currentDate, 1);
        }
        if (this.seedDate && this.periodWeeks) {
            this._groupWeeks();
            this._markFirstAndLastWeeks();
        }
    }
    getPeriodById(id) {
        if (!this.weeksByPeriod.has(id)) {
            return false;
        }
        return this.weeksByPeriod.get(id);
    }
    /**
     * Input period means that instance of period is not same instance
     * that was created for month.
     * It means that period and weeksByPeriod can have same periodIds but different object refs
     * @param period
     */
    updateSelectionForPeriod(period) {
        const p = this.getPeriodById(period.periodId);
        if (p && p.year === period.year) {
            p.selected = period.selected;
            return p;
        }
        else {
            return false;
        }
    }
    /**
     * Init base month field
     * @param date
     */
    _initMonth(date) {
        this.date = new Date(date);
        this.date.setDate(1);
        this._monthStartDay = this.date.getDay();
        this._daysInMonth = getDaysInMonth(this.date);
        this.name = format(this.date, 'MMMM');
        this.number = this.date.getMonth();
        this.year = this.date.getFullYear();
        this.monthAndYear = `${this.date.getFullYear()}-${this.date.getMonth()}`;
        this.months = [{ name: format(this.date, 'MMMM'), value: this.date.getMonth() }];
        this.years = [this.date.getFullYear()];
    }
    /**
     * Depends on week day start it counts total number of days in month
     * @param seedDay
     */
    _countTotalDaysInMonth(seedDay) {
        if (this._monthStartDay >= seedDay) {
            this._prevMonthDaysCount = this._monthStartDay - seedDay;
        }
        else {
            this._prevMonthDaysCount = 7 - (seedDay - this._monthStartDay);
        }
        // const totalDays = this._daysInMonth + this._prevMonthDaysCount;
        // this._totalDaysInMonth = Math.ceil(totalDays / 7) * 7;
    }
    /**
     * Just for easy usage
     */
    _groupWeeks() {
        this.weeksByPeriod = new Map();
        this.weeks.forEach((week) => {
            if (!this.weeksByPeriod.has(week.periodId)) {
                const newPeriod = new Period(week.periodId, week.dateStart, this.seedDate, this.periodWeeks);
                this.weeksByPeriod.set(week.periodId, newPeriod);
            }
            const period = this.weeksByPeriod
                .get(week.periodId);
            period.addWeek(week);
            week.addPeriod(period);
        });
    }
    _markFirstAndLastWeeks() {
        this.weeksByPeriod.forEach((period) => {
            period.markFirstLastWeeks();
        });
    }
}
//# sourceMappingURL=data:application/json;base64,