import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, IterableDiffers, Output } from '@angular/core';
import { getStartDayDate } from '../../../common/helpers/get-start-day-date';
import { splitDateByComponents } from '../../../common/helpers/split-date-by-components';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class FsDatePickerTimeComponent {
    constructor(element, _iterableDiffers) {
        this.element = element;
        this._iterableDiffers = _iterableDiffers;
        this.date = null;
        this.disabledMinutes = [];
        this.disabledHours = [];
        this.disabledTimes = [];
        this.expanded = false;
        this.minutes = true;
        this.showNotSelected = true;
        this.onChange = new EventEmitter();
        this.selected = {};
        this.disabledTimeMinutes = {};
        this.disabledTimeHours = {};
        this.disabledGroupedMinutes = {};
        this.timeHoursCollapsed = [
            [
                [0, 1, 2, 3],
                [4, 5, 6, 7],
                [8, 9, 10, 11]
            ],
            [
                [12, 13, 14, 15],
                [16, 17, 18, 19],
                [20, 21, 22, 23]
            ]
        ];
        this.timeMinutesCollapsed = [
            [0, 5],
            [10, 15],
            [20, 25],
            [30, 35],
            [40, 45],
            [50, 55]
        ];
        this.timeHoursExpanded = [
            [0, 12],
            [1, 13],
            [2, 14],
            [3, 15],
            [4, 16],
            [5, 17],
            [6, 18],
            [7, 19],
            [8, 20],
            [9, 21],
            [10, 22],
            [11, 23]
        ];
        this.timeMinutesExpanded = [
            [0, 1, 2, 3, 4],
            [5, 6, 7, 8, 9],
            [10, 11, 12, 13, 14],
            [15, 16, 17, 18, 19],
            [20, 21, 22, 23, 24],
            [25, 26, 27, 28, 29],
            [30, 31, 32, 33, 34],
            [35, 36, 37, 38, 39],
            [40, 41, 42, 43, 44],
            [45, 46, 47, 48, 49],
            [50, 51, 52, 53, 54],
            [55, 56, 57, 58, 59]
        ];
        this.disabledMinutesDiffer = null;
        this.disabledHoursDiffer = null;
        this.disabledTimesDiffer = null;
        this.disabledHoursDiffer = this._iterableDiffers.find([]).create(null);
        this.disabledMinutesDiffer = this._iterableDiffers.find([]).create(null);
        this.disabledTimesDiffer = this._iterableDiffers.find([]).create(null);
    }
    ngOnInit() {
        this.checkDisabledTime();
        this.nowHour = (new Date()).getHours();
        this.nowMinute = this.minutes
            ? (new Date()).getMinutes()
            : 0;
    }
    ngOnChanges(changes) {
        if (changes && changes.date) {
            this.selected = splitDateByComponents(this.date);
            if (!this.minutes) {
                this.selected.minute = 0;
                if (this.date) {
                    this.date.setMinutes(0);
                }
            }
        }
    }
    ngDoCheck() {
        if (this.disabledHoursDiffer.diff(this.disabledHours) ||
            this.disabledMinutesDiffer.diff(this.disabledMinutes) ||
            this.disabledTimesDiffer.diff(this.disabledTimes)) {
            this.checkDisabledTime();
        }
    }
    checkDisabledTime() {
        this.disabledTimeMinutes = {};
        this.disabledTimeHours = {};
        this.disabledGroupedMinutes = {};
        if (this.disabledMinutes !== undefined) {
            for (const range of this.disabledMinutes) {
                this.addDisabledMinutes(range);
            }
        }
        if (this.disabledHours !== undefined) {
            for (const range of this.disabledHours) {
                this.addDisabledHours(range);
            }
        }
        if (this.disabledTimes !== undefined) {
            for (const range of this.disabledTimes) {
                const min = Math.min(range[0], range[1]);
                const max = Math.max(range[0], range[1]);
                const minMinutes = min % 60;
                const maxMinutes = max % 60;
                const minHour = Math.floor(min / 60);
                const maxHour = Math.floor(max / 60);
                for (let h = 0; h <= 24; h++) {
                    this.disabledGroupedMinutes[h] = {};
                    if (h > minHour && h < maxHour) {
                        this.addDisabledHours(h);
                    }
                    else if (h == minHour && !minMinutes && minHour != maxHour) {
                        this.addDisabledHours(h);
                    }
                    if (h >= minHour && h <= maxHour) {
                        for (let m = minMinutes; m < maxMinutes; m++) {
                            const minute = h * m;
                            if (minute >= range[0] && minute <= range[1]) {
                                this.disabledGroupedMinutes[h][m] = true;
                            }
                        }
                    }
                }
            }
        }
    }
    addDisabledMinutes(range) {
        const min = Math.min(range[0], range[1]);
        const max = Math.max(range[0], range[1]);
        if (Array.isArray(range)) {
            for (let i = min; i <= max; i++) {
                this.disabledTimeMinutes[i] = true;
            }
        }
        else {
            this.disabledTimeMinutes[range] = true;
        }
    }
    addDisabledHours(range) {
        const min = Math.min(range[0], range[1]);
        const max = Math.max(range[0], range[1]);
        if (Array.isArray(range)) {
            for (let i = min; i <= max; i++) {
                this.disabledTimeHours[i] = true;
            }
        }
        else {
            this.disabledTimeHours[range] = true;
        }
    }
    createModel() {
        if (!this.date) {
            this.setDate(getStartDayDate());
        }
    }
    setDate(date) {
        this.date = date;
        this.onChange.emit(date);
    }
    hourClick(hour) {
        if (this.disabledTimeHours[hour]) {
            return;
        }
        let newDate;
        if (!this.date) {
            newDate = getStartDayDate();
        }
        else {
            newDate = new Date(this.date);
        }
        newDate.setHours(hour);
        this.setDate(newDate);
    }
    minuteClick(minute) {
        if (this.disabledTimeMinutes[minute]
            || (this.disabledGroupedMinutes[this.selected.hour] && this.disabledGroupedMinutes[this.selected.hour][minute])) {
            return;
        }
        let newDate;
        if (!this.date) {
            newDate = getStartDayDate();
        }
        else {
            newDate = new Date(this.date);
        }
        newDate.setMinutes(minute);
        this.setDate(newDate);
    }
}
FsDatePickerTimeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDatePickerTimeComponent, deps: [{ token: i0.ElementRef }, { token: i0.IterableDiffers }], target: i0.ɵɵFactoryTarget.Component });
FsDatePickerTimeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDatePickerTimeComponent, selector: "fs-date-picker-time", inputs: { date: "date", disabledMinutes: "disabledMinutes", disabledHours: "disabledHours", disabledTimes: "disabledTimes", expanded: "expanded", minutes: "minutes", showNotSelected: "showNotSelected" }, outputs: { onChange: "onChange" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"month-year time\" *ngIf=\"minutes && showNotSelected\">\n  <ng-container *ngIf=\"date; else noTime\">\n    {{ date | date:'h:mm aa'}}\n  </ng-container>\n  <ng-template #noTime>\n    Time Not Selected\n  </ng-template>\n</div>\n\n<div class=\"time-container\">\n  <table *ngIf=\"expanded; else contracted\">\n    <thead *ngIf=\"minutes\">\n      <tr>\n        <th class=\"hours-col\">\n          Hour\n        </th>\n        <th class=\"minutes-col\">\n          Minute\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td class=\"hours-col\">\n          <div class=\"hours-container\">\n            <table>\n              <tr *ngFor=\"let hours of timeHoursExpanded\">\n                <td\n                  *ngFor=\"let hour of hours\"\n                  class=\"tile number hour\"\n                  (click)=\"hourClick(hour)\"\n                  [ngClass]=\"{\n                    disabled: disabledTimeHours[hour],\n                    now: nowHour === hour,\n                    selected: hour == selected.hour\n                  }\">\n                  <div class=\"tile-content\">\n                    <span *ngIf=\"hour < 12\">{{ hour ? hour : 12 }}<span class=\"am-pm\">am</span></span>\n                    <span *ngIf=\"hour >= 12\">{{ hour==12 ? 12 : hour-12 }}<span class=\"am-pm\">pm</span></span>\n                  </div>\n                </td>\n              </tr>\n            </table>\n          </div>\n        </td>\n        <td class=\"minutes-col\" *ngIf=\"minutes\">\n          <div class=\"minutes-container\">\n            <table>\n              <tr *ngFor=\"let minutes of timeMinutesExpanded\">\n                <td *ngFor=\"let minute of minutes\"\n                    class=\"tile number minute\"\n                    [ngClass]=\"{\n                      disabled: disabledTimeMinutes[minute] || (disabledGroupedMinutes[selected.hour] && disabledGroupedMinutes[selected.hour][minute]),\n                      selected: minute == selected.minute,\n                      now: nowMinute === minute\n                    }\"\n                    (click)=\"minuteClick(minute)\">\n                    <div class=\"tile-content\">{{ minute }}</div>\n                </td>\n              </tr>\n            </table>\n          </div>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n\n<ng-template #contracted>\n  <table>\n    <thead *ngIf=\"minutes\">\n      <tr>\n        <th class=\"hours-col\">\n          Hour\n        </th>\n        <th class=\"minutes-col\">\n          Minute\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td class=\"hours-col\">\n          <table>\n            <tbody *ngFor=\"let group of timeHoursCollapsed; let i = index\">\n            <tr *ngFor=\"let hours of group\">\n              <td\n                *ngFor=\"let hour of hours\"\n                class=\"tile number hour\"\n                (click)=\"hourClick(hour)\"\n                [ngClass]=\"{\n                  disabled: disabledTimeHours[hour],\n                  selected: hour == selected.hour,\n                  now: nowHour === hour\n                }\">\n                <div class=\"tile-content\">\n                  <span *ngIf=\"hour < 12\">{{ hour ? hour : 12 }}<span class=\"am-pm\">am</span></span>\n                  <span *ngIf=\"hour >= 12\">{{ hour==12 ? 12 : hour-12 }}<span class=\"am-pm\">pm</span></span>\n                </div>\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </td>\n\n        <td class=\"minutes-col\" *ngIf=\"minutes\">\n          <table>\n            <tr *ngFor=\"let minutes of timeMinutesCollapsed\">\n              <td\n                *ngFor=\"let minute of minutes\"\n                class=\"tile number minute\"\n                [ngClass]=\"{\n                  disabled: disabledTimeMinutes[minute] || (disabledGroupedMinutes[selected.hour] && disabledGroupedMinutes[selected.hour][minute]),\n                  selected: minute == selected.minute,\n                  now: nowMinute === minute\n                }\"\n                  (click)=\"minuteClick(minute)\">\n                <div class=\"tile-content\">{{ minute }}</div>\n              </td>\n            </tr>\n          </table>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</ng-template>\n", styles: ["thead th{text-align:center}tbody .minutes-col,tbody .hours-col{padding:0}tbody .minutes-col{padding-left:20px}tbody .hours-container{margin-right:20px}tbody .minutes-container,tbody .hours-container{max-height:300px;overflow:auto}.time-container table{width:100%}.time-container table .am-pm{font-size:13px;padding-left:2px}\n"], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "date": i1.DatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDatePickerTimeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'fs-date-picker-time',
                    templateUrl: './time.component.html',
                    styleUrls: ['./time.component.scss'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.IterableDiffers }]; }, propDecorators: { date: [{
                type: Input
            }], disabledMinutes: [{
                type: Input
            }], disabledHours: [{
                type: Input
            }], disabledTimes: [{
                type: Input
            }], expanded: [{
                type: Input
            }], minutes: [{
                type: Input
            }], showNotSelected: [{
                type: Input
            }], onChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,