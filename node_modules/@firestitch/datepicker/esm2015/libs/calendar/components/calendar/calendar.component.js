import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, } from '@angular/core';
import { eachDayOfInterval, format, isAfter, lightFormat, startOfDay, } from 'date-fns';
import { getStartDayDate } from '../../../common/helpers/get-start-day-date';
import { splitDateByComponents } from '../../../common/helpers/split-date-by-components';
import { WEEKDAYS } from '../../consts/week-days';
import { Month } from '../../models/month';
import { Period } from '../../models/period';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class FsDatePickerCalendarComponent {
    constructor(element) {
        this.element = element;
        this.date = null;
        this.period = null;
        this.rangeFrom = null;
        this.rangeTo = null;
        this.highlightStartDate = null;
        this.highlightEndDate = null;
        this.dateMode = null;
        this.disabledDays = null;
        this.drawMonth = null;
        this.hideExtraDays = false;
        this.change = new EventEmitter();
        this.rangeChange = new EventEmitter();
        this.periodChange = new EventEmitter();
        this.hoverDay = new EventEmitter();
        this.selected = {};
        this.selectedRange = {};
        this.month = null;
        this.weekDaysList = [];
        this.currentDate = new Date();
        this.today = {
            date: format(this.currentDate, 'yyyy-MM-dd'),
            month: this.currentDate.getMonth(),
            year: this.currentDate.getFullYear()
        };
        this.highlightedRangeDays = null;
        // date | datetime | week
        this._calendarMode = 'date';
    }
    ngOnInit() {
        this._calendarMode = this.dateMode;
        if (this.dateMode === 'week') {
            if (this.period && this.seedDate) {
                this.selectedPeriod = new Period(this.period.period, this.period.from, this.seedDate, this.periodWeeks, true);
                this.selectedPeriod.year = this.period.from.getFullYear();
                const selectedPeriod = this.month.updateSelectionForPeriod(this.selectedPeriod);
                if (selectedPeriod) {
                    this.selectedPeriod = selectedPeriod;
                }
            }
        }
        else if (this.date) {
            this.selected = splitDateByComponents(this.date);
        }
    }
    ngOnChanges(changes) {
        if (changes) {
            if (changes.date) {
                this.selected = splitDateByComponents(this.date);
                this.updateDaysHighlighted();
            }
            else if (changes.highlightStartDate || changes.highlightEndDate) {
                this.updateDaysHighlighted();
            }
            if (changes.drawMonth) {
                if (changes.drawMonth.currentValue) {
                    this.drawMonths(changes.drawMonth.currentValue);
                }
            }
            if (changes.rangeFrom || changes.rangeTo) {
                this.selectedRange = {
                    from: this.rangeFrom && lightFormat(this.rangeFrom, 'yyyy-MM-dd') || null,
                    to: this.rangeTo && lightFormat(this.rangeTo, 'yyyy-MM-dd') || null,
                };
            }
        }
    }
    onMouseEnterDay(day) {
        this.hoverDay.emit(day);
    }
    mouseEnterWeek(week) {
        if (this.dateMode === 'week') {
            week.period.mouseOver = true;
        }
    }
    mouseLeaveWeek(week) {
        if (this.dateMode === 'week') {
            week.period.mouseOver = false;
        }
    }
    updateDaysHighlighted() {
        this.highlightedRangeDays = {
            data: {},
            min: null,
            max: null
        };
        let start = null;
        let end = null;
        if (this.highlightStartDate && this.highlightEndDate) {
            if (isAfter(this.highlightStartDate, this.highlightEndDate)) {
                start = this.highlightEndDate;
                end = this.highlightStartDate;
            }
            else {
                start = this.highlightStartDate;
                end = this.highlightEndDate;
            }
            start = startOfDay(start);
            end = startOfDay(end);
            const range = Array.from(eachDayOfInterval({ start, end }));
            if (!range.length) {
                return;
            }
            for (const day of range) {
                this.highlightedRangeDays.data[lightFormat(day, 'yyyy-MM-dd')] = true;
            }
            this.highlightedRangeDays.min = lightFormat(range[0], 'yyyy-MM-dd');
            this.highlightedRangeDays.max = lightFormat(range[range.length - 1], 'yyyy-MM-dd');
        }
    }
    createModel() {
        if (!this.date) {
            this.date = getStartDayDate();
        }
    }
    setDate(date) {
        this.date = date;
        this.change.emit(date);
    }
    /**
     *
     * @param day
     * @param week
     * @param event
     */
    dayClick(day, week, event) {
        if (this.dateMode === 'week') {
            this.selectPeriod(week.period);
        }
        else if (this.dateMode === 'monthrange') {
            this.selectMonthRange(day);
        }
        else {
            this.selectDay(day);
        }
    }
    selectDay(day) {
        if (day.disabled) {
            return;
        }
        if (!this.date) {
            this.createModel();
        }
        const date = new Date(day.year, day.month, day.number, this.date.getHours(), this.date.getMinutes(), this.date.getSeconds());
        this.setDate(date);
    }
    selectMonthRange(day) {
        const date = new Date(day.year, day.month, +day.number, 0, 0, 0);
        this.setDate(date);
    }
    selectPeriod(period) {
        if (this.selectedPeriod) {
            if (this.selectedPeriod === period) {
                this.selectedPeriod.selected = !this.selectedPeriod.selected;
            }
            else {
                this.selectedPeriod.selected = false;
                period.selected = true;
                this.selectedPeriod = period;
            }
        }
        else {
            period.selected = true;
            this.selectedPeriod = period;
        }
        if (this.selectedPeriod.selected) {
            this.periodChange.emit({
                period: this.selectedPeriod.periodId,
                from: this.selectedPeriod.from,
                to: this.selectedPeriod.to,
            });
        }
        else {
            this.periodChange.emit(null);
        }
    }
    drawMonths(date) {
        this.month = this.createMonth(date);
    }
    createMonth(date) {
        const month = new Month(date, this.seedDate, this.periodWeeks, this.disabledDays, this.hideExtraDays);
        if (this.dateMode === 'week') {
            this.weekDaysList = WEEKDAYS.map((_, i, arr) => {
                return arr[(i + month.seedDay) % 7];
            });
        }
        else {
            this.weekDaysList = WEEKDAYS.slice();
        }
        month.renderDays();
        if (this.dateMode === 'week' && this.selectedPeriod) {
            const selectedPeriod = month.updateSelectionForPeriod(this.selectedPeriod);
            if (selectedPeriod) {
                this.selectedPeriod = selectedPeriod;
            }
        }
        return month;
    }
}
FsDatePickerCalendarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDatePickerCalendarComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
FsDatePickerCalendarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDatePickerCalendarComponent, selector: "fs-date-picker-calendar", inputs: { date: "date", period: "period", rangeFrom: "rangeFrom", rangeTo: "rangeTo", highlightStartDate: "highlightStartDate", highlightEndDate: "highlightEndDate", dateMode: "dateMode", disabledDays: "disabledDays", drawMonth: "drawMonth", seedDate: "seedDate", periodWeeks: "periodWeeks", hideExtraDays: "hideExtraDays" }, outputs: { change: "change", rangeChange: "rangeChange", periodChange: "periodChange", hoverDay: "hoverDay" }, host: { classAttribute: "fs-date-picker-calendar" }, usesOnChanges: true, ngImport: i0, template: "<table\n  [class.month-range]=\"dateMode === 'monthrange'\"\n  [class.range-selected]=\"!!selectedRange.from && !!selectedRange.to\">\n  <thead>\n    <tr>\n      <th *ngIf=\"seedDate && periodWeeks\">#</th>\n      <th *ngFor=\"let wd of weekDaysList\">{{wd}}</th>\n    </tr>\n  </thead>\n\n  <tbody class=\"calendar calendar-{{ month.monthAndYear }}\" >\n    <ng-container *ngFor=\"let week of month.weeks\">\n      <tr class=\"week\"\n          [class.first-period-week]=\"week.firstWeekInPeriod\"\n          [class.last-period-week]=\"week.lastWeekInPeriod\"\n          [class.hover]=\"week.period?.mouseOver\"\n          (mouseenter)=\"mouseEnterWeek(week)\"\n          (mouseleave)=\"mouseLeaveWeek(week)\"\n      >\n        <ng-container *ngIf=\"week.periodLableVisible\">\n          <td class=\"period\"\n              [rowSpan]=\"week.period.countOfWeeks\"\n              [class.selected]=\"week.period.selected\"\n              (click)=\"selectPeriod(week.period)\">\n            {{ week.period.periodId }}\n          </td>\n        </ng-container>\n\n        <ng-container *ngFor=\"let day of week.days\">\n          <td class=\"tile day\"\n              [class.hidden-day]=\"hideExtraDays && day.mute\"\n              [class.now]=\"today.date == day.date\"\n              [class.mute]=\"day.mute\"\n              [class.selected]=\"(day.selected || day.date == selected.date && !day.mute)\"\n              [class.range-from]=\"day.date === selectedRange.from && !day.mute && selectedRange.from !== selectedRange.to\"\n              [class.range-to]=\"day.date === selectedRange.to && !day.mute && selectedRange.from !== selectedRange.to\"\n              [class.same-range-dates]=\"(hideExtraDays && !day.mute) && selectedRange.from === day.date && selectedRange.from === selectedRange.to\"\n              [class.highlighted]=\"!day.disabled && !day.mute && !!highlightedRangeDays.data[day.date]\"\n              [class.highlight-min-date]=\"day.date === highlightedRangeDays.min\"\n              [class.highlight-max-date]=\"day.date === highlightedRangeDays.max\"\n              [class.week-mode]=\"dateMode === 'week'\"\n              [class.disabled]=\"day.disabled\"\n              (click)=\"dayClick(day, week, $event)\"\n              (mouseenter)=\"onMouseEnterDay(day)\">\n            <div class=\"tile-content\">\n              <div class=\"tile-day-label\">\n                {{ day.number }}\n              </div>\n            </div>\n          </td>\n        </ng-container>\n      </tr>\n    </ng-container>\n\n  <!--<tr *ngIf=\"month.weeks.length < 6\">\n    <td colspan=\"7\" class=\"tile\"></td>\n  </tr>-->\n  </tbody>\n</table>\n", styles: [""], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDatePickerCalendarComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'fs-date-picker-calendar',
                    templateUrl: './calendar.component.html',
                    styleUrls: ['./calendar.component.scss'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        'class': 'fs-date-picker-calendar',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { date: [{
                type: Input
            }], period: [{
                type: Input
            }], rangeFrom: [{
                type: Input
            }], rangeTo: [{
                type: Input
            }], highlightStartDate: [{
                type: Input
            }], highlightEndDate: [{
                type: Input
            }], dateMode: [{
                type: Input
            }], disabledDays: [{
                type: Input
            }], drawMonth: [{
                type: Input
            }], seedDate: [{
                type: Input
            }], periodWeeks: [{
                type: Input
            }], hideExtraDays: [{
                type: Input
            }], change: [{
                type: Output
            }], rangeChange: [{
                type: Output
            }], periodChange: [{
                type: Output
            }], hoverDay: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,