import { ChangeDetectorRef, ElementRef, Injector, OnInit } from '@angular/core';
import { ControlValueAccessor, NgControl, ValidatorFn } from '@angular/forms';
import { Observable, Subject } from 'rxjs';
import { FsDatePickerDialogFactory } from '../../../../libs/dialog/services/dialog-factory.service';
import { FsDatePickerDialogRef } from '../../../../libs/dialog/classes/dialog-ref';
import { PickerViewType } from '../../../../libs/common/enums/picker-view-type.enum';
import { RangePickerRef } from '../../../classes/range-picker-ref';
import * as i0 from "@angular/core";
export declare abstract class RangePickerComponent<D = any> implements ControlValueAccessor, OnInit {
    protected _elRef: ElementRef;
    protected _injector: Injector;
    protected _datepickerFactory: FsDatePickerDialogFactory;
    protected _type: any;
    protected _cdRef: ChangeDetectorRef;
    protected _ngControl: NgControl;
    view: PickerViewType;
    minYear: number;
    maxYear: number;
    minDate: Date;
    maxDate: Date;
    clear: boolean;
    format: string;
    disabled: boolean;
    set readonlyState(isReadonly: string);
    ngModelOptions: {
        name?: string;
        standalone?: boolean;
        updateOn?: 'change' | 'blur' | 'submit';
    };
    set timezone(value: string);
    readonly: boolean;
    onChange: any;
    onTouch: any;
    protected _dateDialogRef: FsDatePickerDialogRef;
    protected _pickerRef: RangePickerRef;
    protected _destroy$: Subject<unknown>;
    protected _value: any;
    protected _originValue: Date | null;
    protected _name: any;
    protected _timezone: string;
    private _lastValueValid;
    protected constructor(_elRef: ElementRef, _injector: Injector, _datepickerFactory: FsDatePickerDialogFactory, _type: any, _cdRef: ChangeDetectorRef, _ngControl: NgControl);
    get name(): any;
    get timezone(): string;
    set value(value: any);
    ngOnInit(): void;
    get value(): any;
    get dateDialogRef(): FsDatePickerDialogRef;
    writeValue(value: any): void;
    setDisabledState(isDisabled: boolean): void;
    open(): void;
    /**
     * Set value which was selected in dialog
     * @param value
     */
    updateValueFromDialog(value: Date): void;
    updateValue(value: any): void;
    updateInput(value: any): void;
    _inputKeyup(event: KeyboardEvent, value: string): void;
    _inputChange(value: string, target: any): void;
    inputChange(value: string): void;
    _inputBlur(value: string): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    triggerClick(): void;
    protected _processInputDate(date: Date | null): Date | null;
    protected _getDefaultComponents(): {
        timeStart: boolean;
        calendarStart?: undefined;
        calendarEnd?: undefined;
    } | {
        calendarStart: boolean;
        calendarEnd: boolean;
        timeStart?: undefined;
    };
    protected _enableInput(): void;
    protected _disableInput(): void;
    protected _tzChanged(originDate: Date | null): void;
    protected _listenDialogValueChanges(): void;
    protected _checkValuesEquality(newValue: any, prevValue: any): boolean[];
    /**
     * We need picker start date to be able to limit "Date To" picker
     */
    protected _getPickerStartDate(): false | Date;
    /** The form control validator for whether the input parses. */
    protected _parseValidator: ValidatorFn;
    protected validateDate(date: Date | unknown): void;
    protected _pickerRefUpdates$(target: Observable<Date | null>): Observable<Date | any>;
    static ɵfac: i0.ɵɵFactoryDeclaration<RangePickerComponent<any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<RangePickerComponent<any>, never, never, { "view": "view"; "minYear": "minYear"; "maxYear": "maxYear"; "minDate": "minDate"; "maxDate": "maxDate"; "clear": "clear"; "format": "format"; "readonlyState": "readonly"; "ngModelOptions": "ngModelOptions"; "timezone": "timezone"; }, {}, never>;
}
