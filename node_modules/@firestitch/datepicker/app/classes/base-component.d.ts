import { Renderer2, ElementRef, EventEmitter, OnDestroy, ChangeDetectorRef, OnInit } from '@angular/core';
import { Subject } from 'rxjs';
import { FsDatePickerDialogRef } from '../../libs/dialog/classes/dialog-ref';
import { AbstractControl, ControlValueAccessor, ValidationErrors, Validator, ValidatorFn } from '@angular/forms';
import * as i0 from "@angular/core";
export declare abstract class FsDatePickerBaseComponent<D = any> implements Validator, ControlValueAccessor, OnDestroy, OnInit {
    protected _cdRef: ChangeDetectorRef;
    abstract updateInput(value: Date): void;
    ngModelOptions: {
        name?: string;
        standalone?: boolean;
        updateOn?: 'change' | 'blur' | 'submit';
    };
    set clear(value: boolean);
    set timezone(value: string);
    change$: EventEmitter<Date>;
    selected$: EventEmitter<Date>;
    blured$: EventEmitter<Date>;
    disabled: boolean;
    set readonlyState(isReadonly: string);
    readonly: boolean;
    opened: boolean;
    registerOnChange(fn: (value: any) => any): void;
    registerOnTouched(fn: () => any): void;
    registerOnValidatorChange(fn: () => void): void;
    protected _timezone: string;
    protected _originValue: Date | null;
    protected _value: any;
    protected dialog: any;
    protected elementRef: ElementRef;
    protected renderer: any;
    protected _dateDialogRef: FsDatePickerDialogRef;
    protected _destroy$: Subject<unknown>;
    private _onChange;
    private _onTouch;
    private _validatorOnChange;
    private _clear;
    private _lastValueValid;
    protected constructor(renderer: Renderer2, elementRef: ElementRef, _cdRef: ChangeDetectorRef);
    ngOnInit(): void;
    get el(): any;
    get clear(): boolean;
    get value(): any;
    get timezone(): string;
    set value(value: any);
    writeValue(obj: any): void;
    get dateDialogRef(): FsDatePickerDialogRef;
    cleared(event: any): void;
    ngOnDestroy(): void;
    setDisabledState(isDisabled: boolean): void;
    validate(c: AbstractControl): ValidationErrors | null;
    open(): void;
    clearInput(): void;
    triggerClick(): void;
    protected updateValue(date: any): void;
    protected setReadonly(): void;
    protected close(): void;
    /** The form control validator for whether the input parses. */
    protected _parseValidator: ValidatorFn;
    protected _validator: ValidatorFn | null;
    protected validateDate(date: Date | unknown): void;
    _inputKeyup(event: KeyboardEvent, value: string): void;
    _inputChange(value: string, target: any): void;
    _inputBlur(value: string): void;
    protected inputChange(value: string): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<FsDatePickerBaseComponent<any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<FsDatePickerBaseComponent<any>, never, never, { "ngModelOptions": "ngModelOptions"; "clear": "clear"; "timezone": "timezone"; "readonlyState": "readonly"; }, { "change$": "change"; "selected$": "selected"; "blured$": "blured"; }, never>;
}
