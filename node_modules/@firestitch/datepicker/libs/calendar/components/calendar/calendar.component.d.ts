import { ElementRef, EventEmitter, OnChanges, OnInit } from '@angular/core';
import { IPeriod } from '../../../common/interfaces/period.interface';
import { Month } from '../../models/month';
import { Period } from '../../models/period';
import { Week } from '../../models/week';
import { DayItem } from '../../interfaces/day-item.interface';
import * as i0 from "@angular/core";
export declare class FsDatePickerCalendarComponent implements OnInit, OnChanges {
    element: ElementRef;
    date: Date;
    period: IPeriod;
    rangeFrom: Date;
    rangeTo: Date;
    highlightStartDate: Date;
    highlightEndDate: Date;
    dateMode: string;
    disabledDays: [Date, Date][];
    drawMonth: Date;
    seedDate: any;
    periodWeeks: any;
    hideExtraDays: boolean;
    change: EventEmitter<Date>;
    rangeChange: EventEmitter<Date>;
    periodChange: EventEmitter<IPeriod>;
    hoverDay: EventEmitter<any>;
    selected: any;
    selectedPeriod: Period;
    selectedRange: {
        from?: string;
        to?: string;
    };
    month: Month;
    weekDaysList: any[];
    currentDate: Date;
    today: any;
    highlightedRangeDays: any;
    private _calendarMode;
    constructor(element: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: any): void;
    onMouseEnterDay(day: any): void;
    mouseEnterWeek(week: Week): void;
    mouseLeaveWeek(week: Week): void;
    updateDaysHighlighted(): void;
    createModel(): void;
    setDate(date: any): void;
    /**
     *
     * @param day
     * @param week
     * @param event
     */
    dayClick(day: any, week: any, event: any): void;
    selectDay(day: any): void;
    selectMonthRange(day: DayItem): void;
    selectPeriod(period: Period): void;
    drawMonths(date: any): void;
    createMonth(date: Date): Month;
    static ɵfac: i0.ɵɵFactoryDeclaration<FsDatePickerCalendarComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<FsDatePickerCalendarComponent, "fs-date-picker-calendar", never, { "date": "date"; "period": "period"; "rangeFrom": "rangeFrom"; "rangeTo": "rangeTo"; "highlightStartDate": "highlightStartDate"; "highlightEndDate": "highlightEndDate"; "dateMode": "dateMode"; "disabledDays": "disabledDays"; "drawMonth": "drawMonth"; "seedDate": "seedDate"; "periodWeeks": "periodWeeks"; "hideExtraDays": "hideExtraDays"; }, { "change": "change"; "rangeChange": "rangeChange"; "periodChange": "periodChange"; "hoverDay": "hoverDay"; }, never, never>;
}
