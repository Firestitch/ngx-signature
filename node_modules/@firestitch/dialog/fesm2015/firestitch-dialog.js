import * as i0 from '@angular/core';
import { Component, ChangeDetectionStrategy, Optional, SkipSelf, Input, Injectable, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import * as i1$1 from '@angular/router';
import { NavigationStart, NavigationEnd, RouterModule } from '@angular/router';
import * as i1 from '@angular/material/dialog';
import { MAT_DIALOG_DEFAULT_OPTIONS, MatDialogModule } from '@angular/material/dialog';
import { __awaiter, __rest } from 'tslib';
import { BehaviorSubject, Subject, merge } from 'rxjs';
import { filter, map, take, takeUntil } from 'rxjs/operators';

class FsDialogComponent {
    constructor(_dialogRef) {
        this._dialogRef = _dialogRef;
        this.mobileMode = 'full';
    }
    ngAfterContentInit() {
        const mobileMode = 'fs-dialog-mobile-mode-' + this.mobileMode;
        if (this._dialogRef) {
            const pane = this._dialogRef._overlayRef.overlayElement;
            if (pane) {
                pane.classList.add('fs-dialog-overlay-pane');
                pane.classList.add(mobileMode);
            }
            const backdrop = this._dialogRef._overlayRef.backdropElement;
            if (backdrop) {
                backdrop.classList.add('fs-dialog-overlay-backdrop');
                backdrop.classList.add(mobileMode);
            }
        }
        window.document.body.classList.add('fs-dialog-open', mobileMode);
    }
    ngOnDestroy() {
        window.document.body.classList.remove('fs-dialog-open', `fs-dialog-mobile-mode-${this.mobileMode}`);
    }
}
FsDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDialogComponent, deps: [{ token: i1.MatDialogRef, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Component });
FsDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDialogComponent, selector: "fs-dialog", inputs: { mobileMode: "mobileMode" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDialogComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'fs-dialog',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.MatDialogRef, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }]; }, propDecorators: { mobileMode: [{
                type: Input,
                args: ['mobileMode']
            }] } });

class FsDialogRouter {
    constructor(_router, _dialog) {
        this._router = _router;
        this._dialog = _dialog;
        this._activeDialogs = new WeakMap();
        this._dialogOpened$ = new BehaviorSubject(null);
    }
    openDialogForRoute(component, config) {
        const dialog = this.openDialog(component, config);
        this._registerDialog(component, dialog);
        return dialog;
    }
    navigate(commands, extras) {
        return this._router.navigate(commands, extras);
    }
    openDialog(component, config) {
        const dialog = this._dialog.open(component, config);
        this._registerDialog(component, dialog);
        return dialog;
    }
    dialogRef$(component) {
        return this._dialogOpened$
            .pipe(filter(() => {
            return this._activeDialogs.has(component);
        }), map(() => this._activeDialogs.get(component)));
    }
    _registerDialog(component, ref) {
        if (!this._activeDialogs.has(component)) {
            this._activeDialogs.set(component, ref);
            this._listenDialogClose(component, ref);
            this._dialogOpened$.next();
        }
    }
    _listenDialogClose(component, ref) {
        ref.afterClosed()
            .pipe(take(1))
            .subscribe(() => {
            this._activeDialogs.delete(component);
        });
    }
}
FsDialogRouter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDialogRouter, deps: [{ token: i1$1.Router }, { token: i1.MatDialog }], target: i0.ɵɵFactoryTarget.Injectable });
FsDialogRouter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDialogRouter, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDialogRouter, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1$1.Router }, { type: i1.MatDialog }]; } });

class FsDialogRouteComponent {
    constructor(_route, _router, _dialogRouter, _componentFactory, _viewContainerRef) {
        this._route = _route;
        this._router = _router;
        this._dialogRouter = _dialogRouter;
        this._componentFactory = _componentFactory;
        this._viewContainerRef = _viewContainerRef;
        this._hasActiveNavigation = false;
        this._destroy$ = new Subject();
    }
    ngOnInit() {
        this._listenNavigationEvents();
        this.openDialog();
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
    openDialog() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const dialogConfig = Object.assign({}, (_a = this._route.snapshot.data) === null || _a === void 0 ? void 0 : _a.fsDialog);
            if (dialogConfig === null || dialogConfig === void 0 ? void 0 : dialogConfig.component) {
                if (dialogConfig.component instanceof Promise) {
                    this._dialog = yield this._openLazyDialog(dialogConfig);
                }
                else {
                    this._dialog = this._openDialog(dialogConfig);
                }
                this._listenDialogClose();
            }
        });
    }
    _listenNavigationEvents() {
        this._router.events
            .pipe(filter((event) => {
            return event instanceof NavigationStart;
        }), takeUntil(this._destroy$))
            .subscribe((event) => {
            this._hasActiveNavigation = true;
        });
        this._router.events
            .pipe(filter((event) => {
            return event instanceof NavigationEnd;
        }), takeUntil(this._destroy$))
            .subscribe((event) => {
            this._hasActiveNavigation = false;
        });
    }
    _listenDialogClose() {
        merge(this._dialog.afterClosed())
            .pipe(filter(() => !this._hasActiveNavigation), takeUntil(this._destroy$))
            .subscribe(() => {
            this._navigateOutFromDialog();
        });
    }
    _navigateOutFromDialog() {
        var _a, _b;
        let stepsBack = 1;
        let route = this._route.parent;
        // we are looking for parent route to navigate from current dialog
        // but we have to skip routes like loadChildren or redirectTo
        // because it does not make sence to do navigation to them
        while (route.routeConfig && (route.routeConfig.redirectTo || route.routeConfig.path === '') && route.parent) {
            stepsBack++;
            if (route.routeConfig.path === '' && ((_a = route.parent) === null || _a === void 0 ? void 0 : _a.routeConfig.loadChildren) && ((_b = route.parent) === null || _b === void 0 ? void 0 : _b.parent)) {
                route = route.parent.parent;
            }
            else {
                route = route.parent;
            }
        }
        // make relative navigation path like '../../../';
        const navigationPath = Array
            .from(Array(stepsBack), () => '../')
            .join('');
        // Do it!
        this._router.navigate([navigationPath], { relativeTo: this._route, queryParamsHandling: 'merge' });
    }
    _openLazyDialog(dialogConfig) {
        return __awaiter(this, void 0, void 0, function* () {
            const loadedComponent = yield dialogConfig.component;
            const componentName = Object.keys(loadedComponent)[0];
            if (!componentName) {
                throw Error('Lazy loading dialog component error! Component not found!');
            }
            const factory = this._componentFactory.resolveComponentFactory(loadedComponent[componentName]);
            dialogConfig.component = factory.componentType;
            return this._openDialog(dialogConfig);
        });
    }
    _openDialog(routeDialogConfig) {
        const { component: dialogComponent } = routeDialogConfig, dialogConfig = __rest(routeDialogConfig, ["component"]);
        dialogConfig.viewContainerRef = this._viewContainerRef;
        return this._dialogRouter.openDialogForRoute(dialogComponent, dialogConfig);
    }
}
FsDialogRouteComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDialogRouteComponent, deps: [{ token: i1$1.ActivatedRoute }, { token: i1$1.Router }, { token: FsDialogRouter }, { token: i0.ComponentFactoryResolver }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Component });
FsDialogRouteComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDialogRouteComponent, selector: "ng-component", ngImport: i0, template: '<router-outlet></router-outlet>', isInline: true, directives: [{ type: i1$1.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDialogRouteComponent, decorators: [{
            type: Component,
            args: [{
                    template: '<router-outlet></router-outlet>',
                }]
        }], ctorParameters: function () { return [{ type: i1$1.ActivatedRoute }, { type: i1$1.Router }, { type: FsDialogRouter }, { type: i0.ComponentFactoryResolver }, { type: i0.ViewContainerRef }]; } });

class FsDialogModule {
    static forRoot() {
        return {
            ngModule: FsDialogModule,
            providers: [
                {
                    provide: MAT_DIALOG_DEFAULT_OPTIONS,
                    useValue: {
                        panelClass: 'fs-dialog-overlay-pane',
                        maxWidth: '95vw',
                        disableClose: false,
                        autoFocus: true,
                        hasBackdrop: true
                    }
                },
            ]
        };
    }
}
FsDialogModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
FsDialogModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDialogModule, declarations: [FsDialogComponent,
        FsDialogRouteComponent], imports: [CommonModule,
        RouterModule], exports: [MatDialogModule,
        FsDialogComponent,
        FsDialogRouteComponent] });
FsDialogModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDialogModule, imports: [[
            CommonModule,
            RouterModule,
        ], MatDialogModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDialogModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        RouterModule,
                    ],
                    declarations: [
                        FsDialogComponent,
                        FsDialogRouteComponent,
                    ],
                    exports: [
                        MatDialogModule,
                        FsDialogComponent,
                        FsDialogRouteComponent,
                    ]
                }]
        }] });

class FsDialog {
    constructor(_dialogRouter) {
        this._dialogRouter = _dialogRouter;
    }
    open(component, config) {
        return this._dialogRouter.openDialog(component, config);
    }
    navigate(commands, extras) {
        return this._dialogRouter.navigate(commands, extras);
    }
    dialogRef$(component) {
        return this._dialogRouter.dialogRef$(component);
    }
}
FsDialog.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDialog, deps: [{ token: FsDialogRouter }], target: i0.ɵɵFactoryTarget.Injectable });
FsDialog.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDialog, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDialog, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: FsDialogRouter }]; } });

/*
 * Public API Surface of fs-menu
 */

/**
 * Generated bundle index. Do not edit.
 */

export { FsDialog, FsDialogComponent, FsDialogModule, FsDialogRouteComponent };
//# sourceMappingURL=firestitch-dialog.js.map
