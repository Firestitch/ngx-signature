import { ChangeDetectionStrategy, Component, Input, Optional, SkipSelf } from '@angular/core';
import { MatDialogRef } from '@angular/material/dialog';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
export class FsDialogComponent {
    constructor(_dialogRef) {
        this._dialogRef = _dialogRef;
        this.mobileMode = 'full';
    }
    ngAfterContentInit() {
        const mobileMode = 'fs-dialog-mobile-mode-' + this.mobileMode;
        if (this._dialogRef) {
            const pane = this._dialogRef._overlayRef.overlayElement;
            if (pane) {
                pane.classList.add('fs-dialog-overlay-pane');
                pane.classList.add(mobileMode);
            }
            const backdrop = this._dialogRef._overlayRef.backdropElement;
            if (backdrop) {
                backdrop.classList.add('fs-dialog-overlay-backdrop');
                backdrop.classList.add(mobileMode);
            }
        }
        window.document.body.classList.add('fs-dialog-open', mobileMode);
    }
    ngOnDestroy() {
        window.document.body.classList.remove('fs-dialog-open', `fs-dialog-mobile-mode-${this.mobileMode}`);
    }
}
FsDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDialogComponent, deps: [{ token: i1.MatDialogRef, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Component });
FsDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDialogComponent, selector: "fs-dialog", inputs: { mobileMode: "mobileMode" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDialogComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'fs-dialog',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.MatDialogRef, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }]; }, propDecorators: { mobileMode: [{
                type: Input,
                args: ['mobileMode']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnMtZGlhbG9nLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hcHAvY29tcG9uZW50cy9mcy1kaWFsb2cvZnMtZGlhbG9nLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxLQUFLLEVBRUwsUUFBUSxFQUNSLFFBQVEsRUFDVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7OztBQU94RCxNQUFNLE9BQU8saUJBQWlCO0lBSTVCLFlBQTRDLFVBQTZCO1FBQTdCLGVBQVUsR0FBVixVQUFVLENBQW1CO1FBRnBELGVBQVUsR0FBRyxNQUFNLENBQUM7SUFFbUMsQ0FBQztJQUU3RSxrQkFBa0I7UUFFaEIsTUFBTSxVQUFVLEdBQUcsd0JBQXdCLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUU5RCxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDbkIsTUFBTSxJQUFJLEdBQVMsSUFBSSxDQUFDLFVBQVcsQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDO1lBRS9ELElBQUksSUFBSSxFQUFFO2dCQUNSLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLENBQUM7Z0JBQzdDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQ2hDO1lBRUQsTUFBTSxRQUFRLEdBQVMsSUFBSSxDQUFDLFVBQVcsQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDO1lBRXBFLElBQUksUUFBUSxFQUFFO2dCQUNaLFFBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLDRCQUE0QixDQUFDLENBQUM7Z0JBQ3JELFFBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQ3BDO1NBQ0Y7UUFFSyxNQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFRCxXQUFXO1FBQ0gsTUFBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSx5QkFBeUIsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7SUFDN0csQ0FBQzs7K0dBL0JVLGlCQUFpQjttR0FBakIsaUJBQWlCLHVGQUhsQiwyQkFBMkI7NEZBRzFCLGlCQUFpQjtrQkFMN0IsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsV0FBVztvQkFDckIsUUFBUSxFQUFFLDJCQUEyQjtvQkFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEOzswQkFLYyxRQUFROzswQkFBSSxRQUFROzRDQUZaLFVBQVU7c0JBQTlCLEtBQUs7dUJBQUMsWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyQ29udGVudEluaXQsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIElucHV0LFxuICBPbkRlc3Ryb3ksXG4gIE9wdGlvbmFsLFxuICBTa2lwU2VsZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdERpYWxvZ1JlZiB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2RpYWxvZyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2ZzLWRpYWxvZycsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBGc0RpYWxvZ0NvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG5cbiAgQElucHV0KCdtb2JpbGVNb2RlJykgbW9iaWxlTW9kZSA9ICdmdWxsJztcblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBAU2tpcFNlbGYoKSBwcml2YXRlIF9kaWFsb2dSZWY6IE1hdERpYWxvZ1JlZjxhbnk+KSB7fVxuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcblxuICAgIGNvbnN0IG1vYmlsZU1vZGUgPSAnZnMtZGlhbG9nLW1vYmlsZS1tb2RlLScgKyB0aGlzLm1vYmlsZU1vZGU7XG5cbiAgICBpZiAodGhpcy5fZGlhbG9nUmVmKSB7XG4gICAgICBjb25zdCBwYW5lID0gKDxhbnk+dGhpcy5fZGlhbG9nUmVmKS5fb3ZlcmxheVJlZi5vdmVybGF5RWxlbWVudDtcblxuICAgICAgaWYgKHBhbmUpIHtcbiAgICAgICAgcGFuZS5jbGFzc0xpc3QuYWRkKCdmcy1kaWFsb2ctb3ZlcmxheS1wYW5lJyk7XG4gICAgICAgIHBhbmUuY2xhc3NMaXN0LmFkZChtb2JpbGVNb2RlKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgYmFja2Ryb3AgPSAoPGFueT50aGlzLl9kaWFsb2dSZWYpLl9vdmVybGF5UmVmLmJhY2tkcm9wRWxlbWVudDtcblxuICAgICAgaWYgKGJhY2tkcm9wKSB7XG4gICAgICAgIGJhY2tkcm9wLmNsYXNzTGlzdC5hZGQoJ2ZzLWRpYWxvZy1vdmVybGF5LWJhY2tkcm9wJyk7XG4gICAgICAgIGJhY2tkcm9wLmNsYXNzTGlzdC5hZGQobW9iaWxlTW9kZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgKDxhbnk+d2luZG93KS5kb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ2ZzLWRpYWxvZy1vcGVuJywgbW9iaWxlTW9kZSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICAoPGFueT53aW5kb3cpLmRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnZnMtZGlhbG9nLW9wZW4nLCBgZnMtZGlhbG9nLW1vYmlsZS1tb2RlLSR7dGhpcy5tb2JpbGVNb2RlfWApO1xuICB9XG59XG4iXX0=