import { __awaiter, __rest } from "tslib";
import { Component, ComponentFactoryResolver, ViewContainerRef } from '@angular/core';
import { ActivatedRoute, NavigationEnd, NavigationStart, Router } from '@angular/router';
import { merge, Subject } from 'rxjs';
import { filter, takeUntil } from 'rxjs/operators';
import { FsDialogRouter } from '../../serivces/fs-dialog-router';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../../serivces/fs-dialog-router";
export class FsDialogRouteComponent {
    constructor(_route, _router, _dialogRouter, _componentFactory, _viewContainerRef) {
        this._route = _route;
        this._router = _router;
        this._dialogRouter = _dialogRouter;
        this._componentFactory = _componentFactory;
        this._viewContainerRef = _viewContainerRef;
        this._hasActiveNavigation = false;
        this._destroy$ = new Subject();
    }
    ngOnInit() {
        this._listenNavigationEvents();
        this.openDialog();
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
    openDialog() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const dialogConfig = Object.assign({}, (_a = this._route.snapshot.data) === null || _a === void 0 ? void 0 : _a.fsDialog);
            if (dialogConfig === null || dialogConfig === void 0 ? void 0 : dialogConfig.component) {
                if (dialogConfig.component instanceof Promise) {
                    this._dialog = yield this._openLazyDialog(dialogConfig);
                }
                else {
                    this._dialog = this._openDialog(dialogConfig);
                }
                this._listenDialogClose();
            }
        });
    }
    _listenNavigationEvents() {
        this._router.events
            .pipe(filter((event) => {
            return event instanceof NavigationStart;
        }), takeUntil(this._destroy$))
            .subscribe((event) => {
            this._hasActiveNavigation = true;
        });
        this._router.events
            .pipe(filter((event) => {
            return event instanceof NavigationEnd;
        }), takeUntil(this._destroy$))
            .subscribe((event) => {
            this._hasActiveNavigation = false;
        });
    }
    _listenDialogClose() {
        merge(this._dialog.afterClosed())
            .pipe(filter(() => !this._hasActiveNavigation), takeUntil(this._destroy$))
            .subscribe(() => {
            this._navigateOutFromDialog();
        });
    }
    _navigateOutFromDialog() {
        var _a, _b;
        let stepsBack = 1;
        let route = this._route.parent;
        // we are looking for parent route to navigate from current dialog
        // but we have to skip routes like loadChildren or redirectTo
        // because it does not make sence to do navigation to them
        while (route.routeConfig && (route.routeConfig.redirectTo || route.routeConfig.path === '') && route.parent) {
            stepsBack++;
            if (route.routeConfig.path === '' && ((_a = route.parent) === null || _a === void 0 ? void 0 : _a.routeConfig.loadChildren) && ((_b = route.parent) === null || _b === void 0 ? void 0 : _b.parent)) {
                route = route.parent.parent;
            }
            else {
                route = route.parent;
            }
        }
        // make relative navigation path like '../../../';
        const navigationPath = Array
            .from(Array(stepsBack), () => '../')
            .join('');
        // Do it!
        this._router.navigate([navigationPath], { relativeTo: this._route, queryParamsHandling: 'merge' });
    }
    _openLazyDialog(dialogConfig) {
        return __awaiter(this, void 0, void 0, function* () {
            const loadedComponent = yield dialogConfig.component;
            const componentName = Object.keys(loadedComponent)[0];
            if (!componentName) {
                throw Error('Lazy loading dialog component error! Component not found!');
            }
            const factory = this._componentFactory.resolveComponentFactory(loadedComponent[componentName]);
            dialogConfig.component = factory.componentType;
            return this._openDialog(dialogConfig);
        });
    }
    _openDialog(routeDialogConfig) {
        const { component: dialogComponent } = routeDialogConfig, dialogConfig = __rest(routeDialogConfig, ["component"]);
        dialogConfig.viewContainerRef = this._viewContainerRef;
        return this._dialogRouter.openDialogForRoute(dialogComponent, dialogConfig);
    }
}
FsDialogRouteComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDialogRouteComponent, deps: [{ token: i1.ActivatedRoute }, { token: i1.Router }, { token: i2.FsDialogRouter }, { token: i0.ComponentFactoryResolver }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Component });
FsDialogRouteComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDialogRouteComponent, selector: "ng-component", ngImport: i0, template: '<router-outlet></router-outlet>', isInline: true, directives: [{ type: i1.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDialogRouteComponent, decorators: [{
            type: Component,
            args: [{
                    template: '<router-outlet></router-outlet>',
                }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i1.Router }, { type: i2.FsDialogRouter }, { type: i0.ComponentFactoryResolver }, { type: i0.ViewContainerRef }]; } });
//# sourceMappingURL=data:application/json;base64,