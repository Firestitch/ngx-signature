import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { MatDialog } from '@angular/material/dialog';
import { BehaviorSubject } from 'rxjs';
import { filter, map, take } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@angular/material/dialog";
export class FsDialogRouter {
    constructor(_router, _dialog) {
        this._router = _router;
        this._dialog = _dialog;
        this._activeDialogs = new WeakMap();
        this._dialogOpened$ = new BehaviorSubject(null);
    }
    openDialogForRoute(component, config) {
        const dialog = this.openDialog(component, config);
        this._registerDialog(component, dialog);
        return dialog;
    }
    navigate(commands, extras) {
        return this._router.navigate(commands, extras);
    }
    openDialog(component, config) {
        const dialog = this._dialog.open(component, config);
        this._registerDialog(component, dialog);
        return dialog;
    }
    dialogRef$(component) {
        return this._dialogOpened$
            .pipe(filter(() => {
            return this._activeDialogs.has(component);
        }), map(() => this._activeDialogs.get(component)));
    }
    _registerDialog(component, ref) {
        if (!this._activeDialogs.has(component)) {
            this._activeDialogs.set(component, ref);
            this._listenDialogClose(component, ref);
            this._dialogOpened$.next();
        }
    }
    _listenDialogClose(component, ref) {
        ref.afterClosed()
            .pipe(take(1))
            .subscribe(() => {
            this._activeDialogs.delete(component);
        });
    }
}
FsDialogRouter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDialogRouter, deps: [{ token: i1.Router }, { token: i2.MatDialog }], target: i0.ɵɵFactoryTarget.Injectable });
FsDialogRouter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDialogRouter, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDialogRouter, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i2.MatDialog }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnMtZGlhbG9nLXJvdXRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcHAvc2VyaXZjZXMvZnMtZGlhbG9nLXJvdXRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFRLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBb0IsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFM0QsT0FBTyxFQUFFLFNBQVMsRUFBaUMsTUFBTSwwQkFBMEIsQ0FBQztBQUlwRixPQUFPLEVBQUUsZUFBZSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7O0FBTW5ELE1BQU0sT0FBTyxjQUFjO0lBTXpCLFlBQ1UsT0FBZSxFQUNmLE9BQWtCO1FBRGxCLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFDZixZQUFPLEdBQVAsT0FBTyxDQUFXO1FBTnBCLG1CQUFjLEdBQThDLElBQUksT0FBTyxFQUFFLENBQUM7UUFFMUUsbUJBQWMsR0FBRyxJQUFJLGVBQWUsQ0FBTyxJQUFJLENBQUMsQ0FBQztJQU16RCxDQUFDO0lBRU0sa0JBQWtCLENBQ3ZCLFNBQWlDLEVBQ2pDLE1BQWdDO1FBRWhDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRWxELElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRXhDLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxRQUFRLENBQUMsUUFBZSxFQUFFLE1BQXlCO1FBQ3hELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFTSxVQUFVLENBQXNCLFNBQTJCLEVBQUUsTUFBMkI7UUFDN0YsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQVUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRTdELElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRXhDLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxVQUFVLENBQUMsU0FBb0I7UUFDcEMsT0FBTyxJQUFJLENBQUMsY0FBYzthQUN2QixJQUFJLENBQ0gsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUNWLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDNUMsQ0FBQyxDQUFDLEVBQ0YsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQzlDLENBQUM7SUFDTixDQUFDO0lBRU8sZUFBZSxDQUFDLFNBQW9CLEVBQUUsR0FBbUM7UUFDL0UsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ3ZDLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUV4QyxJQUFJLENBQUMsa0JBQWtCLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBRXhDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDNUI7SUFDSCxDQUFDO0lBRU8sa0JBQWtCLENBQUMsU0FBb0IsRUFBRSxHQUFtQztRQUNsRixHQUFHLENBQUMsV0FBVyxFQUFFO2FBQ2QsSUFBSSxDQUNILElBQUksQ0FBQyxDQUFDLENBQUMsQ0FDUjthQUNBLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDZCxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN4QyxDQUFDLENBQUMsQ0FBQTtJQUVOLENBQUM7OzRHQWhFVSxjQUFjO2dIQUFkLGNBQWMsY0FGYixNQUFNOzRGQUVQLGNBQWM7a0JBSDFCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmF2aWdhdGlvbkV4dHJhcywgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcblxuaW1wb3J0IHsgTWF0RGlhbG9nLCBNYXREaWFsb2dDb25maWcsIE1hdERpYWxvZ1JlZiB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2RpYWxvZyc7XG5cbmltcG9ydCB7IENvbXBvbmVudFR5cGUgfSBmcm9tICdAYW5ndWxhci9jZGsvcG9ydGFsJztcblxuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCwgdGFrZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgRnNEaWFsb2dSb3V0ZXIge1xuXG4gIHByaXZhdGUgX2FjdGl2ZURpYWxvZ3M6IFdlYWtNYXA8VHlwZTxhbnk+LCBNYXREaWFsb2dSZWY8dW5rbm93bj4+ID0gbmV3IFdlYWtNYXAoKTtcblxuICBwcml2YXRlIF9kaWFsb2dPcGVuZWQkID0gbmV3IEJlaGF2aW9yU3ViamVjdDx2b2lkPihudWxsKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIF9yb3V0ZXI6IFJvdXRlcixcbiAgICBwcml2YXRlIF9kaWFsb2c6IE1hdERpYWxvZyxcbiAgKSB7XG4gIH1cblxuICBwdWJsaWMgb3BlbkRpYWxvZ0ZvclJvdXRlKFxuICAgIGNvbXBvbmVudDogQ29tcG9uZW50VHlwZTx1bmtub3duPixcbiAgICBjb25maWc6IE1hdERpYWxvZ0NvbmZpZzx1bmtub3duPixcbiAgKTogTWF0RGlhbG9nUmVmPHVua25vd24sIHVua25vd24+IHtcbiAgICBjb25zdCBkaWFsb2cgPSB0aGlzLm9wZW5EaWFsb2coY29tcG9uZW50LCBjb25maWcpO1xuXG4gICAgdGhpcy5fcmVnaXN0ZXJEaWFsb2coY29tcG9uZW50LCBkaWFsb2cpO1xuXG4gICAgcmV0dXJuIGRpYWxvZztcbiAgfVxuXG4gIHB1YmxpYyBuYXZpZ2F0ZShjb21tYW5kczogYW55W10sIGV4dHJhcz86IE5hdmlnYXRpb25FeHRyYXMpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5fcm91dGVyLm5hdmlnYXRlKGNvbW1hbmRzLCBleHRyYXMpO1xuICB9XG5cbiAgcHVibGljIG9wZW5EaWFsb2c8VCwgRCA9IGFueSwgUiA9IGFueT4oY29tcG9uZW50OiBDb21wb25lbnRUeXBlPFQ+LCBjb25maWc/OiBNYXREaWFsb2dDb25maWc8RD4pOiBNYXREaWFsb2dSZWY8VCwgUj4ge1xuICAgIGNvbnN0IGRpYWxvZyA9IHRoaXMuX2RpYWxvZy5vcGVuPFQsIEQsIFI+KGNvbXBvbmVudCwgY29uZmlnKTtcblxuICAgIHRoaXMuX3JlZ2lzdGVyRGlhbG9nKGNvbXBvbmVudCwgZGlhbG9nKTtcblxuICAgIHJldHVybiBkaWFsb2c7XG4gIH1cblxuICBwdWJsaWMgZGlhbG9nUmVmJChjb21wb25lbnQ6IFR5cGU8YW55Pik6IE9ic2VydmFibGU8TWF0RGlhbG9nUmVmPGFueT4+IHtcbiAgICByZXR1cm4gdGhpcy5fZGlhbG9nT3BlbmVkJFxuICAgICAgLnBpcGUoXG4gICAgICAgIGZpbHRlcigoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZURpYWxvZ3MuaGFzKGNvbXBvbmVudCk7XG4gICAgICAgIH0pLFxuICAgICAgICBtYXAoKCkgPT4gdGhpcy5fYWN0aXZlRGlhbG9ncy5nZXQoY29tcG9uZW50KSksXG4gICAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVnaXN0ZXJEaWFsb2coY29tcG9uZW50OiBUeXBlPGFueT4sIHJlZjogTWF0RGlhbG9nUmVmPHVua25vd24sIHVua25vd24+KTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLl9hY3RpdmVEaWFsb2dzLmhhcyhjb21wb25lbnQpKSB7XG4gICAgICB0aGlzLl9hY3RpdmVEaWFsb2dzLnNldChjb21wb25lbnQsIHJlZik7XG5cbiAgICAgIHRoaXMuX2xpc3RlbkRpYWxvZ0Nsb3NlKGNvbXBvbmVudCwgcmVmKTtcblxuICAgICAgdGhpcy5fZGlhbG9nT3BlbmVkJC5uZXh0KCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfbGlzdGVuRGlhbG9nQ2xvc2UoY29tcG9uZW50OiBUeXBlPGFueT4sIHJlZjogTWF0RGlhbG9nUmVmPHVua25vd24sIHVua25vd24+KTogdm9pZCB7XG4gICAgcmVmLmFmdGVyQ2xvc2VkKClcbiAgICAgIC5waXBlKFxuICAgICAgICB0YWtlKDEpXG4gICAgICApXG4gICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgdGhpcy5fYWN0aXZlRGlhbG9ncy5kZWxldGUoY29tcG9uZW50KTtcbiAgICAgIH0pXG5cbiAgfVxufVxuIl19