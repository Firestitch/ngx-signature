import * as i0 from '@angular/core';
import { Directive, forwardRef, TemplateRef, Component, ChangeDetectionStrategy, ContentChild, ViewChild, Input, HostBinding, NgModule } from '@angular/core';
import * as i1 from '@angular/common';
import { CommonModule } from '@angular/common';
import { Subject, fromEvent, merge } from 'rxjs';
import { tap, filter, takeUntil } from 'rxjs/operators';
import { NG_VALUE_ACCESSOR } from '@angular/forms';

class ScrollPickerTemplateComponent {
}
ScrollPickerTemplateComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ScrollPickerTemplateComponent, deps: [], target: i0.ɵɵFactoryTarget.Directive });
ScrollPickerTemplateComponent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ScrollPickerTemplateComponent, selector: "[fs-scroll-picker-template]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ScrollPickerTemplateComponent, decorators: [{
            type: Directive,
            args: [{
                    selector: '[fs-scroll-picker-template]'
                }]
        }] });

class ScrollPickerComponent {
    constructor(_cdRef) {
        this._cdRef = _cdRef;
        this.values = [];
        this.displayValues = [];
        this.hideCursor = false;
        this._wheelDelta = 0;
        this._touchDelta = 0;
        this._mouseDelta = 0;
        this._touchY = 0;
        this._mouseY = 0;
        this._destroy$ = new Subject();
        this._onTouched = () => { };
        this._onChange = (value) => { };
    }
    ngOnInit() {
        this.valuesEl = this.scrollContainer.nativeElement.querySelector('.values');
        this.updateValues();
        fromEvent(this.scrollContainer.nativeElement, 'wheel')
            .pipe(tap((event) => {
            event.preventDefault();
            event.stopPropagation();
        }), filter((event) => {
            this._wheelDelta += Math.abs(event.wheelDeltaY);
            return this._wheelDelta > ScrollPickerComponent.maxDelta;
        }), takeUntil(this._destroy$))
            .subscribe((event) => {
            this._wheelDelta = 0;
            this.scroll(event);
        });
        merge(fromEvent(this.scrollContainer.nativeElement, 'touchstart'))
            .pipe(takeUntil(this._destroy$))
            .subscribe((event) => {
            this.touchStart(event);
        });
        merge(fromEvent(this.scrollContainer.nativeElement, 'mousedown'))
            .pipe(takeUntil(this._destroy$))
            .subscribe((event) => {
            this.mouseStart(event);
        });
    }
    ngOnChanges(changes) {
        var _a, _b;
        if (((_a = changes.valuesMin) === null || _a === void 0 ? void 0 : _a.firstChange) === false || ((_b = changes.valuesMax) === null || _b === void 0 ? void 0 : _b.firstChange) === false) {
            if (this.valuesMin !== undefined && this.valuesMax !== undefined) {
                this.updateValues();
                this.updateIndex(this.getValueIndex());
            }
        }
    }
    updateValues() {
        if (this.valuesMin !== undefined && this.valuesMax !== undefined) {
            this.values = [];
            for (let i = this.valuesMin; i <= this.valuesMax; i++) {
                this.values.push({ name: i, value: i });
            }
        }
    }
    writeValue(value) {
        this.value = value;
        let index = this.getValueIndex();
        index = index === -1 ? 0 : index;
        this.updateIndex(index);
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    touchStart(event) {
        event.preventDefault();
        this._touchY = event.targetTouches[0].pageY;
        this._touchDestroy$ = new Subject();
        merge(fromEvent(document, 'touchmove'))
            .pipe(filter((event) => {
            this._touchDelta += event.targetTouches[0].pageY - this._touchY;
            this._touchY = event.targetTouches[0].pageY;
            return Math.abs(this._touchDelta) > ScrollPickerComponent.maxDelta;
        }), takeUntil(this._touchDestroy$), takeUntil(this._destroy$))
            .subscribe((event) => {
            this.touchMove();
            this._touchDelta = 0;
        });
        merge(fromEvent(document, 'touchend'), fromEvent(document, 'touchcancel'))
            .pipe(takeUntil(this._touchDestroy$), takeUntil(this._destroy$))
            .subscribe(() => {
            this._touchDestroy$.next();
            this._touchDestroy$.complete();
            this._touchDestroy$ = null;
        });
    }
    mouseStart(event) {
        event.preventDefault();
        this._mouseY = event.pageY;
        this._mouseDestroy$ = new Subject();
        merge(fromEvent(document, 'mousemove'))
            .pipe(filter((event) => {
            this._mouseDelta += event.pageY - this._mouseY;
            this._mouseY = event.pageY;
            return Math.abs(this._mouseDelta) > ScrollPickerComponent.maxDelta;
        }), takeUntil(this._mouseDestroy$), takeUntil(this._destroy$))
            .subscribe(() => {
            this.mouseMove();
            this._mouseDelta = 0;
        });
        merge(fromEvent(document, 'mouseup'))
            .pipe(takeUntil(this._mouseDestroy$), takeUntil(this._destroy$))
            .subscribe(() => {
            this._mouseDestroy$.next();
            this._mouseDestroy$.complete();
            this._mouseDestroy$ = null;
        });
    }
    mouseMove() {
        if (this._mouseDelta < 0) {
            this.next();
        }
        else {
            this.prev();
        }
    }
    touchMove() {
        if (this._touchDelta < 0) {
            this.next();
        }
        else {
            this.prev();
        }
    }
    scroll(event) {
        if (event.deltaY > 0) {
            this.next();
        }
        else {
            this.prev();
        }
    }
    prev() {
        let index = this.getValueIndex();
        if (index === 0) {
            index = this.values.length;
        }
        index--;
        this.updateIndex(index);
    }
    next() {
        let index = this.getValueIndex();
        if (index === (this.values.length - 1)) {
            index = -1;
        }
        index++;
        this.updateIndex(index);
    }
    getValueIndex() {
        return this.values.findIndex((item) => {
            return this.value === item.value;
        });
    }
    updateIndex(index) {
        if (!this.values[index]) {
            index = 0;
        }
        this.value = this.values[index] ? this.values[index].value : null;
        this._onChange(this.value);
        let start = index - 3;
        let end = index + 4;
        this.displayValues = [];
        if (start < 0) {
            this.displayValues = [
                ...this.values.slice(start),
                ...this.values.slice(0, end),
            ];
        }
        else if (end > (this.values.length - 1)) {
            end = this.values.length - end;
            this.displayValues = [
                ...this.values.slice(start),
                ...this.values.slice(0, end),
            ];
        }
        else {
            this.displayValues = [
                ...this.values.slice(start, end),
            ];
        }
        this._cdRef.markForCheck();
    }
    valueClick(index) {
        if (index > 0) {
            for (let i = 0; i < Math.abs(index); i++) {
                this.next();
            }
        }
        else {
            for (let i = 0; i < Math.abs(index); i++) {
                this.prev();
            }
        }
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
}
ScrollPickerComponent.maxDelta = 13;
ScrollPickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ScrollPickerComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
ScrollPickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ScrollPickerComponent, selector: "fs-scroll-picker", inputs: { values: "values", valuesMin: "valuesMin", valuesMax: "valuesMax", width: "width" }, host: { properties: { "style.width": "this.width" } }, providers: [{
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => ScrollPickerComponent),
            multi: true
        }], queries: [{ propertyName: "template", first: true, predicate: ScrollPickerTemplateComponent, descendants: true, read: TemplateRef }], viewQueries: [{ propertyName: "scrollContainer", first: true, predicate: ["scrollContainer"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: "<div \n    class=\"scroll-container\" \n    #scrollContainer>\n  <div class=\"top\"></div>\n  <div class=\"bottom\"></div>\n  <div class=\"scroller\">\n      <div class=\"values\">\n        <div \n            class=\"value value1\" \n            (click)=\"valueClick(-3)\"\n            [ngStyle]=\"{ transform: 'rotateX(67.5deg) translateZ(90px) translate3d(0px, 0px, 0px)' }\">\n          {{displayValues[0]?.name}}\n        </div>\n        <div \n            class=\"value value1\" \n            (click)=\"valueClick(-2)\"\n            [ngStyle]=\"{ transform: 'rotateX(45deg) translateZ(90px) translate3d(0px, 0px, 0px)' }\">\n          {{displayValues[1]?.name}}\n        </div>\n        <div \n            class=\"value value1\" \n            (click)=\"valueClick(-1)\"\n            [ngStyle]=\"{ transform: 'rotateX(22.5deg) translateZ(90px) translate3d(0px, 0px, 0px)' }\">\n          {{displayValues[2]?.name}}\n        </div>\n        <div \n            class=\"value value1\" \n            [ngStyle]=\"{ transform: 'rotateX(0deg) translateZ(90px) translate3d(0px, 0px, 0px)' }\">\n          {{displayValues[3]?.name}}\n        </div>\n        <div \n            class=\"value value1\" \n            (click)=\"valueClick(1)\"\n            [ngStyle]=\"{ transform: 'rotateX(-22.5deg) translateZ(90px) translate3d(0px, 0px, 0px)' }\">\n          {{displayValues[4]?.name}}\n        </div>\n        <div \n            class=\"value value1\" \n            (click)=\"valueClick(2)\"\n            [ngStyle]=\"{ transform: 'rotateX(-45deg) translateZ(90px) translate3d(0px, 0px, 0px)' }\">\n          {{displayValues[5]?.name}}\n        </div>\n        <div \n            class=\"value value1\" \n            (click)=\"valueClick(3)\"\n            [ngStyle]=\"{ transform: 'rotateX(-67.5deg) translateZ(90px) translate3d(0px, 0px, 0px)' }\">\n          {{displayValues[6]?.name}}\n        </div>\n      </div>\n  </div>\n</div>\n", styles: [".scroll-container,.scroll-container *{box-sizing:border-box}.scroll-container{text-align:center;position:relative;height:180px;line-height:30px;width:100%;font-size:20px;cursor:pointer}.scroller{transition:transform .1s ease;transform:translateZ(-90px) rotateX(0);transform-style:preserve-3d;height:100%;padding:75px 0;position:relative}.scroller .values{position:relative}.scroller .value{position:absolute;backface-visibility:hidden;-webkit-backface-visibility:hidden;width:100%;color:#000;transform-origin:50% 50%;transform-style:preserve-3d;visibility:visible;z-index:0;transition:transform 40ms ease 0s}.top,.bottom{height:75px}.top{top:0;position:absolute;background:rgba(255,255,255,.6);z-index:2;width:100%;transform:translateZ(0);border-bottom:1px solid #e2e2e2;pointer-events:none}.bottom{position:absolute;bottom:0;z-index:2;background:rgba(255,255,255,.6);border-top:1px solid #e2e2e2;width:100%;transform:translateZ(0);pointer-events:none}.beginning{border-top:1px solid black}\n"], directives: [{ type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ScrollPickerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'fs-scroll-picker',
                    templateUrl: './scroll-picker.component.html',
                    styleUrls: ['./scroll-picker.component.scss'],
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => ScrollPickerComponent),
                            multi: true
                        }],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { template: [{
                type: ContentChild,
                args: [ScrollPickerTemplateComponent, { read: TemplateRef }]
            }], scrollContainer: [{
                type: ViewChild,
                args: ['scrollContainer', { static: true }]
            }], values: [{
                type: Input
            }], valuesMin: [{
                type: Input
            }], valuesMax: [{
                type: Input
            }], width: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['style.width']
            }] } });

class FsScrollPickerModule {
}
FsScrollPickerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsScrollPickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
FsScrollPickerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsScrollPickerModule, declarations: [ScrollPickerComponent,
        ScrollPickerTemplateComponent], imports: [CommonModule], exports: [ScrollPickerComponent,
        ScrollPickerTemplateComponent] });
FsScrollPickerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsScrollPickerModule, imports: [[
            CommonModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsScrollPickerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                    ],
                    exports: [
                        ScrollPickerComponent,
                        ScrollPickerTemplateComponent
                    ],
                    declarations: [
                        ScrollPickerComponent,
                        ScrollPickerTemplateComponent
                    ],
                }]
        }] });

/*
 * Public API Surface of fs-menu
 */

/**
 * Generated bundle index. Do not edit.
 */

export { FsScrollPickerModule, ScrollPickerComponent, ScrollPickerTemplateComponent };
//# sourceMappingURL=firestitch-scroll-picker.js.map
