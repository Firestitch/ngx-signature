import { ElementRef, Renderer2, Injector, OnInit, OnDestroy, AfterContentInit } from '@angular/core';
import { NgControl, AbstractControl, ValidationErrors } from '@angular/forms';
import { Observable, Subject } from 'rxjs';
import { FsFormDirective } from '../form/form.directive';
import * as i0 from "@angular/core";
export interface FsControlDirective {
    validate?(control: AbstractControl): ValidationErrors | null;
    validateAsync?(control: AbstractControl): Promise<ValidationErrors | null> | Observable<ValidationErrors | null>;
}
export declare class FsControlDirective implements OnInit, AfterContentInit, OnDestroy {
    protected elementRef: ElementRef;
    protected renderer2: Renderer2;
    protected injector: Injector;
    protected _validateMessages: any;
    protected ngControl: NgControl;
    private formDirective;
    wrapperSelector: string | false;
    messageSelector: string | false;
    hintSelector: string | false;
    labelSelector: string | false;
    appendMessageClass: string;
    appendLabelClass: string;
    appendErrorClass: string;
    appendHintClass: string;
    set validateMessages(messages: Record<string, string>);
    errors: any[];
    protected _destroy$: Subject<unknown>;
    protected _control: AbstractControl;
    constructor(elementRef: ElementRef, renderer2: Renderer2, injector: Injector, _validateMessages: any, ngControl: NgControl, formDirective: FsFormDirective);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterContentInit(): void;
    protected getMessageSelector(): string;
    protected getHintWrapperSelector(): string;
    protected getWrapperSelector(): string;
    protected getlabelSelector(): string;
    protected getWrapperElement(): any;
    protected render(): void;
    protected getWrapper(node: any, count?: number): any;
    protected parseErrorMessage(message: any, args: any): string;
    protected getError(controlRef: any): {
        name: string;
        message: string;
    };
    private _setupValidators;
    static ɵfac: i0.ɵɵFactoryDeclaration<FsControlDirective, [null, null, null, { self: true; }, { optional: true; }, { optional: true; }]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<FsControlDirective, "[fsFormControl]", never, { "wrapperSelector": "wrapperSelector"; "messageSelector": "messageSelector"; "hintSelector": "hintSelector"; "labelSelector": "labelSelector"; "appendMessageClass": "appendMessageClass"; "appendLabelClass": "appendLabelClass"; "appendErrorClass": "appendErrorClass"; "appendHintClass": "appendHintClass"; "validateMessages": "validateMessages"; }, {}, never>;
}
