import { AfterContentInit, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, QueryList, SimpleChanges } from '@angular/core';
import { NgForm } from '@angular/forms';
import { MatDialogRef } from '@angular/material/dialog';
import { MatTabGroup } from '@angular/material/tabs';
import { FsMessage } from '@firestitch/message';
import { FsPrompt } from '@firestitch/prompt';
import { DrawerRef } from '@firestitch/drawer';
import { Observable } from 'rxjs';
import { FsFormDialogCloseDirective } from '../form-dialog-close.directive';
import { FsSubmitButtonDirective } from '../submit-button.directive';
import { ConfirmConfig } from './../../interfaces';
import { ConfirmResult } from './../../enums/confirm-result';
import { FsForm } from '../../services/fsform.service';
import { SubmitEvent } from './../../interfaces/submit-event';
import * as i0 from "@angular/core";
export declare class FsFormDirective implements OnInit, OnDestroy, AfterContentInit, OnChanges {
    ngForm: NgForm;
    private _form;
    private _element;
    private _message;
    private _prompt;
    private _ngZone;
    private _dialogRef;
    private _drawerRef;
    wrapperSelector: string;
    messageSelector: string;
    hintSelector: string;
    labelSelector: string;
    autocomplete: boolean;
    shortcuts: boolean;
    confirm: ConfirmConfig | boolean;
    confirmDialog: boolean;
    confirmDrawer: boolean;
    confirmBrowser: boolean;
    confirmTabs: boolean;
    dirtySubmitButton: boolean;
    submit: (event: SubmitEvent) => Observable<any>;
    successDelay: number;
    errorDelay: number;
    tabGroup: MatTabGroup;
    submitEvent: EventEmitter<SubmitEvent>;
    invalid: EventEmitter<SubmitEvent>;
    valid: EventEmitter<SubmitEvent>;
    submitted: EventEmitter<SubmitEvent>;
    reseted: EventEmitter<SubmitEvent>;
    cleared: EventEmitter<SubmitEvent>;
    fsformClass: boolean;
    formDialogClose: QueryList<FsFormDialogCloseDirective>;
    private _tabGroups;
    private _submitButtons;
    private _registerControl;
    private _activeSubmitButton;
    private _dialogBackdropEscape;
    private _snapshot;
    private _status$;
    private _destroy$;
    constructor(ngForm: NgForm, _form: FsForm, _element: ElementRef, _message: FsMessage, _prompt: FsPrompt, _ngZone: NgZone, _dialogRef: MatDialogRef<any>, _drawerRef: DrawerRef<any>);
    get submitting(): boolean;
    get completing(): boolean;
    private get _submitEvent();
    private get _formValidState$();
    private get _formInvalidState$();
    private get _submitter();
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    createSnapshot(): void;
    reset(): void;
    clear(): void;
    dirty(): void;
    triggerSubmit(): void;
    triggerConfirm(): Observable<ConfirmResult>;
    enable(): void;
    disable(): void;
    addSubmitButton(submitButton: FsSubmitButtonDirective): void;
    removeSubmitButton(submitButton: FsSubmitButtonDirective): void;
    private _listenSubmit;
    private _listenWindowClose;
    private _listenHotKeys;
    private _formClose;
    private _registerDialogClose;
    private _getActiveButton;
    private _elementInForm;
    private _completeSubmit;
    private _resetButtons;
    private _registerConfirm;
    private _registerDrawerClose;
    private _registerConfirmDrawerClose;
    private _registerConfirmTabs;
    registerConfirmTabGroups(tabGroups: MatTabGroup[]): void;
    registerConfirmTabGroup(tabGroup: MatTabGroup): void;
    private _registerConfirmDialogClose;
    private _registerConfirmDialogBackdropEscape;
    private _registerAutocomplete;
    private _registerDirtySubmitButton;
    private _updateDirtySubmitButtons;
    private _broadcastSubmittingEvents;
    private _markControlsAsTouchedAndUpdateValidity;
    private _setupActiveSubmitButton;
    private _waitUntilStatusPending;
    private _handleError;
    static ɵfac: i0.ɵɵFactoryDeclaration<FsFormDirective, [null, null, null, null, null, null, { optional: true; }, { optional: true; }]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<FsFormDirective, "[fsForm]", never, { "wrapperSelector": "wrapperSelector"; "messageSelector": "messageSelector"; "hintSelector": "hintSelector"; "labelSelector": "labelSelector"; "autocomplete": "autocomplete"; "shortcuts": "shortcuts"; "confirm": "confirm"; "confirmDialog": "confirmDialog"; "confirmDrawer": "confirmDrawer"; "confirmBrowser": "confirmBrowser"; "confirmTabs": "confirmTabs"; "dirtySubmitButton": "dirtySubmitButton"; "submit": "submit"; "successDelay": "successDelay"; "errorDelay": "errorDelay"; "tabGroup": "tabGroup"; }, { "submitEvent": "fsForm"; "invalid": "invalid"; "valid": "valid"; "submitted": "submitted"; "reseted": "reseted"; "cleared": "cleared"; }, ["formDialogClose", "_tabGroups"]>;
}
