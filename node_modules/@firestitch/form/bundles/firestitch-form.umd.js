(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('@angular/material/button'), require('@angular/material/dialog'), require('@angular/material/core'), require('@angular/material/tabs'), require('@firestitch/message'), require('@firestitch/common'), require('@firestitch/drawer'), require('rxjs'), require('rxjs/operators'), require('@firestitch/prompt'), require('lodash-es'), require('date-fns')) :
    typeof define === 'function' && define.amd ? define('@firestitch/form', ['exports', '@angular/core', '@angular/common', '@angular/forms', '@angular/material/button', '@angular/material/dialog', '@angular/material/core', '@angular/material/tabs', '@firestitch/message', '@firestitch/common', '@firestitch/drawer', 'rxjs', 'rxjs/operators', '@firestitch/prompt', 'lodash-es', 'date-fns'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.firestitch = global.firestitch || {}, global.firestitch.form = {}), global.ng.core, global.ng.common, global.ng.forms, global.ng.material.button, global.ng.material.dialog, global.ng.material.core, global.ng.material.tabs, global.i2, global.common, global.i6, global.rxjs, global.rxjs.operators, global.i3, global.lodashEs, global.dateFns));
})(this, (function (exports, i0, i4, i1, i1$1, i2$1, core, tabs, i2, common, i6, rxjs, operators, i3, lodashEs, dateFns) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    exports.ConfirmResult = void 0;
    (function (ConfirmResult) {
        ConfirmResult["Save"] = "save";
        ConfirmResult["Discard"] = "discard";
        ConfirmResult["Review"] = "review";
        ConfirmResult["Invalid"] = "invalid";
        ConfirmResult["Pristine"] = "pristine";
    })(exports.ConfirmResult || (exports.ConfirmResult = {}));

    function confirmUnsaved(form, prompt) {
        return new rxjs.Observable(function (observer) {
            if (!form.confirm || !form.ngForm.dirty) {
                observer.next(exports.ConfirmResult.Pristine);
                observer.complete();
                return;
            }
            var title = 'You Have Unsaved Changes';
            var message = 'What would you like to do with your changes?';
            var saveLabel = 'Save & Continue';
            var discardLabel = 'Discard Changes & Continue';
            var cancelLabel = 'Review Changes';
            if (typeof form.confirm === 'object') {
                title = form.confirm.title || title;
                message = form.confirm.message || message;
                saveLabel = form.confirm.saveLabel || saveLabel;
                discardLabel = form.confirm.discardLabel || discardLabel;
                cancelLabel = form.confirm.cancelLabel || cancelLabel;
            }
            prompt.confirm({
                title: title,
                template: message,
                dialogConfig: { width: 'auto' },
                buttons: [
                    {
                        label: saveLabel,
                        color: 'primary',
                        value: 'save'
                    },
                    {
                        label: discardLabel,
                        value: 'discard'
                    },
                    {
                        label: cancelLabel,
                        cancel: true
                    }
                ]
            }).subscribe(function (value) {
                if (value === 'discard') {
                    observer.next(exports.ConfirmResult.Discard);
                    observer.complete();
                    form.reset();
                }
                if (value === 'save') {
                    form.submitted
                        .pipe(operators.first())
                        .subscribe(function () {
                        observer.next(exports.ConfirmResult.Save);
                        observer.complete();
                    });
                    form.invalid
                        .pipe(operators.first())
                        .subscribe(function () {
                        observer.next(exports.ConfirmResult.Invalid);
                        observer.complete();
                    });
                    form.ngForm.control.markAsPristine();
                    form.ngForm.ngSubmit.emit();
                }
            }, function (error) {
                observer.next(exports.ConfirmResult.Review);
                observer.complete();
            });
        });
    }

    var FsFormDialogCloseDirective = /** @class */ (function () {
        function FsFormDialogCloseDirective() {
            this.clicked$ = new rxjs.Subject();
            this.registered = false;
            this.type = 'button';
        }
        FsFormDialogCloseDirective.prototype.click = function () {
            this.clicked$.next();
        };
        FsFormDialogCloseDirective.prototype.ngOnDestroy = function () {
            this.clicked$.complete();
        };
        return FsFormDialogCloseDirective;
    }());
    FsFormDialogCloseDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormDialogCloseDirective, deps: [], target: i0__namespace.ɵɵFactoryTarget.Directive });
    FsFormDialogCloseDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsFormDialogCloseDirective, selector: "[fsFormDialogClose],[fs-form-dialog-close]", host: { listeners: { "click": "click($event.target)" }, properties: { "attr.type": "this.type" } }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormDialogCloseDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[fsFormDialogClose],[fs-form-dialog-close]'
                    }]
            }], propDecorators: { type: [{
                    type: i0.HostBinding,
                    args: ['attr.type']
                }], click: [{
                    type: i0.HostListener,
                    args: ['click', ['$event.target']]
                }] } });

    exports.FormStatus = void 0;
    (function (FormStatus) {
        FormStatus["Valid"] = "valid";
        FormStatus["Invalid"] = "invalid";
        FormStatus["Submitting"] = "submitting";
        FormStatus["Submitted"] = "submitted";
        FormStatus["Error"] = "error";
        FormStatus["Success"] = "success";
        FormStatus["Completing"] = "completing";
    })(exports.FormStatus || (exports.FormStatus = {}));

    function confirmResultContinue(result) {
        return result === exports.ConfirmResult.Discard || result === exports.ConfirmResult.Save || result === exports.ConfirmResult.Pristine;
    }

    function getFormErrors(control, key) {
        var _a;
        var errors = null;
        if (control.invalid && control.errors) {
            errors = (_a = {},
                _a[key] = Object.assign({}, control.errors),
                _a);
        }
        if (control instanceof i1.FormGroup) {
            Object.entries(control.controls)
                .forEach(function (_a) {
                var _b = __read(_a, 2), name = _b[0], childControl = _b[1];
                var childErrors = getFormErrors(childControl, name);
                if (childErrors) {
                    if (!errors) {
                        errors = Object.assign({}, childErrors);
                    }
                    else {
                        Object.assign(errors, childErrors);
                    }
                }
            });
        }
        return errors;
    }

    var FsForm = /** @class */ (function () {
        function FsForm() {
            this._eventBus = new rxjs.Subject();
        }
        FsForm.prototype.broadcast = function (key, data) {
            this._eventBus.next({ key: key, data: data });
        };
        FsForm.prototype.on = function (key) {
            return this._eventBus.asObservable()
                .pipe(operators.filter(function (event) { return event.key === key; }), operators.map(function (event) { return event.data; }));
        };
        return FsForm;
    }());
    FsForm.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsForm, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    FsForm.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsForm, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsForm, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return []; } });

    var FsFormDirective = /** @class */ (function () {
        function FsFormDirective(ngForm, _form, _element, _message, _prompt, _ngZone, _dialogRef, _drawerRef) {
            this.ngForm = ngForm;
            this._form = _form;
            this._element = _element;
            this._message = _message;
            this._prompt = _prompt;
            this._ngZone = _ngZone;
            this._dialogRef = _dialogRef;
            this._drawerRef = _drawerRef;
            this.wrapperSelector = '.fs-form-wrapper,.mat-form-field';
            this.messageSelector = '.fs-form-message,.mat-form-field-subscript-wrapper';
            this.hintSelector = '.fs-form-hint,.mat-form-field-hint-wrapper';
            this.labelSelector = '.fs-form-label,.mat-form-field-label';
            this.autocomplete = false;
            this.shortcuts = true; // Ctrl + s
            this.confirm = true;
            this.confirmDialog = true;
            this.confirmDrawer = true;
            this.confirmBrowser = true;
            this.confirmTabs = true;
            this.dirtySubmitButton = true;
            this.successDelay = 0;
            this.errorDelay = 1000;
            this.submitEvent = new i0.EventEmitter();
            this.invalid = new i0.EventEmitter();
            this.valid = new i0.EventEmitter();
            this.submitted = new i0.EventEmitter();
            this.reseted = new i0.EventEmitter();
            this.cleared = new i0.EventEmitter();
            this.fsformClass = true;
            this._tabGroups = new i0.QueryList();
            this._submitButtons = new i0.QueryList();
            this._dialogBackdropEscape = false;
            this._snapshot = {};
            this._status$ = new rxjs.BehaviorSubject(exports.FormStatus.Valid);
            this._destroy$ = new rxjs.Subject();
        }
        Object.defineProperty(FsFormDirective.prototype, "submitting", {
            get: function () {
                return this._status$.getValue() === exports.FormStatus.Submitting;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsFormDirective.prototype, "completing", {
            get: function () {
                return this._status$.getValue() === exports.FormStatus.Completing;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsFormDirective.prototype, "_submitEvent", {
            get: function () {
                return {
                    ngForm: this.ngForm,
                    submitter: this._submitter,
                };
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsFormDirective.prototype, "_formValidState$", {
            get: function () {
                this._form.broadcast('valid', this._submitEvent);
                this.submitEvent.emit(this._submitEvent);
                this.valid.emit(this._submitEvent);
                var submittedEvent = {
                    ngForm: this.ngForm,
                    submitter: this._submitter,
                    response: null
                };
                if (!this.submit) {
                    return rxjs.of(submittedEvent);
                }
                var result = this.submit(this._submitEvent);
                if (!rxjs.isObservable(result)) {
                    return rxjs.of(submittedEvent);
                }
                return result
                    .pipe(operators.map(function (response) {
                    submittedEvent.response = response;
                    return submittedEvent;
                }));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsFormDirective.prototype, "_formInvalidState$", {
            get: function () {
                this._form.broadcast('invalid', this._submitEvent);
                if (this.invalid) {
                    this.invalid.emit(this._submitEvent);
                }
                var message = 'Changes not saved. Please review errors highlighted in red.';
                this._message.error(message, { mode: i2.MessageMode.Toast });
                var el = this._element.nativeElement.querySelector('.ng-invalid');
                if (el) {
                    el.scrollIntoView({ behavior: 'smooth', block: 'center' });
                }
                return rxjs.throwError('Form validation error');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsFormDirective.prototype, "_submitter", {
            get: function () {
                return this._activeSubmitButton
                    ? this._activeSubmitButton.name
                    : null;
            },
            enumerable: false,
            configurable: true
        });
        FsFormDirective.prototype.ngOnInit = function () {
            this._registerConfirmDialogBackdropEscape();
            this._listenHotKeys();
            this._listenWindowClose();
            this._listenSubmit();
            if (!this.autocomplete) {
                this._registerAutocomplete();
            }
        };
        FsFormDirective.prototype.ngOnChanges = function (changes) {
            if (changes.confirm) {
                this._updateDirtySubmitButtons();
            }
        };
        FsFormDirective.prototype.ngAfterContentInit = function () {
            this._registerConfirm();
            this._registerConfirmDialogClose();
            this._registerConfirmDrawerClose();
            this._registerConfirmTabs();
            this._registerDrawerClose();
            this._registerDirtySubmitButton();
        };
        FsFormDirective.prototype.ngOnDestroy = function () {
            this._destroy$.next();
            this._destroy$.complete();
        };
        FsFormDirective.prototype.createSnapshot = function () {
            this._snapshot = this.ngForm.value;
        };
        FsFormDirective.prototype.reset = function () {
            var _this = this;
            this.ngForm.resetForm();
            Object.keys(this.ngForm.controls)
                .forEach(function (name) {
                var control = _this.ngForm.controls[name];
                control.reset(_this._snapshot[name]);
            });
            this.reseted.emit();
        };
        FsFormDirective.prototype.clear = function () {
            this.ngForm.resetForm();
            this.cleared.emit();
        };
        FsFormDirective.prototype.dirty = function () {
            this.ngForm.form.markAsDirty();
            this._updateDirtySubmitButtons();
        };
        FsFormDirective.prototype.triggerSubmit = function () {
            this.ngForm.ngSubmit.next();
        };
        FsFormDirective.prototype.triggerConfirm = function () {
            var _this = this;
            var submitted = this.submitting ? this.submitted.asObservable() : rxjs.of({});
            return submitted
                .pipe(operators.take(1), operators.mergeMap(function () { return confirmUnsaved(_this, _this._prompt); }));
        };
        FsFormDirective.prototype.enable = function () {
            this.ngForm.control.enable();
            this._updateDirtySubmitButtons();
        };
        FsFormDirective.prototype.disable = function () {
            this.ngForm.control.disable();
            this._submitButtons.forEach(function (button) {
                button.disable();
            });
        };
        FsFormDirective.prototype.addSubmitButton = function (submitButton) {
            this._submitButtons.reset(__spreadArray(__spreadArray([], __read(this._submitButtons.toArray())), [
                submitButton,
            ]));
        };
        FsFormDirective.prototype.removeSubmitButton = function (submitButton) {
            this._submitButtons.reset(__spreadArray([], __read(this._submitButtons.toArray()
                .filter(function (submitButton_) { return (submitButton !== submitButton_); }))));
        };
        FsFormDirective.prototype._listenSubmit = function () {
            var _this = this;
            this.ngForm
                .ngSubmit
                .pipe(operators.tap(function (event) {
                event === null || event === void 0 ? void 0 : event.preventDefault();
            }), operators.filter(function () {
                return [exports.FormStatus.Valid, exports.FormStatus.Invalid]
                    .includes(_this._status$.getValue());
            }), operators.tap(function () { return _this._markControlsAsTouchedAndUpdateValidity(); }), operators.tap(function () { return _this._broadcastSubmittingEvents(); }), operators.switchMap(function () { return _this._waitUntilStatusPending(); }), operators.tap(function () { return _this._setupActiveSubmitButton(); }), operators.mergeMap(function () {
                return _this.ngForm.status === 'INVALID'
                    ? _this._formInvalidState$
                    : _this._formValidState$;
            }), operators.catchError(function (e, source$) {
                _this._handleError(e);
                return source$;
            }), operators.tap(function (submittedEvent) {
                _this._completeSubmit(true, submittedEvent);
            }), operators.takeUntil(this._destroy$))
                .subscribe(function () { });
        };
        FsFormDirective.prototype._listenWindowClose = function () {
            var _this = this;
            rxjs.fromEvent(window, 'beforeunload')
                .pipe(operators.takeUntil(this._destroy$))
                .subscribe(function (event) {
                if (_this.confirm && _this.confirmBrowser && _this.ngForm.dirty) {
                    event.returnValue = false;
                }
            });
        };
        FsFormDirective.prototype._listenHotKeys = function () {
            var _this = this;
            this._ngZone.runOutsideAngular(function () {
                rxjs.fromEvent(document, 'keydown')
                    .pipe(operators.takeUntil(_this._destroy$))
                    .subscribe(function (event) {
                    if (_this._dialogBackdropEscape && event.code === 'Escape') {
                        var dialog_1 = document.getElementById(_this._dialogRef.id);
                        var paths = event.composedPath();
                        if (paths) {
                            paths.forEach(function (item) {
                                if (dialog_1 === item) {
                                    _this._ngZone.run(function () {
                                        _this._formClose();
                                    });
                                }
                            });
                        }
                    }
                    if ((event.ctrlKey || event.metaKey) && event.code === 'KeyS') {
                        event.preventDefault();
                        if (_this.shortcuts) {
                            if (_this._elementInForm(document.activeElement)) {
                                _this.ngForm.ngSubmit.next();
                            }
                        }
                    }
                });
            });
        };
        FsFormDirective.prototype._formClose = function () {
            var _this = this;
            if (this.confirm && this.confirmDialog) {
                this.triggerConfirm()
                    .pipe(operators.filter(function (result) { return confirmResultContinue(result); }), operators.switchMap(function (result) {
                    return result === exports.ConfirmResult.Pristine || result === exports.ConfirmResult.Discard
                        ? rxjs.of(null)
                        : _this.submitted.asObservable();
                }), operators.takeUntil(this._destroy$))
                    .subscribe(function (result) {
                    _this._dialogRef.close(result === null || result === void 0 ? void 0 : result.response);
                });
            }
            else {
                this._dialogRef.close(null);
            }
        };
        FsFormDirective.prototype._registerDialogClose = function (directive) {
            var _this = this;
            if (!directive.registered) {
                directive.registered = true;
                directive.clicked$
                    .pipe(operators.takeUntil(this._destroy$))
                    .subscribe(function () {
                    _this._formClose();
                });
            }
        };
        FsFormDirective.prototype._getActiveButton = function () {
            var activeButton = this._submitButtons.find(function (button) {
                return button.active;
            });
            return activeButton ? activeButton : this._submitButtons.first;
        };
        FsFormDirective.prototype._elementInForm = function (el) {
            if (el.isSameNode(this._element.nativeElement)) {
                return true;
            }
            else if (el.parentElement) {
                return this._elementInForm(el.parentElement);
            }
            return false;
        };
        FsFormDirective.prototype._completeSubmit = function (success, submitEvent) {
            var _this = this;
            if (success) {
                this.ngForm.control.markAsPristine();
                this.createSnapshot();
                this.submitted.emit(submitEvent);
            }
            else {
                this._resetButtons();
            }
            if (this._activeSubmitButton) {
                if (success) {
                    this._activeSubmitButton.success();
                }
                else {
                    this._activeSubmitButton.error();
                }
            }
            this._status$.next(exports.FormStatus.Submitted);
            if (success) {
                this._status$.next(exports.FormStatus.Success);
            }
            else {
                this._status$.next(exports.FormStatus.Error);
            }
            this._status$.next(exports.FormStatus.Completing);
            var resetDelay = success ? this.successDelay : this.errorDelay;
            rxjs.of(true)
                .pipe(operators.delay(resetDelay), operators.first(), operators.takeUntil(this._destroy$)).subscribe(function () {
                if (_this.ngForm.form.status === 'VALID') {
                    _this._status$.next(exports.FormStatus.Valid);
                }
                else {
                    _this._status$.next(exports.FormStatus.Invalid);
                }
                _this._resetButtons();
                _this._updateDirtySubmitButtons();
            });
        };
        FsFormDirective.prototype._resetButtons = function () {
            this._submitButtons.forEach(function (button) {
                button.reset();
            });
        };
        FsFormDirective.prototype._registerConfirm = function () {
            var _this = this;
            this.ngForm.form.valueChanges
                .pipe(operators.takeUntil(this._destroy$))
                .subscribe(function (changes) {
                if (_this.confirm) {
                    var existing_1 = Object.keys(_this._snapshot);
                    Object.keys(changes)
                        .forEach(function (name) {
                        if (existing_1.indexOf(name) === -1) {
                            _this._snapshot[name] = changes[name];
                        }
                    });
                }
            });
        };
        FsFormDirective.prototype._registerDrawerClose = function () {
            var _this = this;
            if (this._drawerRef) {
                this._drawerRef.closeStart$
                    .pipe(operators.takeUntil(this._destroy$))
                    .subscribe(function (subscriber) {
                    if (_this.submitting) {
                        _this._status$
                            .pipe(operators.filter(function (status) { return status === exports.FormStatus.Success || status === exports.FormStatus.Error; }), operators.takeUntil(_this._destroy$))
                            .subscribe(function (status) {
                            if (status === exports.FormStatus.Success) {
                                subscriber.next();
                                subscriber.complete();
                            }
                            else {
                                subscriber.error();
                            }
                        });
                    }
                    else {
                        subscriber.next();
                        subscriber.complete();
                    }
                });
            }
        };
        FsFormDirective.prototype._registerConfirmDrawerClose = function () {
            var _this = this;
            if (this._drawerRef) {
                this._drawerRef.closeStart$
                    .pipe(operators.switchMap(function (subscriber) {
                    return rxjs.iif(function () { return _this.confirm && _this.confirmDrawer; }, _this.triggerConfirm()
                        .pipe(operators.map(function (result) { return confirmResultContinue(result); }), operators.tap(function (result) {
                        if (result) {
                            subscriber.next();
                            subscriber.complete();
                        }
                    })), rxjs.defer(function () {
                        subscriber.next();
                        subscriber.complete();
                    }));
                }), operators.takeUntil(this._destroy$))
                    .subscribe();
            }
        };
        FsFormDirective.prototype._registerConfirmTabs = function () {
            var _this = this;
            if (this.tabGroup) {
                this.registerConfirmTabGroup(this.tabGroup);
            }
            this.registerConfirmTabGroups(this._tabGroups.toArray());
            this._tabGroups.changes
                .pipe(operators.takeUntil(this._destroy$))
                .subscribe(function () {
                _this.registerConfirmTabGroups(_this._tabGroups.toArray());
            });
        };
        FsFormDirective.prototype.registerConfirmTabGroups = function (tabGroups) {
            var _this = this;
            tabGroups.forEach(function (tabGroup) {
                _this.registerConfirmTabGroup(tabGroup);
            });
        };
        FsFormDirective.prototype.registerConfirmTabGroup = function (tabGroup) {
            var _this = this;
            var confirmTabGroup = tabGroup;
            if (!confirmTabGroup._originalHandleClick) {
                confirmTabGroup._originalHandleClick = tabGroup._handleClick;
                confirmTabGroup._handlClick$ = new rxjs.Subject();
                confirmTabGroup._handleClick = function (tab, tabHeader, idx) {
                    if (confirmTabGroup._handlClick$.observers.length) {
                        confirmTabGroup._handlClick$.next({ tab: tab, tabHeader: tabHeader, idx: idx });
                    }
                    else {
                        confirmTabGroup._originalHandleClick(tab, tabHeader, idx);
                    }
                };
            }
            confirmTabGroup._handlClick$
                .pipe(operators.takeUntil(this._destroy$))
                .subscribe(function (event) {
                if (!_this.submitting) {
                    if (_this.confirm && _this.confirmTabs) {
                        _this.triggerConfirm()
                            .pipe(operators.takeUntil(_this._destroy$))
                            .subscribe(function (result) {
                            if (confirmResultContinue(result)) {
                                confirmTabGroup.selectedIndex = event.idx;
                            }
                        });
                    }
                    else {
                        confirmTabGroup._originalHandleClick(event.tab, event.tabHeader, event.idx);
                    }
                }
            });
        };
        FsFormDirective.prototype._registerConfirmDialogClose = function () {
            var _this = this;
            if (this._dialogRef) {
                this.formDialogClose.forEach(function (item) {
                    _this._registerDialogClose(item);
                });
                this.formDialogClose.changes
                    .pipe(operators.takeUntil(this._destroy$))
                    .subscribe(function (e) {
                    e.forEach(function (item) {
                        _this._registerDialogClose(item);
                    });
                });
            }
        };
        FsFormDirective.prototype._registerConfirmDialogBackdropEscape = function () {
            var _this = this;
            this._dialogBackdropEscape = this._dialogRef && this._dialogRef.disableClose !== true;
            if (this._dialogRef && !this._dialogRef.disableClose) {
                this._dialogRef.disableClose = true;
                this._dialogRef.backdropClick()
                    .pipe(operators.takeUntil(this._destroy$))
                    .subscribe(function () {
                    _this._formClose();
                });
                this._destroy$
                    .subscribe(function () {
                    _this._dialogRef.disableClose = false;
                });
            }
        };
        FsFormDirective.prototype._registerAutocomplete = function () {
            var _this = this;
            this._registerControl = this.ngForm.form.registerControl.bind(this.ngForm.form);
            this.ngForm.form.registerControl = function (name, control) {
                var el = _this._element.nativeElement.querySelector("input[name='" + name + "']");
                if (el) {
                    el.setAttribute('name', name + '_' + common.guid());
                    if (!el.getAttribute('autocomplete')) {
                        el.setAttribute('autocomplete', 'none');
                    }
                }
                return _this._registerControl(name, control);
            };
        };
        FsFormDirective.prototype._registerDirtySubmitButton = function () {
            var _this = this;
            if (!this.ngForm) {
                return;
            }
            this.ngForm.form.valueChanges
                .pipe(operators.takeUntil(this._destroy$))
                .subscribe(function () {
                _this._updateDirtySubmitButtons();
            });
            this._submitButtons.changes
                .pipe(operators.takeUntil(this._destroy$))
                .subscribe(function () {
                _this._updateDirtySubmitButtons();
            });
        };
        FsFormDirective.prototype._updateDirtySubmitButtons = function () {
            var _this = this;
            this._submitButtons
                .forEach(function (submitButton) {
                if (!_this.confirm || !_this.dirtySubmitButton || _this.ngForm.dirty || !submitButton.dirtySubmit) {
                    submitButton.enable();
                }
                else {
                    submitButton.disable();
                }
            });
        };
        FsFormDirective.prototype._broadcastSubmittingEvents = function () {
            this._status$.next(exports.FormStatus.Submitting);
            this._form.broadcast('submit', this.ngForm);
        };
        FsFormDirective.prototype._markControlsAsTouchedAndUpdateValidity = function () {
            Object.values(this.ngForm.controls)
                .forEach(function (control) {
                control.markAsDirty();
                control.markAsTouched();
                control.updateValueAndValidity();
            });
        };
        FsFormDirective.prototype._setupActiveSubmitButton = function () {
            this._activeSubmitButton = this._getActiveButton();
            this._resetButtons();
            if (this._activeSubmitButton) {
                this._activeSubmitButton.process();
            }
        };
        FsFormDirective.prototype._waitUntilStatusPending = function () {
            return this.ngForm.statusChanges
                .pipe(operators.startWith(this.ngForm.status), operators.first(function (state) { return state !== 'PENDING'; }));
        };
        FsFormDirective.prototype._handleError = function (e) {
            console.log('%c Form Submit ', 'color: white; background-color: #D33F49', 'Error occured');
            console.group('Error Details:');
            console.log('Message: ', e);
            console.log('FormRef: ', this);
            if (this.ngForm.invalid) {
                var errors = getFormErrors(this.ngForm.control, null);
                console.log('Validation Errors: ', errors);
            }
            console.groupEnd();
            this._completeSubmit(false, null);
        };
        return FsFormDirective;
    }());
    FsFormDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormDirective, deps: [{ token: i1.NgForm }, { token: FsForm }, { token: i0__namespace.ElementRef }, { token: i2__namespace.FsMessage }, { token: i3__namespace.FsPrompt }, { token: i0__namespace.NgZone }, { token: i2$1.MatDialogRef, optional: true }, { token: i6.DrawerRef, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    FsFormDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsFormDirective, selector: "[fsForm]", inputs: { wrapperSelector: "wrapperSelector", messageSelector: "messageSelector", hintSelector: "hintSelector", labelSelector: "labelSelector", autocomplete: "autocomplete", shortcuts: "shortcuts", confirm: "confirm", confirmDialog: "confirmDialog", confirmDrawer: "confirmDrawer", confirmBrowser: "confirmBrowser", confirmTabs: "confirmTabs", dirtySubmitButton: "dirtySubmitButton", submit: "submit", successDelay: "successDelay", errorDelay: "errorDelay", tabGroup: "tabGroup" }, outputs: { submitEvent: "fsForm", invalid: "invalid", valid: "valid", submitted: "submitted", reseted: "reseted", cleared: "cleared" }, host: { properties: { "class.fs-form": "this.fsformClass" } }, queries: [{ propertyName: "formDialogClose", predicate: FsFormDialogCloseDirective, descendants: true }, { propertyName: "_tabGroups", predicate: tabs.MatTabGroup, descendants: true }], usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[fsForm]',
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.NgForm, decorators: [{
                            type: i0.Inject,
                            args: [i1.NgForm]
                        }] }, { type: FsForm }, { type: i0__namespace.ElementRef }, { type: i2__namespace.FsMessage }, { type: i3__namespace.FsPrompt }, { type: i0__namespace.NgZone }, { type: i2__namespace$1.MatDialogRef, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [i2$1.MatDialogRef]
                        }] }, { type: i6__namespace.DrawerRef, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [i6.DrawerRef]
                        }] }];
        }, propDecorators: { wrapperSelector: [{
                    type: i0.Input
                }], messageSelector: [{
                    type: i0.Input
                }], hintSelector: [{
                    type: i0.Input
                }], labelSelector: [{
                    type: i0.Input
                }], autocomplete: [{
                    type: i0.Input
                }], shortcuts: [{
                    type: i0.Input
                }], confirm: [{
                    type: i0.Input
                }], confirmDialog: [{
                    type: i0.Input
                }], confirmDrawer: [{
                    type: i0.Input
                }], confirmBrowser: [{
                    type: i0.Input
                }], confirmTabs: [{
                    type: i0.Input
                }], dirtySubmitButton: [{
                    type: i0.Input
                }], submit: [{
                    type: i0.Input
                }], successDelay: [{
                    type: i0.Input
                }], errorDelay: [{
                    type: i0.Input
                }], tabGroup: [{
                    type: i0.Input
                }], submitEvent: [{
                    type: i0.Output,
                    args: ['fsForm']
                }], invalid: [{
                    type: i0.Output
                }], valid: [{
                    type: i0.Output
                }], submitted: [{
                    type: i0.Output
                }], reseted: [{
                    type: i0.Output
                }], cleared: [{
                    type: i0.Output
                }], fsformClass: [{
                    type: i0.HostBinding,
                    args: ['class.fs-form']
                }], formDialogClose: [{
                    type: i0.ContentChildren,
                    args: [FsFormDialogCloseDirective, { descendants: true }]
                }], _tabGroups: [{
                    type: i0.ContentChildren,
                    args: [tabs.MatTabGroup, { descendants: true }]
                }] } });

    var ERROR_MESSAGES = {
        required: 'This field is required',
        email: 'This is not a valid email address',
        emails: 'Input valid email addresses, comma separated',
        phone: 'Invalid phone number',
        numeric: 'Value should be numeric',
        integer: 'Value should be an integer',
        min: 'Value should not be less than $(1)',
        max: 'Value should not be greater than $(1)',
        minlength: 'Should not be shorter than $(1) characters',
        maxlength: 'Should not be longer than $(1) characters',
        compare: 'Inputs do not match',
        pattern: 'Value should match pattern $(1)',
        dateRange: 'Invalid date range',
        url: 'This is not a valid url',
        urlProtocol: 'Invalid URL. Proper http protocol is required. eg. https://google.com',
        greater: 'Value must be greater than $(1)',
        lesser: 'Value must be less than $(1)',
    };

    var VALIDATE_MESSAGES = new i0.InjectionToken('fs.form.validate-messages');
    var VALIDATE_MESSAGE_PROVIDER = {
        provide: VALIDATE_MESSAGES,
        useFactory: messageProviderFactory,
    };
    function messageProviderFactory() {
        return Object.assign({}, ERROR_MESSAGES);
    }

    var FsControlDirective = /** @class */ (function () {
        function FsControlDirective(elementRef, renderer2, injector, _validateMessages, ngControl, formDirective) {
            this.elementRef = elementRef;
            this.renderer2 = renderer2;
            this.injector = injector;
            this._validateMessages = _validateMessages;
            this.ngControl = ngControl;
            this.formDirective = formDirective;
            this.appendMessageClass = 'fs-form-message';
            this.appendLabelClass = 'fs-form-label';
            this.appendErrorClass = 'fs-form-error';
            this.appendHintClass = 'fs-form-hint';
            this.errors = [];
            // protected _validateMessages = { ...ERROR_MESSAGES };
            this._destroy$ = new rxjs.Subject();
            if (ngControl) {
                this._control = ngControl.control;
            }
            else {
                console.error('The element does not have a valid ngModel', this.elementRef.nativeElement);
            }
        }
        Object.defineProperty(FsControlDirective.prototype, "validateMessages", {
            set: function (messages) {
                this._validateMessages = Object.assign(Object.assign({}, this._validateMessages), messages);
            },
            enumerable: false,
            configurable: true
        });
        FsControlDirective.prototype.ngOnInit = function () {
            this._setupValidators();
        };
        FsControlDirective.prototype.ngOnDestroy = function () {
            this._destroy$.next();
            this._destroy$.complete();
        };
        FsControlDirective.prototype.ngAfterContentInit = function () {
            if (this._control) {
                /*
                  Ensure that statusChanges has one subscription per control. Multiple can happen
                  when multiple fsForm validation directives are applied to the same element
                */
                if (!this._control.statusChangesSubscribe) {
                    this._control.statusChanges
                        .pipe(operators.takeUntil(this._destroy$))
                        .subscribe(this.render.bind(this));
                    this._control.statusChangesSubscribe = true;
                }
            }
        };
        FsControlDirective.prototype.getMessageSelector = function () {
            if (this.messageSelector === false) {
                return '';
            }
            if (this.messageSelector) {
                return this.messageSelector;
            }
            else if (this.formDirective && this.formDirective.messageSelector) {
                return this.formDirective.messageSelector;
            }
        };
        FsControlDirective.prototype.getHintWrapperSelector = function () {
            if (this.hintSelector === false) {
                return '';
            }
            if (this.hintSelector) {
                return this.hintSelector;
            }
            else if (this.formDirective && this.formDirective.hintSelector) {
                return this.formDirective.hintSelector;
            }
        };
        FsControlDirective.prototype.getWrapperSelector = function () {
            if (this.wrapperSelector === false) {
                return '';
            }
            if (this.wrapperSelector) {
                return this.wrapperSelector;
            }
            else if (this.formDirective && this.formDirective.wrapperSelector) {
                return this.formDirective.wrapperSelector;
            }
        };
        FsControlDirective.prototype.getlabelSelector = function () {
            if (this.labelSelector === false) {
                return '';
            }
            if (this.labelSelector) {
                return this.labelSelector;
            }
            else if (this.formDirective && this.formDirective.labelSelector) {
                return this.formDirective.labelSelector;
            }
        };
        FsControlDirective.prototype.getWrapperElement = function () {
            var wrapper = this.getWrapper(this.elementRef.nativeElement);
            if (wrapper) {
                return wrapper;
            }
            return this.elementRef.nativeElement;
        };
        /*
          <mat-form-field class="mat-form-field">  <-- Field Wrapper Class. Look for parents from the native element with the matching wrapperSelector. If not found defaults to native element.
            <input>
            <div class="fs-form-message"> <-- Message Selector. Look for the element with class .fs-form-message or messageSelector
              <div class="fs-form-message"></div>
              <div class="fs-form-hint"></div> <-- Hint Selector. Look for the element with class .fs-form-hint or hintSelector
            </div>
          </mat-form-field>
        */
        FsControlDirective.prototype.render = function () {
            var _a;
            if (this.ngControl) {
                var renderer = this.renderer2;
                var wrapper = this.getWrapperElement();
                var error = this.ngControl.dirty ? this.getError(this.ngControl) : null;
                if (!this.getMessageSelector()) {
                    return;
                }
                var messageWrapper = wrapper.querySelector(this.getMessageSelector());
                if (!messageWrapper) {
                    return console.warn('Failed to locate ' + this.getMessageSelector(), this.elementRef.nativeElement);
                }
                if (this.getlabelSelector()) {
                    var labelWrapper = wrapper.querySelector(this.getlabelSelector());
                    if (labelWrapper) {
                        if (this.appendLabelClass) {
                            this.renderer2.addClass(labelWrapper, this.appendLabelClass);
                        }
                    }
                }
                if (this.appendMessageClass) {
                    renderer.addClass(messageWrapper, this.appendMessageClass);
                }
                if (this.getHintWrapperSelector()) {
                    var hint = messageWrapper.querySelector(this.getHintWrapperSelector());
                    if (hint) {
                        renderer.setStyle(hint, 'display', error ? 'none' : 'block');
                        if (this.appendHintClass) {
                            renderer.addClass(hint, this.appendHintClass);
                        }
                    }
                }
                var errorWrapper = wrapper.querySelector('.fs-form-error-target');
                if (errorWrapper) {
                    errorWrapper.remove();
                }
                wrapper.classList.remove('ng-invalid');
                var shouldErrorBeRendered = this.ngControl.invalid
                    && (this.ngControl.dirty || ((_a = this.formDirective.ngForm) === null || _a === void 0 ? void 0 : _a.submitted));
                if (!shouldErrorBeRendered || !error) {
                    return;
                }
                wrapper.classList.add('ng-invalid');
                errorWrapper = renderer.createElement('div');
                renderer.addClass(errorWrapper, 'fs-form-error-target');
                renderer.addClass(errorWrapper, this.appendErrorClass);
                renderer.addClass(errorWrapper, this.appendErrorClass + '-' + error.name);
                var errorText = renderer.createText(error.message);
                renderer.appendChild(errorWrapper, errorText);
                messageWrapper.appendChild(errorWrapper);
            }
        };
        FsControlDirective.prototype.getWrapper = function (node, count) {
            if (count === void 0) { count = 0; }
            if (!node || count > 10) {
                return null;
            }
            if (node.parentNode && node.parentNode.querySelector(this.getWrapperSelector())) {
                return node;
            }
            return this.getWrapper(node.parentNode, ++count);
        };
        FsControlDirective.prototype.parseErrorMessage = function (message, args) {
            lodashEs.values(args)
                .forEach(function (name) {
                message = message.replace(/\$\(\d\)/, name);
            });
            return message;
        };
        FsControlDirective.prototype.getError = function (controlRef) {
            var name = lodashEs.keys(controlRef.control.errors)[0];
            if (!name) {
                return null;
            }
            var message = controlRef.control.errors[name];
            if (this._validateMessages[name]) {
                message = this.parseErrorMessage(this._validateMessages[name], message);
            }
            return { name: name, message: message };
        };
        FsControlDirective.prototype._setupValidators = function () {
            var control = this._control;
            if (this.validate) {
                var validators = control.validator
                    ? [control.validator, this.validate.bind(this)]
                    : this.validate.bind(this);
                control.setValidators(validators);
            }
            if (this.validateAsync) {
                var asyncValidators = control.asyncValidator
                    ? [control.asyncValidator, this.validateAsync.bind(this)]
                    : this.validateAsync.bind(this);
                control.setAsyncValidators(asyncValidators);
            }
            control.updateValueAndValidity();
        };
        return FsControlDirective;
    }());
    FsControlDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsControlDirective, deps: [{ token: i0__namespace.ElementRef }, { token: i0__namespace.Renderer2 }, { token: i0__namespace.Injector }, { token: VALIDATE_MESSAGES, self: true }, { token: i1__namespace.NgControl, optional: true }, { token: FsFormDirective, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    FsControlDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsControlDirective, selector: "[fsFormControl]", inputs: { wrapperSelector: "wrapperSelector", messageSelector: "messageSelector", hintSelector: "hintSelector", labelSelector: "labelSelector", appendMessageClass: "appendMessageClass", appendLabelClass: "appendLabelClass", appendErrorClass: "appendErrorClass", appendHintClass: "appendHintClass", validateMessages: "validateMessages" }, providers: [
            VALIDATE_MESSAGE_PROVIDER
        ], ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsControlDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[fsFormControl]',
                        providers: [
                            VALIDATE_MESSAGE_PROVIDER
                        ],
                    }]
            }], ctorParameters: function () {
            return [{ type: i0__namespace.ElementRef }, { type: i0__namespace.Renderer2 }, { type: i0__namespace.Injector }, { type: undefined, decorators: [{
                            type: i0.Self
                        }, {
                            type: i0.Inject,
                            args: [VALIDATE_MESSAGES]
                        }] }, { type: i1__namespace.NgControl, decorators: [{
                            type: i0.Optional
                        }] }, { type: FsFormDirective, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [FsFormDirective]
                        }] }];
        }, propDecorators: { wrapperSelector: [{
                    type: i0.Input
                }], messageSelector: [{
                    type: i0.Input
                }], hintSelector: [{
                    type: i0.Input
                }], labelSelector: [{
                    type: i0.Input
                }], appendMessageClass: [{
                    type: i0.Input
                }], appendLabelClass: [{
                    type: i0.Input
                }], appendErrorClass: [{
                    type: i0.Input
                }], appendHintClass: [{
                    type: i0.Input
                }], validateMessages: [{
                    type: i0.Input
                }] } });

    function isEnabled(value) {
        return value !== 'false' && (value || value === '');
    }

    var FsFormRequiredDirective = /** @class */ (function (_super) {
        __extends(FsFormRequiredDirective, _super);
        function FsFormRequiredDirective() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.required = false;
            return _this;
        }
        Object.defineProperty(FsFormRequiredDirective.prototype, "setFsFormRequired", {
            set: function (value) {
                this.required = isEnabled(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsFormRequiredDirective.prototype, "setRequired", {
            set: function (value) {
                this.required = isEnabled(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsFormRequiredDirective.prototype, "validationMessage", {
            set: function (value) {
                this._validateMessages.required = value;
            },
            enumerable: false,
            configurable: true
        });
        FsFormRequiredDirective.prototype.ngOnChanges = function () {
            this._control.updateValueAndValidity();
        };
        FsFormRequiredDirective.prototype.validate = function (control) {
            if (this.required) {
                return i1.Validators.required(this._control);
            }
            else {
                return null;
            }
        };
        FsFormRequiredDirective.prototype.render = function () {
            var wrapper = this.getWrapperElement();
            if (wrapper && this.getlabelSelector()) {
                var labelWrapper = wrapper.querySelector(this.getlabelSelector());
                // Adding class fs-form-label-requried adds the * to the label
                if (labelWrapper) {
                    if (this.required) {
                        this.renderer2.addClass(labelWrapper, 'fs-form-label-required');
                    }
                    else {
                        this.renderer2.removeClass(labelWrapper, 'fs-form-label-required');
                    }
                }
            }
            _super.prototype.render.call(this);
        };
        return FsFormRequiredDirective;
    }(FsControlDirective));
    FsFormRequiredDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormRequiredDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    FsFormRequiredDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsFormRequiredDirective, selector: "[fsFormRequired],[ngModel][required]", inputs: { setFsFormRequired: ["fsFormRequired", "setFsFormRequired"], setRequired: ["required", "setRequired"], validationMessage: ["fsFormRequiredMessage", "validationMessage"] }, providers: [
            VALIDATE_MESSAGE_PROVIDER
        ], usesInheritance: true, usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormRequiredDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[fsFormRequired],[ngModel][required]',
                        providers: [
                            VALIDATE_MESSAGE_PROVIDER
                        ],
                    }]
            }], propDecorators: { setFsFormRequired: [{
                    type: i0.Input,
                    args: ['fsFormRequired']
                }], setRequired: [{
                    type: i0.Input,
                    args: ['required']
                }], validationMessage: [{
                    type: i0.Input,
                    args: ['fsFormRequiredMessage']
                }] } });

    var FsValidators = /** @class */ (function () {
        function FsValidators() {
        }
        FsValidators.email = function (control) {
            if (!control.value || common.email(control.value)) {
                return null;
            }
            return { email: true };
        };
        FsValidators.emails = function (control) {
            var model = control.value || '';
            var hasInvalidEmails = model
                .split(',')
                .some(function (part) { return !common.email(part); });
            return hasInvalidEmails ? { email: true } : null;
        };
        FsValidators.numeric = function (control) {
            if (common.isEmpty(control.value) || common.isNumeric(control.value)) {
                return null;
            }
            else {
                return { numeric: true };
            }
        };
        FsValidators.integer = function (control) {
            if (!control.value || String(control.value) === '' || (control.value % 1 === 0)) {
                return null;
            }
            else {
                return { integer: true };
            }
        };
        FsValidators.phone = function (control) {
            if (!control.value || common.phone(control.value)) {
                return null;
            }
            return { phone: true };
        };
        FsValidators.url = function (control, protocolRequired) {
            if (protocolRequired === void 0) { protocolRequired = false; }
            if (!control.value) {
                return null;
            }
            if (!common.url(control.value)) {
                return { url: true };
            }
            if (protocolRequired) {
                var pattern = new RegExp(/^http(s)?:\/\//gm);
                if (!String(control.value).match(pattern)) {
                    return { urlProtocol: true };
                }
            }
            return null;
        };
        FsValidators.dateRange = function (control) {
            if (!control.value) {
                return null;
            }
            if (lodashEs.isObject(control.value)) {
                var start = control.value.start;
                var end = control.value.end;
                if ((!start && !end) || (dateFns.isValid(start) && dateFns.isValid(end))) {
                    return null;
                }
            }
            return { dateRange: true };
        };
        FsValidators.func = function (control, formFunction, data) {
            var result;
            var stream$;
            try {
                result = formFunction(control, data);
            }
            catch (err) {
                err = err instanceof Error ? err.message : err;
                stream$ = rxjs.throwError(err);
            }
            if (!stream$) {
                if (result instanceof Promise) {
                    stream$ = rxjs.from(result);
                }
                else if (rxjs.isObservable(result)) {
                    stream$ = result;
                }
                else {
                    stream$ = rxjs.of(null);
                }
            }
            return stream$
                .pipe(operators.map(function () { return null; }), operators.catchError(function (err) {
                return rxjs.of({ validationError: err });
            }), operators.take(1));
        };
        return FsValidators;
    }());

    var FsFormMinDirective = /** @class */ (function (_super) {
        __extends(FsFormMinDirective, _super);
        function FsFormMinDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(FsFormMinDirective.prototype, "validationMessage", {
            set: function (value) {
                this._validateMessages.min = value;
            },
            enumerable: false,
            configurable: true
        });
        FsFormMinDirective.prototype.ngOnChanges = function () {
            this._control.updateValueAndValidity();
        };
        FsFormMinDirective.prototype.validate = function (control) {
            return FsValidators.numeric(this._control) || i1.Validators.min(parseFloat(this.fsFormMin))(this._control);
        };
        return FsFormMinDirective;
    }(FsControlDirective));
    FsFormMinDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormMinDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    FsFormMinDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsFormMinDirective, selector: "[fsFormMin]", inputs: { fsFormMin: "fsFormMin", validationMessage: ["fsFormMinMessage", "validationMessage"] }, providers: [
            VALIDATE_MESSAGE_PROVIDER
        ], usesInheritance: true, usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormMinDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[fsFormMin]',
                        providers: [
                            VALIDATE_MESSAGE_PROVIDER
                        ],
                    }]
            }], propDecorators: { fsFormMin: [{
                    type: i0.Input
                }], validationMessage: [{
                    type: i0.Input,
                    args: ['fsFormMinMessage']
                }] } });

    var FsFormMaxDirective = /** @class */ (function (_super) {
        __extends(FsFormMaxDirective, _super);
        function FsFormMaxDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(FsFormMaxDirective.prototype, "validationMessage", {
            set: function (value) {
                this._validateMessages.max = value;
            },
            enumerable: false,
            configurable: true
        });
        FsFormMaxDirective.prototype.ngOnChanges = function () {
            this._control.updateValueAndValidity();
        };
        FsFormMaxDirective.prototype.validate = function (control) {
            return FsValidators.numeric(this._control) || i1.Validators.max(this.fsFormMax)(this._control);
        };
        return FsFormMaxDirective;
    }(FsControlDirective));
    FsFormMaxDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormMaxDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    FsFormMaxDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsFormMaxDirective, selector: "[fsFormMax]", inputs: { fsFormMax: "fsFormMax", validationMessage: ["fsFormMaxMessage", "validationMessage"] }, providers: [
            VALIDATE_MESSAGE_PROVIDER
        ], usesInheritance: true, usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormMaxDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[fsFormMax]',
                        providers: [
                            VALIDATE_MESSAGE_PROVIDER
                        ],
                    }]
            }], propDecorators: { fsFormMax: [{
                    type: i0.Input
                }], validationMessage: [{
                    type: i0.Input,
                    args: ['fsFormMaxMessage']
                }] } });

    var FsFormMinLengthDirective = /** @class */ (function (_super) {
        __extends(FsFormMinLengthDirective, _super);
        function FsFormMinLengthDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(FsFormMinLengthDirective.prototype, "validationMessage", {
            set: function (value) {
                this._validateMessages.minlength = value;
            },
            enumerable: false,
            configurable: true
        });
        FsFormMinLengthDirective.prototype.ngOnChanges = function () {
            this._control.updateValueAndValidity();
        };
        FsFormMinLengthDirective.prototype.validate = function (control) {
            return i1.Validators.minLength(this.fsFormMinLength)(this._control);
        };
        return FsFormMinLengthDirective;
    }(FsControlDirective));
    FsFormMinLengthDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormMinLengthDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    FsFormMinLengthDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsFormMinLengthDirective, selector: "[fsFormMinLength]", inputs: { fsFormMinLength: "fsFormMinLength", validationMessage: ["fsFormMinLengthMessage", "validationMessage"] }, providers: [
            VALIDATE_MESSAGE_PROVIDER
        ], usesInheritance: true, usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormMinLengthDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[fsFormMinLength]',
                        providers: [
                            VALIDATE_MESSAGE_PROVIDER
                        ],
                    }]
            }], propDecorators: { fsFormMinLength: [{
                    type: i0.Input
                }], validationMessage: [{
                    type: i0.Input,
                    args: ['fsFormMinLengthMessage']
                }] } });

    var FsFormMaxLengthDirective = /** @class */ (function (_super) {
        __extends(FsFormMaxLengthDirective, _super);
        function FsFormMaxLengthDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(FsFormMaxLengthDirective.prototype, "validationMessage", {
            set: function (value) {
                this._validateMessages.maxlength = value;
            },
            enumerable: false,
            configurable: true
        });
        FsFormMaxLengthDirective.prototype.ngOnChanges = function () {
            this._control.updateValueAndValidity();
        };
        FsFormMaxLengthDirective.prototype.validate = function (control) {
            return i1.Validators.maxLength(this.fsFormMaxLength)(this._control);
        };
        return FsFormMaxLengthDirective;
    }(FsControlDirective));
    FsFormMaxLengthDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormMaxLengthDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    FsFormMaxLengthDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsFormMaxLengthDirective, selector: "[fsFormMaxLength]", inputs: { fsFormMaxLength: "fsFormMaxLength", validationMessage: ["fsFormMaxLengthMessage", "validationMessage"] }, providers: [
            VALIDATE_MESSAGE_PROVIDER
        ], usesInheritance: true, usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormMaxLengthDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[fsFormMaxLength]',
                        providers: [
                            VALIDATE_MESSAGE_PROVIDER
                        ],
                    }]
            }], propDecorators: { fsFormMaxLength: [{
                    type: i0.Input
                }], validationMessage: [{
                    type: i0.Input,
                    args: ['fsFormMaxLengthMessage']
                }] } });

    var FsFormEmailDirective = /** @class */ (function (_super) {
        __extends(FsFormEmailDirective, _super);
        function FsFormEmailDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(FsFormEmailDirective.prototype, "validationMessage", {
            set: function (value) {
                this._validateMessages.email = value;
            },
            enumerable: false,
            configurable: true
        });
        FsFormEmailDirective.prototype.ngOnChanges = function () {
            this._control.updateValueAndValidity();
        };
        FsFormEmailDirective.prototype.validate = function (control) {
            if (isEnabled(this.fsFormEmail)) {
                return FsValidators.email(this._control);
            }
            else {
                return null;
            }
        };
        return FsFormEmailDirective;
    }(FsControlDirective));
    FsFormEmailDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormEmailDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    FsFormEmailDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsFormEmailDirective, selector: "[fsFormEmail]", inputs: { fsFormEmail: "fsFormEmail", validationMessage: ["fsFormEmailMessage", "validationMessage"] }, providers: [
            VALIDATE_MESSAGE_PROVIDER
        ], usesInheritance: true, usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormEmailDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[fsFormEmail]',
                        providers: [
                            VALIDATE_MESSAGE_PROVIDER
                        ],
                    }]
            }], propDecorators: { fsFormEmail: [{
                    type: i0.Input
                }], validationMessage: [{
                    type: i0.Input,
                    args: ['fsFormEmailMessage']
                }] } });

    var FsFormEmailsDirective = /** @class */ (function (_super) {
        __extends(FsFormEmailsDirective, _super);
        function FsFormEmailsDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(FsFormEmailsDirective.prototype, "validationMessage", {
            set: function (value) {
                this._validateMessages.emails = value;
            },
            enumerable: false,
            configurable: true
        });
        FsFormEmailsDirective.prototype.ngOnChanges = function () {
            this._control.updateValueAndValidity();
        };
        FsFormEmailsDirective.prototype.validate = function (control) {
            if (isEnabled(this.fsFormEmails)) {
                return FsValidators.emails(this._control);
            }
            else {
                return null;
            }
        };
        return FsFormEmailsDirective;
    }(FsControlDirective));
    FsFormEmailsDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormEmailsDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    FsFormEmailsDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsFormEmailsDirective, selector: "[fsFormEmails]", inputs: { fsFormEmails: "fsFormEmails", validationMessage: ["fsFormEmailsMessage", "validationMessage"] }, providers: [
            VALIDATE_MESSAGE_PROVIDER
        ], usesInheritance: true, usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormEmailsDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[fsFormEmails]',
                        providers: [
                            VALIDATE_MESSAGE_PROVIDER
                        ],
                    }]
            }], propDecorators: { fsFormEmails: [{
                    type: i0.Input
                }], validationMessage: [{
                    type: i0.Input,
                    args: ['fsFormEmailsMessage']
                }] } });

    var FsFormPhoneDirective = /** @class */ (function (_super) {
        __extends(FsFormPhoneDirective, _super);
        function FsFormPhoneDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(FsFormPhoneDirective.prototype, "validationMessage", {
            set: function (value) {
                this._validateMessages.phone = value;
            },
            enumerable: false,
            configurable: true
        });
        FsFormPhoneDirective.prototype.ngOnChanges = function () {
            this._control.updateValueAndValidity();
        };
        FsFormPhoneDirective.prototype.validate = function (control) {
            if (isEnabled(this.fsFormPhone)) {
                return FsValidators.phone(this._control);
            }
            else {
                return null;
            }
        };
        return FsFormPhoneDirective;
    }(FsControlDirective));
    FsFormPhoneDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormPhoneDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    FsFormPhoneDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsFormPhoneDirective, selector: "[fsFormPhone]", inputs: { fsFormPhone: "fsFormPhone", validationMessage: ["fsFormPhoneMessage", "validationMessage"] }, providers: [
            VALIDATE_MESSAGE_PROVIDER
        ], usesInheritance: true, usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormPhoneDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[fsFormPhone]',
                        providers: [
                            VALIDATE_MESSAGE_PROVIDER
                        ],
                    }]
            }], propDecorators: { fsFormPhone: [{
                    type: i0.Input
                }], validationMessage: [{
                    type: i0.Input,
                    args: ['fsFormPhoneMessage']
                }] } });

    var FsFormCompareDirective = /** @class */ (function (_super) {
        __extends(FsFormCompareDirective, _super);
        function FsFormCompareDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(FsFormCompareDirective.prototype, "validationMessage", {
            set: function (value) {
                this._validateMessages.compare = value;
            },
            enumerable: false,
            configurable: true
        });
        FsFormCompareDirective.prototype.ngOnChanges = function () {
            this._control.updateValueAndValidity();
        };
        FsFormCompareDirective.prototype.validate = function (control) {
            if (this.fsFormCompare.value === this.elementRef.nativeElement.value) {
                return null;
            }
            else {
                return { compare: true };
            }
        };
        FsFormCompareDirective.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.fsFormCompare.addEventListener('keyup', function () {
                _this._control.updateValueAndValidity();
            }, false);
        };
        FsFormCompareDirective.prototype.ngOnDestroy = function () {
            var _this = this;
            this.fsFormCompare.removeEventListener('keyup', function () {
                _this._control.updateValueAndValidity();
            }, false);
        };
        return FsFormCompareDirective;
    }(FsControlDirective));
    FsFormCompareDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormCompareDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    FsFormCompareDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsFormCompareDirective, selector: "[fsFormCompare]", inputs: { fsFormCompare: "fsFormCompare", validationMessage: ["fsFormCompareMessage", "validationMessage"] }, providers: [
            VALIDATE_MESSAGE_PROVIDER,
        ], usesInheritance: true, usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormCompareDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[fsFormCompare]',
                        providers: [
                            VALIDATE_MESSAGE_PROVIDER,
                        ],
                    }]
            }], propDecorators: { fsFormCompare: [{
                    type: i0.Input
                }], validationMessage: [{
                    type: i0.Input,
                    args: ['fsFormCompareMessage']
                }] } });

    var FsFormIntegerDirective = /** @class */ (function (_super) {
        __extends(FsFormIntegerDirective, _super);
        function FsFormIntegerDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(FsFormIntegerDirective.prototype, "validationMessage", {
            set: function (value) {
                this._validateMessages.integer = value;
            },
            enumerable: false,
            configurable: true
        });
        FsFormIntegerDirective.prototype.ngOnChanges = function () {
            this._control.updateValueAndValidity();
        };
        FsFormIntegerDirective.prototype.validate = function (control) {
            if (isEnabled(this.fsFormInteger)) {
                return FsValidators.integer(this._control);
            }
            else {
                return null;
            }
        };
        return FsFormIntegerDirective;
    }(FsControlDirective));
    FsFormIntegerDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormIntegerDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    FsFormIntegerDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsFormIntegerDirective, selector: "[fsFormInteger]", inputs: { fsFormInteger: "fsFormInteger", validationMessage: ["fsFormIntegerMessage", "validationMessage"] }, providers: [
            VALIDATE_MESSAGE_PROVIDER
        ], usesInheritance: true, usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormIntegerDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[fsFormInteger]',
                        providers: [
                            VALIDATE_MESSAGE_PROVIDER
                        ],
                    }]
            }], propDecorators: { fsFormInteger: [{
                    type: i0.Input
                }], validationMessage: [{
                    type: i0.Input,
                    args: ['fsFormIntegerMessage']
                }] } });

    var FsFormNumericDirective = /** @class */ (function (_super) {
        __extends(FsFormNumericDirective, _super);
        function FsFormNumericDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(FsFormNumericDirective.prototype, "validationMessage", {
            set: function (value) {
                this._validateMessages.numeric = value;
            },
            enumerable: false,
            configurable: true
        });
        FsFormNumericDirective.prototype.ngOnChanges = function () {
            this._control.updateValueAndValidity();
        };
        FsFormNumericDirective.prototype.validate = function (control) {
            if (isEnabled(this.fsFormNumeric)) {
                return FsValidators.numeric(this._control);
            }
            else {
                return null;
            }
        };
        return FsFormNumericDirective;
    }(FsControlDirective));
    FsFormNumericDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormNumericDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    FsFormNumericDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsFormNumericDirective, selector: "[fsFormNumeric]", inputs: { fsFormNumeric: "fsFormNumeric", validationMessage: ["fsFormNumericMessage", "validationMessage"] }, providers: [
            VALIDATE_MESSAGE_PROVIDER
        ], usesInheritance: true, usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormNumericDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[fsFormNumeric]',
                        providers: [
                            VALIDATE_MESSAGE_PROVIDER
                        ],
                    }]
            }], propDecorators: { fsFormNumeric: [{
                    type: i0.Input
                }], validationMessage: [{
                    type: i0.Input,
                    args: ['fsFormNumericMessage']
                }] } });

    var FsFormPatternDirective = /** @class */ (function (_super) {
        __extends(FsFormPatternDirective, _super);
        function FsFormPatternDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(FsFormPatternDirective.prototype, "validationMessage", {
            set: function (value) {
                this._validateMessages.pattern = value;
            },
            enumerable: false,
            configurable: true
        });
        FsFormPatternDirective.prototype.ngOnChanges = function () {
            this._control.updateValueAndValidity();
        };
        FsFormPatternDirective.prototype.validate = function (control) {
            return i1.Validators.pattern(this.fsFormPattern)(this._control);
        };
        return FsFormPatternDirective;
    }(FsControlDirective));
    FsFormPatternDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormPatternDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    FsFormPatternDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsFormPatternDirective, selector: "[fsFormPattern]", inputs: { fsFormPattern: "fsFormPattern", validationMessage: ["fsFormPatternMessage", "validationMessage"] }, providers: [
            VALIDATE_MESSAGE_PROVIDER
        ], usesInheritance: true, usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormPatternDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[fsFormPattern]',
                        providers: [
                            VALIDATE_MESSAGE_PROVIDER
                        ],
                    }]
            }], propDecorators: { fsFormPattern: [{
                    type: i0.Input
                }], validationMessage: [{
                    type: i0.Input,
                    args: ['fsFormPatternMessage']
                }] } });

    var FsFormFunctionDirective = /** @class */ (function (_super) {
        __extends(FsFormFunctionDirective, _super);
        function FsFormFunctionDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FsFormFunctionDirective.prototype.ngOnChanges = function () {
            this._control.updateValueAndValidity();
        };
        FsFormFunctionDirective.prototype.validateAsync = function (control) {
            return FsValidators.func(this._control, this.fsFormFunction, this.fsFormFunctionData);
        };
        return FsFormFunctionDirective;
    }(FsControlDirective));
    FsFormFunctionDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormFunctionDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    FsFormFunctionDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsFormFunctionDirective, selector: "[fsFormFunction]", inputs: { fsFormFunction: "fsFormFunction", fsFormFunctionData: "fsFormFunctionData" }, providers: [
            VALIDATE_MESSAGE_PROVIDER
        ], usesInheritance: true, usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormFunctionDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[fsFormFunction]',
                        providers: [
                            VALIDATE_MESSAGE_PROVIDER
                        ],
                    }]
            }], propDecorators: { fsFormFunction: [{
                    type: i0.Input
                }], fsFormFunctionData: [{
                    type: i0.Input
                }] } });

    var FsFormGreaterDirective = /** @class */ (function (_super) {
        __extends(FsFormGreaterDirective, _super);
        function FsFormGreaterDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(FsFormGreaterDirective.prototype, "validationMessage", {
            set: function (value) {
                this._validateMessages.greater = value;
            },
            enumerable: false,
            configurable: true
        });
        FsFormGreaterDirective.prototype.ngOnChanges = function () {
            this._control.updateValueAndValidity();
        };
        FsFormGreaterDirective.prototype.validate = function (control) {
            var greater = parseFloat(this.fsFormGreater);
            var value = parseFloat(this._control.value);
            if (!isNaN(greater) && !isNaN(value) && value <= greater) {
                return { greater: { greater: greater, actual: value } };
            }
            return FsValidators.numeric(this._control);
        };
        return FsFormGreaterDirective;
    }(FsControlDirective));
    FsFormGreaterDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormGreaterDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    FsFormGreaterDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsFormGreaterDirective, selector: "[fsFormGreater]", inputs: { fsFormGreater: "fsFormGreater", validationMessage: ["fsFormGreaterMessage", "validationMessage"] }, providers: [
            VALIDATE_MESSAGE_PROVIDER
        ], usesInheritance: true, usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormGreaterDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[fsFormGreater]',
                        providers: [
                            VALIDATE_MESSAGE_PROVIDER
                        ],
                    }]
            }], propDecorators: { fsFormGreater: [{
                    type: i0.Input
                }], validationMessage: [{
                    type: i0.Input,
                    args: ['fsFormGreaterMessage']
                }] } });

    var FsFormDateRangeDirective = /** @class */ (function (_super) {
        __extends(FsFormDateRangeDirective, _super);
        function FsFormDateRangeDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(FsFormDateRangeDirective.prototype, "validationMessage", {
            set: function (value) {
                this._validateMessages.dateRange = value;
            },
            enumerable: false,
            configurable: true
        });
        FsFormDateRangeDirective.prototype.ngOnChanges = function () {
            this._control.updateValueAndValidity();
        };
        FsFormDateRangeDirective.prototype.validate = function (control) {
            if (isEnabled(this.fsFormDateRange)) {
                return FsValidators.dateRange(this._control);
            }
            else {
                return null;
            }
        };
        return FsFormDateRangeDirective;
    }(FsControlDirective));
    FsFormDateRangeDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormDateRangeDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    FsFormDateRangeDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsFormDateRangeDirective, selector: "[fsFormDateRange]", inputs: { fsFormDateRange: "fsFormDateRange", validationMessage: ["fsFormDateRangeMessage", "validationMessage"] }, providers: [
            VALIDATE_MESSAGE_PROVIDER
        ], usesInheritance: true, usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormDateRangeDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[fsFormDateRange]',
                        providers: [
                            VALIDATE_MESSAGE_PROVIDER
                        ],
                    }]
            }], propDecorators: { fsFormDateRange: [{
                    type: i0.Input
                }], validationMessage: [{
                    type: i0.Input,
                    args: ['fsFormDateRangeMessage']
                }] } });

    var FsFormLesserDirective = /** @class */ (function (_super) {
        __extends(FsFormLesserDirective, _super);
        function FsFormLesserDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(FsFormLesserDirective.prototype, "validationMessage", {
            set: function (value) {
                this._validateMessages.lesser = value;
            },
            enumerable: false,
            configurable: true
        });
        FsFormLesserDirective.prototype.ngOnChanges = function () {
            this._control.updateValueAndValidity();
        };
        FsFormLesserDirective.prototype.validate = function (control) {
            var lesser = parseFloat(this.fsFormLesser);
            var value = parseFloat(this._control.value);
            if (!isNaN(lesser) && !isNaN(value) && value >= lesser) {
                return { lesser: { lesser: lesser, actual: value } };
            }
            return FsValidators.numeric(this._control);
        };
        return FsFormLesserDirective;
    }(FsControlDirective));
    FsFormLesserDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormLesserDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    FsFormLesserDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsFormLesserDirective, selector: "[fsFormLesser]", inputs: { fsFormLesser: "fsFormLesser", validationMessage: ["fsFormLesserMessage", "validationMessage"] }, providers: [
            VALIDATE_MESSAGE_PROVIDER
        ], usesInheritance: true, usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormLesserDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[fsFormLesser]',
                        providers: [
                            VALIDATE_MESSAGE_PROVIDER
                        ],
                    }]
            }], propDecorators: { fsFormLesser: [{
                    type: i0.Input
                }], validationMessage: [{
                    type: i0.Input,
                    args: ['fsFormLesserMessage']
                }] } });

    var FsFormUrlDirective = /** @class */ (function (_super) {
        __extends(FsFormUrlDirective, _super);
        function FsFormUrlDirective() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.fsFormUrlProtocol = false;
            return _this;
        }
        Object.defineProperty(FsFormUrlDirective.prototype, "validationMessage", {
            set: function (value) {
                this._validateMessages.url = value;
            },
            enumerable: false,
            configurable: true
        });
        FsFormUrlDirective.prototype.ngOnChanges = function () {
            this._control.updateValueAndValidity();
        };
        FsFormUrlDirective.prototype.validate = function (control) {
            if (isEnabled(this.fsFormUrl)) {
                return FsValidators.url(this._control, this.fsFormUrlProtocol);
            }
            else {
                return null;
            }
        };
        return FsFormUrlDirective;
    }(FsControlDirective));
    FsFormUrlDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormUrlDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    FsFormUrlDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsFormUrlDirective, selector: "[fsFormUrl]", inputs: { fsFormUrl: "fsFormUrl", fsFormUrlProtocol: "fsFormUrlProtocol", validationMessage: ["fsFormUrlMessage", "validationMessage"] }, providers: [
            VALIDATE_MESSAGE_PROVIDER
        ], usesInheritance: true, usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormUrlDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[fsFormUrl]',
                        providers: [
                            VALIDATE_MESSAGE_PROVIDER
                        ],
                    }]
            }], propDecorators: { fsFormUrl: [{
                    type: i0.Input
                }], fsFormUrlProtocol: [{
                    type: i0.Input
                }], validationMessage: [{
                    type: i0.Input,
                    args: ['fsFormUrlMessage']
                }] } });

    var FsSubmitButtonDirective = /** @class */ (function () {
        function FsSubmitButtonDirective(_matButton, _form, _elementRef, _cdRef) {
            this._matButton = _matButton;
            this._form = _form;
            this._elementRef = _elementRef;
            this._cdRef = _cdRef;
            this.dirtySubmit = true;
            this.transitionStyle = null;
            this.active = false;
            this._destroy$ = new rxjs.Subject();
        }
        FsSubmitButtonDirective.prototype.ngOnInit = function () {
            var _this = this;
            if (this._form) {
                this._form.addSubmitButton(this);
                rxjs.fromEvent(this.element, 'click')
                    .pipe(operators.takeUntil(this._destroy$))
                    .subscribe(function () {
                    _this.active = true;
                });
                if (this.dirtySubmit) {
                    if (this._form.dirtySubmitButton) {
                        if (!this._form.ngForm.dirty) {
                            this.disable();
                        }
                    }
                }
                this.transitionStyle = 'none';
                setTimeout(function () {
                    _this.transitionStyle = null;
                }, 500);
            }
        };
        FsSubmitButtonDirective.prototype.disable = function () {
            if (this._matButton) {
                this._matButton.disabled = true;
                this._cdRef.markForCheck();
            }
        };
        FsSubmitButtonDirective.prototype.enable = function () {
            if (this._matButton) {
                this._matButton.disabled = false;
                this._matButton.disableRipple = true;
                this._cdRef.markForCheck();
            }
        };
        FsSubmitButtonDirective.prototype.process = function () {
            this.setClass('process');
            this._matButton.disableRipple = true;
        };
        FsSubmitButtonDirective.prototype.success = function () {
            this.setClass('success');
            this._matButton.disableRipple = false;
        };
        FsSubmitButtonDirective.prototype.error = function () {
            this.setClass('error');
            this._matButton.disableRipple = false;
        };
        FsSubmitButtonDirective.prototype.setClass = function (cls) {
            var svg = this._getSvg(cls);
            this._resetClass();
            this._disableShadowAnimation();
            this.element.classList.add("submit-" + cls);
            this.element.append(svg);
        };
        Object.defineProperty(FsSubmitButtonDirective.prototype, "element", {
            get: function () {
                return this._elementRef.nativeElement;
            },
            enumerable: false,
            configurable: true
        });
        FsSubmitButtonDirective.prototype.reset = function () {
            this.active = false;
            this.enable();
            this.element.querySelectorAll('.svg-icon')
                .forEach(function (el) {
                el.remove();
            });
            this._matButton.disableRipple = false;
            this._resetClass();
        };
        FsSubmitButtonDirective.prototype.ngOnDestroy = function () {
            this._destroy$.next();
            this._destroy$.complete();
            this._form.removeSubmitButton(this);
        };
        FsSubmitButtonDirective.prototype._disableShadowAnimation = function () {
            // .mat-elevation-z2 removes the click shadow animation
            //this.element.classList.add('mat-elevation-z2');
        };
        FsSubmitButtonDirective.prototype._resetClass = function () {
            this.element.classList.remove('submit-success', 'submit-error', 'submit-process', 'mat-elevation-z2');
        };
        FsSubmitButtonDirective.prototype._getSvg = function (type) {
            if (type === 'success') {
                return new DOMParser().parseFromString("<svg class=\"svg-icon svg-icon-success\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 38 38\" style=\"enable-background:new 0 0 38 38;\" xml:space=\"preserve\" width=\"38px\" height=\"38px\">\n      <g>\n        <g class=\"check\">\n          <g>\n            <path d=\"M29.6,11.9c-0.5-0.5-1.3-0.5-1.8,0L16.3,23.4l-6.1-6.1c-0.5-0.5-1.3-0.5-1.8,0s-0.5,1.3,0,1.8l7,7c0.3,0.3,0.6,0.4,0.9,0.4s0.7-0.1,0.9-0.4l12.4-12.4C30.1,13.2,30.1,12.4,29.6,11.9z\"/>\n          </g>\n        </g>\n      </g>\n      </svg>", 'text/xml').firstChild;
            }
            if (type === 'process') {
                return new DOMParser().parseFromString("<svg class=\"svg-icon svg-icon-process\" width=\"38\" height=\"38\" viewBox=\"0 0 38 38\" xmlns=\"http://www.w3.org/2000/svg\">\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <g transform=\"translate(1 1)\" stroke-width=\"2\"><circle stroke-opacity=\".5\" cx=\"18\" cy=\"18\" r=\"18\"/>\n          <path d=\"M36 18c0-9.94-8.06-18-18-18\"><animateTransform attributeName=\"transform\" type=\"rotate\" from=\"0 18 18\" to=\"360 18 18\" dur=\".7s\" repeatCount=\"indefinite\"/></path>\n        </g>\n      </g>\n      </svg>", 'text/xml').firstChild;
            }
            if (type === 'error') {
                return new DOMParser().parseFromString("<svg class=\"svg-icon svg-icon-error\" xmlns=\"http://www.w3.org/2000/svg\" width=\"38px\" height=\"38px\" viewBox=\"0 0 16 16\"><g><path d=\"M8 1c3.9 0 7 3.1 7 7s-3.1 7-7 7-7-3.1-7-7 3.1-7 7-7zM8 0c-4.4 0-8 3.6-8 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8v0z\" data-original=\"#444444\" data-old_color=\"#444444\"/><path d=\"M12.2 10.8l-2.8-2.8 2.8-2.8-1.4-1.4-2.8 2.8-2.8-2.8-1.4 1.4 2.8 2.8-2.8 2.8 1.4 1.4 2.8-2.8 2.8 2.8z\"/></g> </svg>", 'text/xml').firstChild;
            }
        };
        return FsSubmitButtonDirective;
    }());
    FsSubmitButtonDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsSubmitButtonDirective, deps: [{ token: i1__namespace$1.MatButton, host: true, optional: true }, { token: FsFormDirective, optional: true }, { token: i0__namespace.ElementRef }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    FsSubmitButtonDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsSubmitButtonDirective, selector: "button[type=\"submit\"]", inputs: { name: "name", dirtySubmit: "dirtySubmit" }, host: { properties: { "style.transition": "this.transitionStyle" } }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsSubmitButtonDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: 'button[type="submit"]',
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace$1.MatButton, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Host
                        }] }, { type: FsFormDirective, decorators: [{
                            type: i0.Optional
                        }] }, { type: i0__namespace.ElementRef }, { type: i0__namespace.ChangeDetectorRef }];
        }, propDecorators: { name: [{
                    type: i0.Input
                }], dirtySubmit: [{
                    type: i0.Input
                }], transitionStyle: [{
                    type: i0.HostBinding,
                    args: ['style.transition']
                }] } });

    var FsFormValidateDirective = /** @class */ (function (_super) {
        __extends(FsFormValidateDirective, _super);
        function FsFormValidateDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FsFormValidateDirective.prototype.ngOnChanges = function () {
            this._control.updateValueAndValidity();
        };
        FsFormValidateDirective.prototype.validateAsync = function (control) {
            return FsValidators.func(this._control, this.validateFn, this.validateFnData);
        };
        return FsFormValidateDirective;
    }(FsControlDirective));
    FsFormValidateDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormValidateDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    FsFormValidateDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsFormValidateDirective, selector: "[validate]", inputs: { validateFn: ["validate", "validateFn"], validateFnData: ["validateData", "validateFnData"] }, providers: [
            VALIDATE_MESSAGE_PROVIDER
        ], usesInheritance: true, usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormValidateDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[validate]',
                        providers: [
                            VALIDATE_MESSAGE_PROVIDER
                        ],
                    }]
            }], propDecorators: { validateFn: [{
                    type: i0.Input,
                    args: ['validate']
                }], validateFnData: [{
                    type: i0.Input,
                    args: ['validateData']
                }] } });

    var FsFormDialogActionsComponent = /** @class */ (function () {
        function FsFormDialogActionsComponent(_form, _dialogRef, _cdRef) {
            this._form = _form;
            this._dialogRef = _dialogRef;
            this._cdRef = _cdRef;
            this.save = true;
            this.create = false;
            this.close = false;
            this.dirty = false;
            this._destroy$ = new rxjs.Subject();
        }
        FsFormDialogActionsComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this._form) {
                this._form.ngForm.valueChanges
                    .pipe(operators.filter(function () { return (!_this.dirty); }), operators.takeUntil(this._destroy$))
                    .subscribe(function () {
                    _this.dirty = _this._form.ngForm.dirty;
                    _this._cdRef.markForCheck();
                });
                this._form.submitted
                    .pipe(operators.delay(50), operators.takeUntil(this._destroy$))
                    .subscribe(function () {
                    _this.dirty = false;
                    _this._cdRef.markForCheck();
                });
                this._form.reseted
                    .pipe(operators.takeUntil(this._destroy$))
                    .subscribe(function () {
                    _this.dirty = false;
                    _this._cdRef.markForCheck();
                });
            }
        };
        FsFormDialogActionsComponent.prototype.closeClick = function () {
            var _this = this;
            if (this._form) {
                this._form.triggerConfirm()
                    .pipe(operators.filter(function (confirmResult) { return (confirmResult !== exports.ConfirmResult.Review); }), operators.takeUntil(this._destroy$))
                    .subscribe(function () {
                    _this._dialogRef.close(null);
                });
            }
            else {
                this._dialogRef.close(null);
            }
        };
        FsFormDialogActionsComponent.prototype.ngOnDestroy = function () {
            this._destroy$.next();
            this._destroy$.complete();
        };
        return FsFormDialogActionsComponent;
    }());
    FsFormDialogActionsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormDialogActionsComponent, deps: [{ token: FsFormDirective, optional: true }, { token: i2__namespace$1.MatDialogRef, optional: true }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FsFormDialogActionsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsFormDialogActionsComponent, selector: "fs-form-dialog-actions", inputs: { save: "save", create: "create", close: "close", name: "name" }, ngImport: i0__namespace, template: "<div class=\"buttons\">\r\n  <ng-container *ngIf=\"save\">\r\n    <button \r\n        mat-button \r\n        type=\"submit\"\r\n        color=\"primary\" \r\n        [name]=\"name\">\r\n      {{create ? 'Create' : 'Save'}}\r\n    </button>\r\n    <button \r\n        mat-button \r\n        type=\"button\"\r\n        [disabled]=\"close && !dirty && !create\"\r\n        [matDialogClose]=\"null\">\r\n      Cancel\r\n    </button>\r\n  </ng-container>\r\n\r\n  <ng-content></ng-content>\r\n  <div class=\"close\" *ngIf=\"close\">\r\n    <button \r\n        mat-button \r\n        type=\"button\"\r\n        [color]=\"dirty ? 'basic' : 'primary'\"\r\n        (click)=\"closeClick()\">\r\n      Close\r\n    </button>\r\n  </div>\r\n</div>", styles: [".buttons{display:flex;flex-grow:1;align-items:center}.buttons .close{display:flex;flex-grow:1;justify-content:flex-end}:host{display:flex;flex-grow:1}@media only screen and (max-width: 599px){.buttons{flex-direction:column}}\n"], components: [{ type: i1__namespace$1.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: FsSubmitButtonDirective, selector: "button[type=\"submit\"]", inputs: ["name", "dirtySubmit"] }, { type: i2__namespace$1.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["type", "mat-dialog-close", "aria-label", "matDialogClose"], exportAs: ["matDialogClose"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormDialogActionsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'fs-form-dialog-actions',
                        templateUrl: './form-dialog-actions.component.html',
                        styleUrls: ['./form-dialog-actions.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () {
            return [{ type: FsFormDirective, decorators: [{
                            type: i0.Optional
                        }] }, { type: i2__namespace$1.MatDialogRef, decorators: [{
                            type: i0.Optional
                        }] }, { type: i0__namespace.ChangeDetectorRef }];
        }, propDecorators: { save: [{
                    type: i0.Input
                }], create: [{
                    type: i0.Input
                }], close: [{
                    type: i0.Input
                }], name: [{
                    type: i0.Input
                }] } });

    var FsFormModule = /** @class */ (function () {
        function FsFormModule() {
        }
        FsFormModule.forRoot = function () {
            return {
                ngModule: FsFormModule,
            };
        };
        return FsFormModule;
    }());
    FsFormModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    FsFormModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormModule, declarations: [FsFormDirective,
            FsControlDirective,
            FsFormRequiredDirective,
            FsFormMinDirective,
            FsFormMaxDirective,
            FsFormMinLengthDirective,
            FsFormMaxLengthDirective,
            FsFormEmailDirective,
            FsFormEmailsDirective,
            FsFormPhoneDirective,
            FsFormCompareDirective,
            FsFormIntegerDirective,
            FsFormNumericDirective,
            FsFormPatternDirective,
            FsFormFunctionDirective,
            FsFormDateRangeDirective,
            FsFormGreaterDirective,
            FsFormLesserDirective,
            FsFormUrlDirective,
            FsFormDialogCloseDirective,
            FsSubmitButtonDirective,
            FsFormValidateDirective,
            FsFormDialogActionsComponent], imports: [i4.CommonModule,
            i1.FormsModule,
            i1$1.MatButtonModule,
            i2$1.MatDialogModule], exports: [FsFormDirective,
            FsControlDirective,
            FsFormRequiredDirective,
            FsFormMinDirective,
            FsFormMaxDirective,
            FsFormMinLengthDirective,
            FsFormMaxLengthDirective,
            FsFormEmailDirective,
            FsFormEmailsDirective,
            FsFormPhoneDirective,
            FsFormCompareDirective,
            FsFormIntegerDirective,
            FsFormNumericDirective,
            FsFormPatternDirective,
            FsFormFunctionDirective,
            FsFormDateRangeDirective,
            FsFormGreaterDirective,
            FsFormLesserDirective,
            FsFormUrlDirective,
            FsFormDialogCloseDirective,
            FsSubmitButtonDirective,
            FsFormValidateDirective,
            FsFormDialogActionsComponent] });
    FsFormModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormModule, providers: [
            {
                provide: core.ErrorStateMatcher,
                useClass: core.ShowOnDirtyErrorStateMatcher,
            },
        ], imports: [[
                i4.CommonModule,
                i1.FormsModule,
                i1$1.MatButtonModule,
                i2$1.MatDialogModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsFormModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i4.CommonModule,
                            i1.FormsModule,
                            i1$1.MatButtonModule,
                            i2$1.MatDialogModule,
                        ],
                        declarations: [
                            FsFormDirective,
                            FsControlDirective,
                            FsFormRequiredDirective,
                            FsFormMinDirective,
                            FsFormMaxDirective,
                            FsFormMinLengthDirective,
                            FsFormMaxLengthDirective,
                            FsFormEmailDirective,
                            FsFormEmailsDirective,
                            FsFormPhoneDirective,
                            FsFormCompareDirective,
                            FsFormIntegerDirective,
                            FsFormNumericDirective,
                            FsFormPatternDirective,
                            FsFormFunctionDirective,
                            FsFormDateRangeDirective,
                            FsFormGreaterDirective,
                            FsFormLesserDirective,
                            FsFormUrlDirective,
                            FsFormDialogCloseDirective,
                            FsSubmitButtonDirective,
                            FsFormValidateDirective,
                            FsFormDialogActionsComponent,
                        ],
                        exports: [
                            FsFormDirective,
                            FsControlDirective,
                            FsFormRequiredDirective,
                            FsFormMinDirective,
                            FsFormMaxDirective,
                            FsFormMinLengthDirective,
                            FsFormMaxLengthDirective,
                            FsFormEmailDirective,
                            FsFormEmailsDirective,
                            FsFormPhoneDirective,
                            FsFormCompareDirective,
                            FsFormIntegerDirective,
                            FsFormNumericDirective,
                            FsFormPatternDirective,
                            FsFormFunctionDirective,
                            FsFormDateRangeDirective,
                            FsFormGreaterDirective,
                            FsFormLesserDirective,
                            FsFormUrlDirective,
                            FsFormDialogCloseDirective,
                            FsSubmitButtonDirective,
                            FsFormValidateDirective,
                            FsFormDialogActionsComponent,
                        ],
                        providers: [
                            {
                                provide: core.ErrorStateMatcher,
                                useClass: core.ShowOnDirtyErrorStateMatcher,
                            },
                        ],
                    }]
            }] });

    var FormDeactivateGuard = /** @class */ (function () {
        function FormDeactivateGuard(_prompt) {
            this._prompt = _prompt;
        }
        FormDeactivateGuard.prototype.canDeactivate = function (directive) {
            if (!('getForm' in directive)) {
                var error = "Directive " + directive.constructor.name + " does not property implement interface FormDeactivate";
                console.error(error);
                return rxjs.of(true);
            }
            var form = directive.getForm();
            if (!(form instanceof FsFormDirective)) {
                var error = "Directive " + directive.constructor.name + ".getForm() does not return a valid FsFormDirective";
                console.error(error);
                return rxjs.of(true);
            }
            return confirmUnsaved(form, this._prompt)
                .pipe(operators.map(function (result) {
                return confirmResultContinue(result);
            }));
        };
        return FormDeactivateGuard;
    }());
    FormDeactivateGuard.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FormDeactivateGuard, deps: [{ token: i3__namespace.FsPrompt }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    FormDeactivateGuard.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FormDeactivateGuard, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FormDeactivateGuard, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i3__namespace.FsPrompt }]; } });

    // Modules

    /**
     * Generated bundle index. Do not edit.
     */

    exports.FormDeactivateGuard = FormDeactivateGuard;
    exports.FsControlDirective = FsControlDirective;
    exports.FsForm = FsForm;
    exports.FsFormCompareDirective = FsFormCompareDirective;
    exports.FsFormDateRangeDirective = FsFormDateRangeDirective;
    exports.FsFormDialogActionsComponent = FsFormDialogActionsComponent;
    exports.FsFormDialogCloseDirective = FsFormDialogCloseDirective;
    exports.FsFormDirective = FsFormDirective;
    exports.FsFormEmailDirective = FsFormEmailDirective;
    exports.FsFormEmailsDirective = FsFormEmailsDirective;
    exports.FsFormFunctionDirective = FsFormFunctionDirective;
    exports.FsFormGreaterDirective = FsFormGreaterDirective;
    exports.FsFormIntegerDirective = FsFormIntegerDirective;
    exports.FsFormLesserDirective = FsFormLesserDirective;
    exports.FsFormMaxDirective = FsFormMaxDirective;
    exports.FsFormMaxLengthDirective = FsFormMaxLengthDirective;
    exports.FsFormMinDirective = FsFormMinDirective;
    exports.FsFormMinLengthDirective = FsFormMinLengthDirective;
    exports.FsFormModule = FsFormModule;
    exports.FsFormNumericDirective = FsFormNumericDirective;
    exports.FsFormPatternDirective = FsFormPatternDirective;
    exports.FsFormPhoneDirective = FsFormPhoneDirective;
    exports.FsFormRequiredDirective = FsFormRequiredDirective;
    exports.FsFormUrlDirective = FsFormUrlDirective;
    exports.FsFormValidateDirective = FsFormValidateDirective;
    exports.FsSubmitButtonDirective = FsSubmitButtonDirective;
    exports.FsValidators = FsValidators;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=firestitch-form.umd.js.map
