import { ContentChildren, Directive, ElementRef, EventEmitter, HostBinding, Inject, Input, NgZone, Optional, Output, QueryList, } from '@angular/core';
import { NgForm } from '@angular/forms';
import { MatDialogRef } from '@angular/material/dialog';
import { MatTabGroup } from '@angular/material/tabs';
import { FsMessage, MessageMode } from '@firestitch/message';
import { FsPrompt } from '@firestitch/prompt';
import { guid } from '@firestitch/common';
import { DrawerRef } from '@firestitch/drawer';
import { BehaviorSubject, defer, fromEvent, iif, isObservable, of, Subject, throwError } from 'rxjs';
import { catchError, delay, filter, first, map, mergeMap, startWith, switchMap, take, takeUntil, tap } from 'rxjs/operators';
import { confirmUnsaved } from '../../helpers/confirm-unsaved';
import { FsFormDialogCloseDirective } from '../form-dialog-close.directive';
import { ConfirmResult } from './../../enums/confirm-result';
import { FsForm } from '../../services/fsform.service';
import { FormStatus } from './../../enums/form-status';
import { confirmResultContinue } from '../../helpers/confirm-result-continue';
import { getFormErrors } from '../../helpers/get-form-errors';
import * as i0 from "@angular/core";
import * as i1 from "../../services/fsform.service";
import * as i2 from "@firestitch/message";
import * as i3 from "@firestitch/prompt";
import * as i4 from "@angular/forms";
import * as i5 from "@angular/material/dialog";
import * as i6 from "@firestitch/drawer";
export class FsFormDirective {
    constructor(ngForm, _form, _element, _message, _prompt, _ngZone, _dialogRef, _drawerRef) {
        this.ngForm = ngForm;
        this._form = _form;
        this._element = _element;
        this._message = _message;
        this._prompt = _prompt;
        this._ngZone = _ngZone;
        this._dialogRef = _dialogRef;
        this._drawerRef = _drawerRef;
        this.wrapperSelector = '.fs-form-wrapper,.mat-form-field';
        this.messageSelector = '.fs-form-message,.mat-form-field-subscript-wrapper';
        this.hintSelector = '.fs-form-hint,.mat-form-field-hint-wrapper';
        this.labelSelector = '.fs-form-label,.mat-form-field-label';
        this.autocomplete = false;
        this.shortcuts = true; // Ctrl + s
        this.confirm = true;
        this.confirmDialog = true;
        this.confirmDrawer = true;
        this.confirmBrowser = true;
        this.confirmTabs = true;
        this.dirtySubmitButton = true;
        this.successDelay = 0;
        this.errorDelay = 1000;
        this.submitEvent = new EventEmitter();
        this.invalid = new EventEmitter();
        this.valid = new EventEmitter();
        this.submitted = new EventEmitter();
        this.reseted = new EventEmitter();
        this.cleared = new EventEmitter();
        this.fsformClass = true;
        this._tabGroups = new QueryList();
        this._submitButtons = new QueryList();
        this._dialogBackdropEscape = false;
        this._snapshot = {};
        this._status$ = new BehaviorSubject(FormStatus.Valid);
        this._destroy$ = new Subject();
    }
    get submitting() {
        return this._status$.getValue() === FormStatus.Submitting;
    }
    get completing() {
        return this._status$.getValue() === FormStatus.Completing;
    }
    get _submitEvent() {
        return {
            ngForm: this.ngForm,
            submitter: this._submitter,
        };
    }
    get _formValidState$() {
        this._form.broadcast('valid', this._submitEvent);
        this.submitEvent.emit(this._submitEvent);
        this.valid.emit(this._submitEvent);
        const submittedEvent = {
            ngForm: this.ngForm,
            submitter: this._submitter,
            response: null
        };
        if (!this.submit) {
            return of(submittedEvent);
        }
        const result = this.submit(this._submitEvent);
        if (!isObservable(result)) {
            return of(submittedEvent);
        }
        return result
            .pipe(map((response) => {
            submittedEvent.response = response;
            return submittedEvent;
        }));
    }
    get _formInvalidState$() {
        this._form.broadcast('invalid', this._submitEvent);
        if (this.invalid) {
            this.invalid.emit(this._submitEvent);
        }
        const message = 'Changes not saved. Please review errors highlighted in red.';
        this._message.error(message, { mode: MessageMode.Toast });
        const el = this._element.nativeElement.querySelector('.ng-invalid');
        if (el) {
            el.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
        return throwError('Form validation error');
    }
    get _submitter() {
        return this._activeSubmitButton
            ? this._activeSubmitButton.name
            : null;
    }
    ngOnInit() {
        this._registerConfirmDialogBackdropEscape();
        this._listenHotKeys();
        this._listenWindowClose();
        this._listenSubmit();
        if (!this.autocomplete) {
            this._registerAutocomplete();
        }
    }
    ngOnChanges(changes) {
        if (changes.confirm) {
            this._updateDirtySubmitButtons();
        }
    }
    ngAfterContentInit() {
        this._registerConfirm();
        this._registerConfirmDialogClose();
        this._registerConfirmDrawerClose();
        this._registerConfirmTabs();
        this._registerDrawerClose();
        this._registerDirtySubmitButton();
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
    createSnapshot() {
        this._snapshot = this.ngForm.value;
    }
    reset() {
        this.ngForm.resetForm();
        Object.keys(this.ngForm.controls)
            .forEach((name) => {
            const control = this.ngForm.controls[name];
            control.reset(this._snapshot[name]);
        });
        this.reseted.emit();
    }
    clear() {
        this.ngForm.resetForm();
        this.cleared.emit();
    }
    dirty() {
        this.ngForm.form.markAsDirty();
        this._updateDirtySubmitButtons();
    }
    triggerSubmit() {
        this.ngForm.ngSubmit.next();
    }
    triggerConfirm() {
        const submitted = this.submitting ? this.submitted.asObservable() : of({});
        return submitted
            .pipe(take(1), mergeMap(() => confirmUnsaved(this, this._prompt)));
    }
    enable() {
        this.ngForm.control.enable();
        this._updateDirtySubmitButtons();
    }
    disable() {
        this.ngForm.control.disable();
        this._submitButtons.forEach((button) => {
            button.disable();
        });
    }
    addSubmitButton(submitButton) {
        this._submitButtons.reset([
            ...this._submitButtons.toArray(),
            submitButton,
        ]);
    }
    removeSubmitButton(submitButton) {
        this._submitButtons.reset([
            ...this._submitButtons.toArray()
                .filter((submitButton_) => (submitButton !== submitButton_)),
        ]);
    }
    _listenSubmit() {
        this.ngForm
            .ngSubmit
            .pipe(tap((event) => {
            event === null || event === void 0 ? void 0 : event.preventDefault();
        }), filter(() => {
            return [FormStatus.Valid, FormStatus.Invalid]
                .includes(this._status$.getValue());
        }), tap(() => this._markControlsAsTouchedAndUpdateValidity()), tap(() => this._broadcastSubmittingEvents()), switchMap(() => this._waitUntilStatusPending()), tap(() => this._setupActiveSubmitButton()), mergeMap(() => {
            return this.ngForm.status === 'INVALID'
                ? this._formInvalidState$
                : this._formValidState$;
        }), catchError((e, source$) => {
            this._handleError(e);
            return source$;
        }), tap((submittedEvent) => {
            this._completeSubmit(true, submittedEvent);
        }), takeUntil(this._destroy$))
            .subscribe(() => { });
    }
    _listenWindowClose() {
        fromEvent(window, 'beforeunload')
            .pipe(takeUntil(this._destroy$))
            .subscribe((event) => {
            if (this.confirm && this.confirmBrowser && this.ngForm.dirty) {
                event.returnValue = false;
            }
        });
    }
    _listenHotKeys() {
        this._ngZone.runOutsideAngular(() => {
            fromEvent(document, 'keydown')
                .pipe(takeUntil(this._destroy$))
                .subscribe((event) => {
                if (this._dialogBackdropEscape && event.code === 'Escape') {
                    const dialog = document.getElementById(this._dialogRef.id);
                    const paths = event.composedPath();
                    if (paths) {
                        paths.forEach(item => {
                            if (dialog === item) {
                                this._ngZone.run(() => {
                                    this._formClose();
                                });
                            }
                        });
                    }
                }
                if ((event.ctrlKey || event.metaKey) && event.code === 'KeyS') {
                    event.preventDefault();
                    if (this.shortcuts) {
                        if (this._elementInForm(document.activeElement)) {
                            this.ngForm.ngSubmit.next();
                        }
                    }
                }
            });
        });
    }
    _formClose() {
        if (this.confirm && this.confirmDialog) {
            this.triggerConfirm()
                .pipe(filter((result) => confirmResultContinue(result)), switchMap((result) => {
                return result === ConfirmResult.Pristine || result === ConfirmResult.Discard
                    ? of(null)
                    : this.submitted.asObservable();
            }), takeUntil(this._destroy$))
                .subscribe((result) => {
                this._dialogRef.close(result === null || result === void 0 ? void 0 : result.response);
            });
        }
        else {
            this._dialogRef.close(null);
        }
    }
    _registerDialogClose(directive) {
        if (!directive.registered) {
            directive.registered = true;
            directive.clicked$
                .pipe(takeUntil(this._destroy$))
                .subscribe(() => {
                this._formClose();
            });
        }
    }
    _getActiveButton() {
        const activeButton = this._submitButtons.find(button => {
            return button.active;
        });
        return activeButton ? activeButton : this._submitButtons.first;
    }
    _elementInForm(el) {
        if (el.isSameNode(this._element.nativeElement)) {
            return true;
        }
        else if (el.parentElement) {
            return this._elementInForm(el.parentElement);
        }
        return false;
    }
    _completeSubmit(success, submitEvent) {
        if (success) {
            this.ngForm.control.markAsPristine();
            this.createSnapshot();
            this.submitted.emit(submitEvent);
        }
        else {
            this._resetButtons();
        }
        if (this._activeSubmitButton) {
            if (success) {
                this._activeSubmitButton.success();
            }
            else {
                this._activeSubmitButton.error();
            }
        }
        this._status$.next(FormStatus.Submitted);
        if (success) {
            this._status$.next(FormStatus.Success);
        }
        else {
            this._status$.next(FormStatus.Error);
        }
        this._status$.next(FormStatus.Completing);
        const resetDelay = success ? this.successDelay : this.errorDelay;
        of(true)
            .pipe(delay(resetDelay), first(), takeUntil(this._destroy$)).subscribe(() => {
            if (this.ngForm.form.status === 'VALID') {
                this._status$.next(FormStatus.Valid);
            }
            else {
                this._status$.next(FormStatus.Invalid);
            }
            this._resetButtons();
            this._updateDirtySubmitButtons();
        });
    }
    _resetButtons() {
        this._submitButtons.forEach((button) => {
            button.reset();
        });
    }
    _registerConfirm() {
        this.ngForm.form.valueChanges
            .pipe(takeUntil(this._destroy$))
            .subscribe((changes) => {
            if (this.confirm) {
                const existing = Object.keys(this._snapshot);
                Object.keys(changes)
                    .forEach((name) => {
                    if (existing.indexOf(name) === -1) {
                        this._snapshot[name] = changes[name];
                    }
                });
            }
        });
    }
    _registerDrawerClose() {
        if (this._drawerRef) {
            this._drawerRef.closeStart$
                .pipe(takeUntil(this._destroy$))
                .subscribe((subscriber) => {
                if (this.submitting) {
                    this._status$
                        .pipe(filter((status) => status === FormStatus.Success || status === FormStatus.Error), takeUntil(this._destroy$))
                        .subscribe((status) => {
                        if (status === FormStatus.Success) {
                            subscriber.next();
                            subscriber.complete();
                        }
                        else {
                            subscriber.error();
                        }
                    });
                }
                else {
                    subscriber.next();
                    subscriber.complete();
                }
            });
        }
    }
    _registerConfirmDrawerClose() {
        if (this._drawerRef) {
            this._drawerRef.closeStart$
                .pipe(switchMap((subscriber) => {
                return iif(() => this.confirm && this.confirmDrawer, this.triggerConfirm()
                    .pipe(map((result) => confirmResultContinue(result)), tap((result) => {
                    if (result) {
                        subscriber.next();
                        subscriber.complete();
                    }
                })), defer(() => {
                    subscriber.next();
                    subscriber.complete();
                }));
            }), takeUntil(this._destroy$))
                .subscribe();
        }
    }
    _registerConfirmTabs() {
        if (this.tabGroup) {
            this.registerConfirmTabGroup(this.tabGroup);
        }
        this.registerConfirmTabGroups(this._tabGroups.toArray());
        this._tabGroups.changes
            .pipe(takeUntil(this._destroy$))
            .subscribe(() => {
            this.registerConfirmTabGroups(this._tabGroups.toArray());
        });
    }
    registerConfirmTabGroups(tabGroups) {
        tabGroups.forEach((tabGroup) => {
            this.registerConfirmTabGroup(tabGroup);
        });
    }
    registerConfirmTabGroup(tabGroup) {
        const confirmTabGroup = tabGroup;
        if (!confirmTabGroup._originalHandleClick) {
            confirmTabGroup._originalHandleClick = tabGroup._handleClick;
            confirmTabGroup._handlClick$ = new Subject();
            confirmTabGroup._handleClick = (tab, tabHeader, idx) => {
                if (confirmTabGroup._handlClick$.observers.length) {
                    confirmTabGroup._handlClick$.next({ tab, tabHeader, idx });
                }
                else {
                    confirmTabGroup._originalHandleClick(tab, tabHeader, idx);
                }
            };
        }
        confirmTabGroup._handlClick$
            .pipe(takeUntil(this._destroy$))
            .subscribe((event) => {
            if (!this.submitting) {
                if (this.confirm && this.confirmTabs) {
                    this.triggerConfirm()
                        .pipe(takeUntil(this._destroy$))
                        .subscribe((result) => {
                        if (confirmResultContinue(result)) {
                            confirmTabGroup.selectedIndex = event.idx;
                        }
                    });
                }
                else {
                    confirmTabGroup._originalHandleClick(event.tab, event.tabHeader, event.idx);
                }
            }
        });
    }
    _registerConfirmDialogClose() {
        if (this._dialogRef) {
            this.formDialogClose.forEach(item => {
                this._registerDialogClose(item);
            });
            this.formDialogClose.changes
                .pipe(takeUntil(this._destroy$))
                .subscribe((e) => {
                e.forEach(item => {
                    this._registerDialogClose(item);
                });
            });
        }
    }
    _registerConfirmDialogBackdropEscape() {
        this._dialogBackdropEscape = this._dialogRef && this._dialogRef.disableClose !== true;
        if (this._dialogRef && !this._dialogRef.disableClose) {
            this._dialogRef.disableClose = true;
            this._dialogRef.backdropClick()
                .pipe(takeUntil(this._destroy$))
                .subscribe(() => {
                this._formClose();
            });
            this._destroy$
                .subscribe(() => {
                this._dialogRef.disableClose = false;
            });
        }
    }
    _registerAutocomplete() {
        this._registerControl = this.ngForm.form.registerControl.bind(this.ngForm.form);
        this.ngForm.form.registerControl = (name, control) => {
            const el = this._element.nativeElement.querySelector(`input[name='${name}']`);
            if (el) {
                el.setAttribute('name', name + '_' + guid());
                if (!el.getAttribute('autocomplete')) {
                    el.setAttribute('autocomplete', 'none');
                }
            }
            return this._registerControl(name, control);
        };
    }
    _registerDirtySubmitButton() {
        if (!this.ngForm) {
            return;
        }
        this.ngForm.form.valueChanges
            .pipe(takeUntil(this._destroy$))
            .subscribe(() => {
            this._updateDirtySubmitButtons();
        });
        this._submitButtons.changes
            .pipe(takeUntil(this._destroy$))
            .subscribe(() => {
            this._updateDirtySubmitButtons();
        });
    }
    _updateDirtySubmitButtons() {
        this._submitButtons
            .forEach((submitButton) => {
            if (!this.confirm || !this.dirtySubmitButton || this.ngForm.dirty || !submitButton.dirtySubmit) {
                submitButton.enable();
            }
            else {
                submitButton.disable();
            }
        });
    }
    _broadcastSubmittingEvents() {
        this._status$.next(FormStatus.Submitting);
        this._form.broadcast('submit', this.ngForm);
    }
    _markControlsAsTouchedAndUpdateValidity() {
        Object.values(this.ngForm.controls)
            .forEach(control => {
            control.markAsDirty();
            control.markAsTouched();
            control.updateValueAndValidity();
        });
    }
    _setupActiveSubmitButton() {
        this._activeSubmitButton = this._getActiveButton();
        this._resetButtons();
        if (this._activeSubmitButton) {
            this._activeSubmitButton.process();
        }
    }
    _waitUntilStatusPending() {
        return this.ngForm.statusChanges
            .pipe(startWith(this.ngForm.status), first((state) => state !== 'PENDING'));
    }
    _handleError(e) {
        console.log('%c Form Submit ', 'color: white; background-color: #D33F49', 'Error occured');
        console.group('Error Details:');
        console.log('Message: ', e);
        console.log('FormRef: ', this);
        if (this.ngForm.invalid) {
            const errors = getFormErrors(this.ngForm.control, null);
            console.log('Validation Errors: ', errors);
        }
        console.groupEnd();
        this._completeSubmit(false, null);
    }
}
FsFormDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsFormDirective, deps: [{ token: NgForm }, { token: i1.FsForm }, { token: i0.ElementRef }, { token: i2.FsMessage }, { token: i3.FsPrompt }, { token: i0.NgZone }, { token: MatDialogRef, optional: true }, { token: DrawerRef, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
FsFormDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsFormDirective, selector: "[fsForm]", inputs: { wrapperSelector: "wrapperSelector", messageSelector: "messageSelector", hintSelector: "hintSelector", labelSelector: "labelSelector", autocomplete: "autocomplete", shortcuts: "shortcuts", confirm: "confirm", confirmDialog: "confirmDialog", confirmDrawer: "confirmDrawer", confirmBrowser: "confirmBrowser", confirmTabs: "confirmTabs", dirtySubmitButton: "dirtySubmitButton", submit: "submit", successDelay: "successDelay", errorDelay: "errorDelay", tabGroup: "tabGroup" }, outputs: { submitEvent: "fsForm", invalid: "invalid", valid: "valid", submitted: "submitted", reseted: "reseted", cleared: "cleared" }, host: { properties: { "class.fs-form": "this.fsformClass" } }, queries: [{ propertyName: "formDialogClose", predicate: FsFormDialogCloseDirective, descendants: true }, { propertyName: "_tabGroups", predicate: MatTabGroup, descendants: true }], usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsFormDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[fsForm]',
                }]
        }], ctorParameters: function () { return [{ type: i4.NgForm, decorators: [{
                    type: Inject,
                    args: [NgForm]
                }] }, { type: i1.FsForm }, { type: i0.ElementRef }, { type: i2.FsMessage }, { type: i3.FsPrompt }, { type: i0.NgZone }, { type: i5.MatDialogRef, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [MatDialogRef]
                }] }, { type: i6.DrawerRef, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DrawerRef]
                }] }]; }, propDecorators: { wrapperSelector: [{
                type: Input
            }], messageSelector: [{
                type: Input
            }], hintSelector: [{
                type: Input
            }], labelSelector: [{
                type: Input
            }], autocomplete: [{
                type: Input
            }], shortcuts: [{
                type: Input
            }], confirm: [{
                type: Input
            }], confirmDialog: [{
                type: Input
            }], confirmDrawer: [{
                type: Input
            }], confirmBrowser: [{
                type: Input
            }], confirmTabs: [{
                type: Input
            }], dirtySubmitButton: [{
                type: Input
            }], submit: [{
                type: Input
            }], successDelay: [{
                type: Input
            }], errorDelay: [{
                type: Input
            }], tabGroup: [{
                type: Input
            }], submitEvent: [{
                type: Output,
                args: ['fsForm']
            }], invalid: [{
                type: Output
            }], valid: [{
                type: Output
            }], submitted: [{
                type: Output
            }], reseted: [{
                type: Output
            }], cleared: [{
                type: Output
            }], fsformClass: [{
                type: HostBinding,
                args: ['class.fs-form']
            }], formDialogClose: [{
                type: ContentChildren,
                args: [FsFormDialogCloseDirective, { descendants: true }]
            }], _tabGroups: [{
                type: ContentChildren,
                args: [MatTabGroup, { descendants: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,