import { Input, ElementRef, Renderer2, Directive, Injector, Optional, Inject, Self, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { values, keys } from 'lodash-es';
import { FsFormDirective } from '../form/form.directive';
import { VALIDATE_MESSAGE_PROVIDER, VALIDATE_MESSAGES } from '../../providers/validate-messages.provider';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "../form/form.directive";
export class FsControlDirective {
    constructor(elementRef, renderer2, injector, _validateMessages, ngControl, formDirective) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.injector = injector;
        this._validateMessages = _validateMessages;
        this.ngControl = ngControl;
        this.formDirective = formDirective;
        this.appendMessageClass = 'fs-form-message';
        this.appendLabelClass = 'fs-form-label';
        this.appendErrorClass = 'fs-form-error';
        this.appendHintClass = 'fs-form-hint';
        this.errors = [];
        // protected _validateMessages = { ...ERROR_MESSAGES };
        this._destroy$ = new Subject();
        if (ngControl) {
            this._control = ngControl.control;
        }
        else {
            console.error('The element does not have a valid ngModel', this.elementRef.nativeElement);
        }
    }
    set validateMessages(messages) {
        this._validateMessages = Object.assign(Object.assign({}, this._validateMessages), messages);
    }
    ngOnInit() {
        this._setupValidators();
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
    ngAfterContentInit() {
        if (this._control) {
            /*
              Ensure that statusChanges has one subscription per control. Multiple can happen
              when multiple fsForm validation directives are applied to the same element
            */
            if (!this._control.statusChangesSubscribe) {
                this._control.statusChanges
                    .pipe(takeUntil(this._destroy$))
                    .subscribe(this.render.bind(this));
                this._control.statusChangesSubscribe = true;
            }
        }
    }
    getMessageSelector() {
        if (this.messageSelector === false) {
            return '';
        }
        if (this.messageSelector) {
            return this.messageSelector;
        }
        else if (this.formDirective && this.formDirective.messageSelector) {
            return this.formDirective.messageSelector;
        }
    }
    getHintWrapperSelector() {
        if (this.hintSelector === false) {
            return '';
        }
        if (this.hintSelector) {
            return this.hintSelector;
        }
        else if (this.formDirective && this.formDirective.hintSelector) {
            return this.formDirective.hintSelector;
        }
    }
    getWrapperSelector() {
        if (this.wrapperSelector === false) {
            return '';
        }
        if (this.wrapperSelector) {
            return this.wrapperSelector;
        }
        else if (this.formDirective && this.formDirective.wrapperSelector) {
            return this.formDirective.wrapperSelector;
        }
    }
    getlabelSelector() {
        if (this.labelSelector === false) {
            return '';
        }
        if (this.labelSelector) {
            return this.labelSelector;
        }
        else if (this.formDirective && this.formDirective.labelSelector) {
            return this.formDirective.labelSelector;
        }
    }
    getWrapperElement() {
        const wrapper = this.getWrapper(this.elementRef.nativeElement);
        if (wrapper) {
            return wrapper;
        }
        return this.elementRef.nativeElement;
    }
    /*
      <mat-form-field class="mat-form-field">  <-- Field Wrapper Class. Look for parents from the native element with the matching wrapperSelector. If not found defaults to native element.
        <input>
        <div class="fs-form-message"> <-- Message Selector. Look for the element with class .fs-form-message or messageSelector
          <div class="fs-form-message"></div>
          <div class="fs-form-hint"></div> <-- Hint Selector. Look for the element with class .fs-form-hint or hintSelector
        </div>
      </mat-form-field>
    */
    render() {
        var _a;
        if (this.ngControl) {
            const renderer = this.renderer2;
            const wrapper = this.getWrapperElement();
            const error = this.ngControl.dirty ? this.getError(this.ngControl) : null;
            if (!this.getMessageSelector()) {
                return;
            }
            const messageWrapper = wrapper.querySelector(this.getMessageSelector());
            if (!messageWrapper) {
                return console.warn('Failed to locate ' + this.getMessageSelector(), this.elementRef.nativeElement);
            }
            if (this.getlabelSelector()) {
                const labelWrapper = wrapper.querySelector(this.getlabelSelector());
                if (labelWrapper) {
                    if (this.appendLabelClass) {
                        this.renderer2.addClass(labelWrapper, this.appendLabelClass);
                    }
                }
            }
            if (this.appendMessageClass) {
                renderer.addClass(messageWrapper, this.appendMessageClass);
            }
            if (this.getHintWrapperSelector()) {
                const hint = messageWrapper.querySelector(this.getHintWrapperSelector());
                if (hint) {
                    renderer.setStyle(hint, 'display', error ? 'none' : 'block');
                    if (this.appendHintClass) {
                        renderer.addClass(hint, this.appendHintClass);
                    }
                }
            }
            let errorWrapper = wrapper.querySelector('.fs-form-error-target');
            if (errorWrapper) {
                errorWrapper.remove();
            }
            wrapper.classList.remove('ng-invalid');
            const shouldErrorBeRendered = this.ngControl.invalid
                && (this.ngControl.dirty || ((_a = this.formDirective.ngForm) === null || _a === void 0 ? void 0 : _a.submitted));
            if (!shouldErrorBeRendered || !error) {
                return;
            }
            wrapper.classList.add('ng-invalid');
            errorWrapper = renderer.createElement('div');
            renderer.addClass(errorWrapper, 'fs-form-error-target');
            renderer.addClass(errorWrapper, this.appendErrorClass);
            renderer.addClass(errorWrapper, this.appendErrorClass + '-' + error.name);
            const errorText = renderer.createText(error.message);
            renderer.appendChild(errorWrapper, errorText);
            messageWrapper.appendChild(errorWrapper);
        }
    }
    getWrapper(node, count = 0) {
        if (!node || count > 10) {
            return null;
        }
        if (node.parentNode && node.parentNode.querySelector(this.getWrapperSelector())) {
            return node;
        }
        return this.getWrapper(node.parentNode, ++count);
    }
    parseErrorMessage(message, args) {
        values(args)
            .forEach((name) => {
            message = message.replace(/\$\(\d\)/, name);
        });
        return message;
    }
    getError(controlRef) {
        const name = keys(controlRef.control.errors)[0];
        if (!name) {
            return null;
        }
        let message = controlRef.control.errors[name];
        if (this._validateMessages[name]) {
            message = this.parseErrorMessage(this._validateMessages[name], message);
        }
        return { name: name, message: message };
    }
    _setupValidators() {
        const control = this._control;
        if (this.validate) {
            const validators = control.validator
                ? [control.validator, this.validate.bind(this)]
                : this.validate.bind(this);
            control.setValidators(validators);
        }
        if (this.validateAsync) {
            const asyncValidators = control.asyncValidator
                ? [control.asyncValidator, this.validateAsync.bind(this)]
                : this.validateAsync.bind(this);
            control.setAsyncValidators(asyncValidators);
        }
        control.updateValueAndValidity();
    }
}
FsControlDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsControlDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.Injector }, { token: VALIDATE_MESSAGES, self: true }, { token: i1.NgControl, optional: true }, { token: FsFormDirective, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
FsControlDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsControlDirective, selector: "[fsFormControl]", inputs: { wrapperSelector: "wrapperSelector", messageSelector: "messageSelector", hintSelector: "hintSelector", labelSelector: "labelSelector", appendMessageClass: "appendMessageClass", appendLabelClass: "appendLabelClass", appendErrorClass: "appendErrorClass", appendHintClass: "appendHintClass", validateMessages: "validateMessages" }, providers: [
        VALIDATE_MESSAGE_PROVIDER
    ], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsControlDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[fsFormControl]',
                    providers: [
                        VALIDATE_MESSAGE_PROVIDER
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.Injector }, { type: undefined, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [VALIDATE_MESSAGES]
                }] }, { type: i1.NgControl, decorators: [{
                    type: Optional
                }] }, { type: i2.FsFormDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [FsFormDirective]
                }] }]; }, propDecorators: { wrapperSelector: [{
                type: Input
            }], messageSelector: [{
                type: Input
            }], hintSelector: [{
                type: Input
            }], labelSelector: [{
                type: Input
            }], appendMessageClass: [{
                type: Input
            }], appendLabelClass: [{
                type: Input
            }], appendErrorClass: [{
                type: Input
            }], appendHintClass: [{
                type: Input
            }], validateMessages: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,