import { Directive, Host, ElementRef, HostBinding, Optional, Input, ChangeDetectorRef } from '@angular/core';
import { MatButton } from '@angular/material/button';
import { FsFormDirective } from '../directives/form/form.directive';
import { fromEvent, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/button";
import * as i2 from "../directives/form/form.directive";
export class FsSubmitButtonDirective {
    constructor(_matButton, _form, _elementRef, _cdRef) {
        this._matButton = _matButton;
        this._form = _form;
        this._elementRef = _elementRef;
        this._cdRef = _cdRef;
        this.dirtySubmit = true;
        this.transitionStyle = null;
        this.active = false;
        this._destroy$ = new Subject();
    }
    ngOnInit() {
        if (this._form) {
            this._form.addSubmitButton(this);
            fromEvent(this.element, 'click')
                .pipe(takeUntil(this._destroy$))
                .subscribe(() => {
                this.active = true;
            });
            if (this.dirtySubmit) {
                if (this._form.dirtySubmitButton) {
                    if (!this._form.ngForm.dirty) {
                        this.disable();
                    }
                }
            }
            this.transitionStyle = 'none';
            setTimeout(() => {
                this.transitionStyle = null;
            }, 500);
        }
    }
    disable() {
        if (this._matButton) {
            this._matButton.disabled = true;
            this._cdRef.markForCheck();
        }
    }
    enable() {
        if (this._matButton) {
            this._matButton.disabled = false;
            this._matButton.disableRipple = true;
            this._cdRef.markForCheck();
        }
    }
    process() {
        this.setClass('process');
        this._matButton.disableRipple = true;
    }
    success() {
        this.setClass('success');
        this._matButton.disableRipple = false;
    }
    error() {
        this.setClass('error');
        this._matButton.disableRipple = false;
    }
    setClass(cls) {
        const svg = this._getSvg(cls);
        this._resetClass();
        this._disableShadowAnimation();
        this.element.classList.add(`submit-${cls}`);
        this.element.append(svg);
    }
    get element() {
        return this._elementRef.nativeElement;
    }
    reset() {
        this.active = false;
        this.enable();
        this.element.querySelectorAll('.svg-icon')
            .forEach((el) => {
            el.remove();
        });
        this._matButton.disableRipple = false;
        this._resetClass();
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
        this._form.removeSubmitButton(this);
    }
    _disableShadowAnimation() {
        // .mat-elevation-z2 removes the click shadow animation
        //this.element.classList.add('mat-elevation-z2');
    }
    _resetClass() {
        this.element.classList.remove('submit-success', 'submit-error', 'submit-process', 'mat-elevation-z2');
    }
    _getSvg(type) {
        if (type === 'success') {
            return new DOMParser().parseFromString(`<svg class="svg-icon svg-icon-success" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 38 38" style="enable-background:new 0 0 38 38;" xml:space="preserve" width="38px" height="38px">
      <g>
        <g class="check">
          <g>
            <path d="M29.6,11.9c-0.5-0.5-1.3-0.5-1.8,0L16.3,23.4l-6.1-6.1c-0.5-0.5-1.3-0.5-1.8,0s-0.5,1.3,0,1.8l7,7c0.3,0.3,0.6,0.4,0.9,0.4s0.7-0.1,0.9-0.4l12.4-12.4C30.1,13.2,30.1,12.4,29.6,11.9z"/>
          </g>
        </g>
      </g>
      </svg>`, 'text/xml').firstChild;
        }
        if (type === 'process') {
            return new DOMParser().parseFromString(`<svg class="svg-icon svg-icon-process" width="38" height="38" viewBox="0 0 38 38" xmlns="http://www.w3.org/2000/svg">
      <g fill="none" fill-rule="evenodd">
        <g transform="translate(1 1)" stroke-width="2"><circle stroke-opacity=".5" cx="18" cy="18" r="18"/>
          <path d="M36 18c0-9.94-8.06-18-18-18"><animateTransform attributeName="transform" type="rotate" from="0 18 18" to="360 18 18" dur=".7s" repeatCount="indefinite"/></path>
        </g>
      </g>
      </svg>`, 'text/xml').firstChild;
        }
        if (type === 'error') {
            return new DOMParser().parseFromString(`<svg class="svg-icon svg-icon-error" xmlns="http://www.w3.org/2000/svg" width="38px" height="38px" viewBox="0 0 16 16"><g><path d="M8 1c3.9 0 7 3.1 7 7s-3.1 7-7 7-7-3.1-7-7 3.1-7 7-7zM8 0c-4.4 0-8 3.6-8 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8v0z" data-original="#444444" data-old_color="#444444"/><path d="M12.2 10.8l-2.8-2.8 2.8-2.8-1.4-1.4-2.8 2.8-2.8-2.8-1.4 1.4 2.8 2.8-2.8 2.8 1.4 1.4 2.8-2.8 2.8 2.8z"/></g> </svg>`, 'text/xml').firstChild;
        }
    }
}
FsSubmitButtonDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsSubmitButtonDirective, deps: [{ token: i1.MatButton, host: true, optional: true }, { token: i2.FsFormDirective, optional: true }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });
FsSubmitButtonDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsSubmitButtonDirective, selector: "button[type=\"submit\"]", inputs: { name: "name", dirtySubmit: "dirtySubmit" }, host: { properties: { "style.transition": "this.transitionStyle" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsSubmitButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'button[type="submit"]',
                }]
        }], ctorParameters: function () { return [{ type: i1.MatButton, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }] }, { type: i2.FsFormDirective, decorators: [{
                    type: Optional
                }] }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { name: [{
                type: Input
            }], dirtySubmit: [{
                type: Input
            }], transitionStyle: [{
                type: HostBinding,
                args: ['style.transition']
            }] } });
//# sourceMappingURL=data:application/json;base64,